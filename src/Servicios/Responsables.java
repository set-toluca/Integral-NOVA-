/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Servicios;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Empleado;
import Hibernate.entidades.Orden;
import Hibernate.entidades.Usuario;
import Empleados.buscaEmpleado;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import Integral.Herramientas;
import Integral.calendario;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Properties;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

/**
 *
 * @author I.S.C Salvador
 */
public class Responsables extends javax.swing.JPanel {

    /**
     * Creates new form Responsables
     */
    private  Usuario usr;
    private String orden="";
    final Herramientas h;
    String estado="";
    String sessionPrograma="";
    
    public Responsables(String id, Usuario usuar1o, String edo, String ses) {
        sessionPrograma=ses;
        usr=usuar1o;
        orden=id;
        estado=edo;
        initComponents();
        buscaApertura();
        if(edo.compareTo("")!=0)
            permisos(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
        h=new Herramientas(usr, 0);
        if(h.isCerrada(orden)==true)
            permisos(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        p_caja = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        p_tracto = new javax.swing.JPanel();
        p_metas = new javax.swing.JPanel();
        t_meta_valuacion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        b_meta_valuacion = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        t_meta_refacciones = new javax.swing.JTextField();
        b_meta_refacciones = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        t_meta_reparacion = new javax.swing.JTextField();
        b_meta_reparacion = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        t_apertura = new javax.swing.JTextField();
        l_apertura = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        t_inicio_apertura = new javax.swing.JTextField();
        l_autorizo_apertura = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        t_expediente = new javax.swing.JTextField();
        b_buscar_expediente = new javax.swing.JButton();
        b_borrar_expediente = new javax.swing.JButton();
        l_expediente = new javax.swing.JLabel();
        t_inicio_expediente = new javax.swing.JTextField();
        l_autorizo_expediente = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        t_levantamiento = new javax.swing.JTextField();
        b_buscar_levantamento = new javax.swing.JButton();
        b_borrar_levantamento = new javax.swing.JButton();
        l_levantamiento = new javax.swing.JLabel();
        t_inicio_levantamiento = new javax.swing.JTextField();
        l_autorizo_levantamiento = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        t_cierre_levantamiento = new javax.swing.JTextField();
        t_inicio_cotizar = new javax.swing.JTextField();
        l_autorizo_cotizar = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        t_cotizar = new javax.swing.JTextField();
        b_buscar_cotizar = new javax.swing.JButton();
        b_borrar_cotizar = new javax.swing.JButton();
        l_cotizar = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        t_cierre_cotizar = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        cb_autoriza_cliente = new javax.swing.JCheckBox();
        t_inicio_autoriza_cliente = new javax.swing.JTextField();
        l_autorizo_cliente = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        cb_autoriza_interna = new javax.swing.JCheckBox();
        jLabel28 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        t_valuacion = new javax.swing.JTextField();
        b_buscar_valuacion = new javax.swing.JButton();
        b_borrar_valuacion = new javax.swing.JButton();
        l_valuacion = new javax.swing.JLabel();
        l_autorizo_valuacion = new javax.swing.JLabel();
        t_inicio_valuacion = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        cb_envio_compania = new javax.swing.JCheckBox();
        jLabel31 = new javax.swing.JLabel();
        t_inicio_envio_compania = new javax.swing.JTextField();
        l_autorizo_envio_compania = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        cb_autoriza_compania = new javax.swing.JCheckBox();
        jLabel35 = new javax.swing.JLabel();
        t_inicio_autoriza_compania = new javax.swing.JTextField();
        l_autorizo_autoriza_compania = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        cb_autoriza_reparacion = new javax.swing.JCheckBox();
        jLabel37 = new javax.swing.JLabel();
        t_cierre_valuacion = new javax.swing.JTextField();
        l_autorizo_cierre_valuacion = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        t_refacciones = new javax.swing.JTextField();
        b_buscar_refacciones = new javax.swing.JButton();
        b_borrar_refacciones = new javax.swing.JButton();
        l_refacciones = new javax.swing.JLabel();
        t_inicio_refacciones = new javax.swing.JTextField();
        l_autorizo_refacciones = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        t_cierre_refacciones = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        t_inicio_reparacion = new javax.swing.JTextField();
        l_autorizo_reparacion = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        t_cierre_reparacion = new javax.swing.JTextField();
        cb_autoriza_valuacion = new javax.swing.JCheckBox();
        cb_entrega_unidad = new javax.swing.JCheckBox();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        t_inicio_factura = new javax.swing.JTextField();
        l_inicio_factura = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        t_factura = new javax.swing.JTextField();
        t_inicio_entrega_unidad = new javax.swing.JTextField();
        l_autorizo_entregar = new javax.swing.JLabel();
        l_autorizar_interna = new javax.swing.JLabel();
        t_autorizar_interna = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        cb_cierre_unidad = new javax.swing.JCheckBox();
        jLabel49 = new javax.swing.JLabel();
        t_cierre_unidad = new javax.swing.JTextField();
        l_autorizar_cierre = new javax.swing.JLabel();

        p_caja.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        p_caja.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));
        p_caja.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, -1, -1));

        jLabel8.setIcon(new ImageIcon("imagenes/llantas.png"));
        p_caja.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 700, 230));

        javax.swing.GroupLayout p_tractoLayout = new javax.swing.GroupLayout(p_tracto);
        p_tracto.setLayout(p_tractoLayout);
        p_tractoLayout.setHorizontalGroup(
            p_tractoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        p_tractoLayout.setVerticalGroup(
            p_tractoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        p_metas.setBackground(new java.awt.Color(255, 255, 255));
        p_metas.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(90, 66, 126), 1, true), "Metas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 12))); // NOI18N

        t_meta_valuacion.setText("DD/MM/AAAA");
        t_meta_valuacion.setToolTipText("Fecha para valuación");
        t_meta_valuacion.setEnabled(false);

        jLabel2.setText("Meta Valuación:");

        b_meta_valuacion.setBackground(new java.awt.Color(2, 135, 242));
        b_meta_valuacion.setIcon(new ImageIcon("imagenes/calendario.png"));
        b_meta_valuacion.setToolTipText("Calendario");
        b_meta_valuacion.setEnabled(false);
        b_meta_valuacion.setMaximumSize(new java.awt.Dimension(32, 8));
        b_meta_valuacion.setMinimumSize(new java.awt.Dimension(32, 8));
        b_meta_valuacion.setPreferredSize(new java.awt.Dimension(32, 8));
        b_meta_valuacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_meta_valuacionActionPerformed(evt);
            }
        });

        jLabel4.setText("Meta Refacciones:");

        t_meta_refacciones.setText("DD/MM/AAAA");
        t_meta_refacciones.setToolTipText("fecha para refacciones");
        t_meta_refacciones.setEnabled(false);

        b_meta_refacciones.setBackground(new java.awt.Color(2, 135, 242));
        b_meta_refacciones.setIcon(new ImageIcon("imagenes/calendario.png"));
        b_meta_refacciones.setToolTipText("Calendario");
        b_meta_refacciones.setEnabled(false);
        b_meta_refacciones.setMaximumSize(new java.awt.Dimension(32, 8));
        b_meta_refacciones.setMinimumSize(new java.awt.Dimension(32, 8));
        b_meta_refacciones.setPreferredSize(new java.awt.Dimension(32, 8));
        b_meta_refacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_meta_refaccionesActionPerformed(evt);
            }
        });

        jLabel6.setText("Meta Reparación:");

        t_meta_reparacion.setText("DD/MM/AAAA");
        t_meta_reparacion.setToolTipText("fecha para reparación");
        t_meta_reparacion.setEnabled(false);

        b_meta_reparacion.setBackground(new java.awt.Color(2, 135, 242));
        b_meta_reparacion.setIcon(new ImageIcon("imagenes/calendario.png"));
        b_meta_reparacion.setToolTipText("Calendario");
        b_meta_reparacion.setEnabled(false);
        b_meta_reparacion.setMaximumSize(new java.awt.Dimension(32, 8));
        b_meta_reparacion.setMinimumSize(new java.awt.Dimension(32, 8));
        b_meta_reparacion.setPreferredSize(new java.awt.Dimension(32, 8));
        b_meta_reparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_meta_reparacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_metasLayout = new javax.swing.GroupLayout(p_metas);
        p_metas.setLayout(p_metasLayout);
        p_metasLayout.setHorizontalGroup(
            p_metasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_metasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(t_meta_valuacion, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_meta_valuacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_meta_refacciones, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_meta_refacciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_meta_reparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_meta_reparacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        p_metasLayout.setVerticalGroup(
            p_metasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_metasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_metasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_metasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_meta_reparacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addComponent(b_meta_reparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(p_metasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_meta_valuacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(b_meta_valuacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(p_metasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_meta_refacciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(b_meta_refacciones, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(p_metas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 910, 70));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("1.-  Apertura:");
        jLabel1.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel1.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel1.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 70, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 255));
        jLabel5.setText("Operación");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 255));
        jLabel7.setText("No° Emp.");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 80, -1));

        t_apertura.setBackground(new java.awt.Color(204, 255, 255));
        t_apertura.setAlignmentX(0.0F);
        t_apertura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_apertura.setEnabled(false);
        add(t_apertura, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 62, -1));

        l_apertura.setText("<Nombre del Responsable>");
        add(l_apertura, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 310, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 51, 255));
        jLabel14.setText("Fecha y Hora");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, 163, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 51, 255));
        jLabel15.setText("Asigno Operación");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, -1, -1));

        t_inicio_apertura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_apertura.setEnabled(false);
        t_inicio_apertura.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_apertura.setName(""); // NOI18N
        t_inicio_apertura.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_apertura, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, 163, -1));

        l_autorizo_apertura.setText("<Usuario que asigno operación>");
        l_autorizo_apertura.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_apertura.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_apertura.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_apertura, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 190, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("2.-  Expediente:");
        jLabel3.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel3.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel3.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 140, -1));

        t_expediente.setBackground(new java.awt.Color(204, 255, 255));
        t_expediente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_expediente.setEnabled(false);
        t_expediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_expedienteActionPerformed(evt);
            }
        });
        add(t_expediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 62, -1));

        b_buscar_expediente.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar_expediente.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_buscar_expediente.setToolTipText("Consultar empleados");
        b_buscar_expediente.setMaximumSize(new java.awt.Dimension(32, 8));
        b_buscar_expediente.setMinimumSize(new java.awt.Dimension(32, 8));
        b_buscar_expediente.setPreferredSize(new java.awt.Dimension(32, 8));
        b_buscar_expediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscar_expedienteActionPerformed(evt);
            }
        });
        add(b_buscar_expediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 45, 28, 24));

        b_borrar_expediente.setBackground(new java.awt.Color(2, 135, 242));
        b_borrar_expediente.setIcon(new ImageIcon("imagenes/eliminar.png"));
        b_borrar_expediente.setToolTipText("Eliminar asignación");
        b_borrar_expediente.setMaximumSize(new java.awt.Dimension(32, 8));
        b_borrar_expediente.setMinimumSize(new java.awt.Dimension(32, 8));
        b_borrar_expediente.setPreferredSize(new java.awt.Dimension(32, 8));
        b_borrar_expediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_borrar_expedienteActionPerformed(evt);
            }
        });
        add(b_borrar_expediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 45, 28, 24));

        l_expediente.setText("<Nombre del Responsable>");
        add(l_expediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 310, -1));

        t_inicio_expediente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_expediente.setEnabled(false);
        t_inicio_expediente.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_expediente.setName(""); // NOI18N
        t_inicio_expediente.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_expediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 50, 163, -1));

        l_autorizo_expediente.setText("<Usuario que asigno operación>");
        l_autorizo_expediente.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_expediente.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_expediente.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_expediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 50, 200, -1));

        jLabel10.setText("Inicio ________________________________________________________________________");
        jLabel10.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel10.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel10.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 92, 550, -1));

        t_levantamiento.setBackground(new java.awt.Color(204, 255, 255));
        t_levantamiento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_levantamiento.setEnabled(false);
        add(t_levantamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 62, -1));

        b_buscar_levantamento.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar_levantamento.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_buscar_levantamento.setToolTipText("Consultar empleados");
        b_buscar_levantamento.setMaximumSize(new java.awt.Dimension(32, 8));
        b_buscar_levantamento.setMinimumSize(new java.awt.Dimension(32, 8));
        b_buscar_levantamento.setPreferredSize(new java.awt.Dimension(32, 8));
        b_buscar_levantamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscar_levantamentoActionPerformed(evt);
            }
        });
        add(b_buscar_levantamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 70, 28, 24));

        b_borrar_levantamento.setBackground(new java.awt.Color(2, 135, 242));
        b_borrar_levantamento.setIcon(new ImageIcon("imagenes/eliminar.png"));
        b_borrar_levantamento.setToolTipText("Eliminar asignación");
        b_borrar_levantamento.setMaximumSize(new java.awt.Dimension(32, 8));
        b_borrar_levantamento.setMinimumSize(new java.awt.Dimension(32, 8));
        b_borrar_levantamento.setPreferredSize(new java.awt.Dimension(32, 8));
        b_borrar_levantamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_borrar_levantamentoActionPerformed(evt);
            }
        });
        add(b_borrar_levantamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 70, 28, 24));

        l_levantamiento.setText("<Nombre del Responsable>");
        add(l_levantamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 310, -1));

        t_inicio_levantamiento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_levantamiento.setEnabled(false);
        t_inicio_levantamiento.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_levantamiento.setName(""); // NOI18N
        t_inicio_levantamiento.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_levantamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, 163, -1));

        l_autorizo_levantamiento.setText("<Usuario que asigno operación>");
        l_autorizo_levantamiento.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_levantamiento.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_levantamiento.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_levantamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 70, 200, -1));

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("3.-  Levantamiento:");
        jLabel17.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel17.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel17.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 140, -1));

        jLabel18.setText("Cierre _______________________________________________________________________");
        jLabel18.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel18.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel18.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 113, 550, -1));

        t_cierre_levantamiento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cierre_levantamiento.setEnabled(false);
        t_cierre_levantamiento.setMinimumSize(new java.awt.Dimension(250, 19));
        t_cierre_levantamiento.setName(""); // NOI18N
        t_cierre_levantamiento.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_cierre_levantamiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 110, 163, -1));

        t_inicio_cotizar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_cotizar.setEnabled(false);
        t_inicio_cotizar.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_cotizar.setName(""); // NOI18N
        t_inicio_cotizar.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 150, 163, -1));

        l_autorizo_cotizar.setText("<Usuario que asigno operación>");
        l_autorizo_cotizar.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_cotizar.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_cotizar.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 132, 200, -1));

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setText("5.- Autorizacion del Cliente:");
        jLabel19.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel19.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel19.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 193, 160, -1));

        t_cotizar.setBackground(new java.awt.Color(204, 255, 255));
        t_cotizar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cotizar.setEnabled(false);
        add(t_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 132, 62, -1));

        b_buscar_cotizar.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar_cotizar.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_buscar_cotizar.setToolTipText("Consultar empleados");
        b_buscar_cotizar.setMaximumSize(new java.awt.Dimension(32, 8));
        b_buscar_cotizar.setMinimumSize(new java.awt.Dimension(32, 8));
        b_buscar_cotizar.setPreferredSize(new java.awt.Dimension(32, 8));
        b_buscar_cotizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscar_cotizarActionPerformed(evt);
            }
        });
        add(b_buscar_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 130, 28, 24));

        b_borrar_cotizar.setBackground(new java.awt.Color(2, 135, 242));
        b_borrar_cotizar.setIcon(new ImageIcon("imagenes/eliminar.png"));
        b_borrar_cotizar.setToolTipText("Eliminar asignación");
        b_borrar_cotizar.setMaximumSize(new java.awt.Dimension(32, 8));
        b_borrar_cotizar.setMinimumSize(new java.awt.Dimension(32, 8));
        b_borrar_cotizar.setPreferredSize(new java.awt.Dimension(32, 8));
        b_borrar_cotizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_borrar_cotizarActionPerformed(evt);
            }
        });
        add(b_borrar_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 130, 28, 24));

        l_cotizar.setText("<Nombre del Responsable>");
        add(l_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 132, 310, -1));

        jLabel12.setText("Inicio ________________________________________________________________________");
        jLabel12.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel12.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel12.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 550, -1));

        jLabel20.setText("____________________________________________________________");
        jLabel20.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel20.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel20.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 193, 430, -1));

        t_cierre_cotizar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cierre_cotizar.setEnabled(false);
        t_cierre_cotizar.setMinimumSize(new java.awt.Dimension(250, 19));
        t_cierre_cotizar.setName(""); // NOI18N
        t_cierre_cotizar.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_cierre_cotizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 170, 163, -1));

        jLabel21.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel21.setText("4.- Cotizar:");
        jLabel21.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel21.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel21.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 132, 70, -1));

        cb_autoriza_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_autoriza_clienteActionPerformed(evt);
            }
        });
        add(cb_autoriza_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 190, -1, -1));

        t_inicio_autoriza_cliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_autoriza_cliente.setEnabled(false);
        t_inicio_autoriza_cliente.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_autoriza_cliente.setName(""); // NOI18N
        t_inicio_autoriza_cliente.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_autoriza_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 163, -1));

        l_autorizo_cliente.setText("<Usuario que asigno operación>");
        l_autorizo_cliente.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_cliente.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_cliente.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 190, 200, -1));

        jLabel26.setText("Cierre _______________________________________________________________________");
        jLabel26.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel26.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel26.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, 550, -1));

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setText("6.- Autorizacion Interna:");
        jLabel27.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel27.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel27.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 214, 160, -1));

        cb_autoriza_interna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_autoriza_internaActionPerformed(evt);
            }
        });
        add(cb_autoriza_interna, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 210, -1, -1));

        jLabel28.setText("____________________________________________________________");
        jLabel28.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel28.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel28.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 214, 430, -1));

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("7.- Valuación:");
        jLabel16.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel16.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel16.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 234, 160, -1));

        t_valuacion.setBackground(new java.awt.Color(204, 255, 255));
        t_valuacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_valuacion.setEnabled(false);
        add(t_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 232, 62, -1));

        b_buscar_valuacion.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar_valuacion.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_buscar_valuacion.setToolTipText("Consultar empleados");
        b_buscar_valuacion.setMaximumSize(new java.awt.Dimension(32, 8));
        b_buscar_valuacion.setMinimumSize(new java.awt.Dimension(32, 8));
        b_buscar_valuacion.setPreferredSize(new java.awt.Dimension(32, 8));
        b_buscar_valuacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscar_valuacionActionPerformed(evt);
            }
        });
        add(b_buscar_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 230, 28, 24));

        b_borrar_valuacion.setBackground(new java.awt.Color(2, 135, 242));
        b_borrar_valuacion.setIcon(new ImageIcon("imagenes/eliminar.png"));
        b_borrar_valuacion.setToolTipText("Eliminar asignación");
        b_borrar_valuacion.setMaximumSize(new java.awt.Dimension(32, 8));
        b_borrar_valuacion.setMinimumSize(new java.awt.Dimension(32, 8));
        b_borrar_valuacion.setPreferredSize(new java.awt.Dimension(32, 8));
        b_borrar_valuacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_borrar_valuacionActionPerformed(evt);
            }
        });
        add(b_borrar_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 230, 28, 24));

        l_valuacion.setText("<Nombre del Responsable>");
        add(l_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 234, 310, -1));

        l_autorizo_valuacion.setText("<Usuario que asigno operación>");
        l_autorizo_valuacion.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_valuacion.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_valuacion.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 230, 200, -1));

        t_inicio_valuacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_valuacion.setEnabled(false);
        t_inicio_valuacion.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_valuacion.setName(""); // NOI18N
        t_inicio_valuacion.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 230, 163, -1));

        jLabel30.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel30.setText("8.- Envio a Compañia:");
        jLabel30.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel30.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel30.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 256, 160, -1));

        cb_envio_compania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_envio_companiaActionPerformed(evt);
            }
        });
        add(cb_envio_compania, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 250, -1, -1));

        jLabel31.setText("____________________________________________________________");
        jLabel31.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel31.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel31.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 256, 430, -1));

        t_inicio_envio_compania.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_envio_compania.setEnabled(false);
        t_inicio_envio_compania.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_envio_compania.setName(""); // NOI18N
        t_inicio_envio_compania.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_envio_compania, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 250, 163, -1));

        l_autorizo_envio_compania.setText("<Usuario que asigno operación>");
        l_autorizo_envio_compania.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_envio_compania.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_envio_compania.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_envio_compania, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 250, 200, -1));

        jLabel33.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel33.setText("9.- Autoriza a Compañia:");
        jLabel33.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel33.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel33.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 274, 160, -1));

        cb_autoriza_compania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_autoriza_companiaActionPerformed(evt);
            }
        });
        add(cb_autoriza_compania, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 270, -1, -1));

        jLabel35.setText("____________________________________________________________");
        jLabel35.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel35.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel35.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 274, 430, -1));

        t_inicio_autoriza_compania.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_autoriza_compania.setEnabled(false);
        t_inicio_autoriza_compania.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_autoriza_compania.setName(""); // NOI18N
        t_inicio_autoriza_compania.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_autoriza_compania, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 270, 163, -1));

        l_autorizo_autoriza_compania.setText("<Usuario que asigno operación>");
        l_autorizo_autoriza_compania.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_autoriza_compania.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_autoriza_compania.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_autoriza_compania, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 270, 200, -1));

        jLabel36.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel36.setText("10.- Autoriza Valuación:");
        jLabel36.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel36.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel36.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 294, 160, -1));

        cb_autoriza_reparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_autoriza_reparacionActionPerformed(evt);
            }
        });
        add(cb_autoriza_reparacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 372, -1, -1));

        jLabel37.setText("____________________________________________________________");
        jLabel37.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel37.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel37.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 294, 430, -1));

        t_cierre_valuacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cierre_valuacion.setEnabled(false);
        t_cierre_valuacion.setMinimumSize(new java.awt.Dimension(250, 19));
        t_cierre_valuacion.setName(""); // NOI18N
        t_cierre_valuacion.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_cierre_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 290, 163, -1));

        l_autorizo_cierre_valuacion.setText("<Usuario que asigno operación>");
        l_autorizo_cierre_valuacion.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_cierre_valuacion.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_cierre_valuacion.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_cierre_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 290, 200, -1));

        jLabel23.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel23.setText("11.- Refacciones:");
        jLabel23.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel23.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel23.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 314, 160, -1));

        t_refacciones.setBackground(new java.awt.Color(204, 255, 255));
        t_refacciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_refacciones.setEnabled(false);
        add(t_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 312, 62, -1));

        b_buscar_refacciones.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar_refacciones.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_buscar_refacciones.setToolTipText("Consultar empleados");
        b_buscar_refacciones.setMaximumSize(new java.awt.Dimension(32, 8));
        b_buscar_refacciones.setMinimumSize(new java.awt.Dimension(32, 8));
        b_buscar_refacciones.setPreferredSize(new java.awt.Dimension(32, 8));
        b_buscar_refacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscar_refaccionesActionPerformed(evt);
            }
        });
        add(b_buscar_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 310, 28, 24));

        b_borrar_refacciones.setBackground(new java.awt.Color(2, 135, 242));
        b_borrar_refacciones.setIcon(new ImageIcon("imagenes/eliminar.png"));
        b_borrar_refacciones.setToolTipText("Eliminar asignación");
        b_borrar_refacciones.setMaximumSize(new java.awt.Dimension(32, 8));
        b_borrar_refacciones.setMinimumSize(new java.awt.Dimension(32, 8));
        b_borrar_refacciones.setPreferredSize(new java.awt.Dimension(32, 8));
        b_borrar_refacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_borrar_refaccionesActionPerformed(evt);
            }
        });
        add(b_borrar_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 310, 28, 24));

        l_refacciones.setText("<Nombre del Responsable>");
        add(l_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 314, 310, -1));

        t_inicio_refacciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_refacciones.setEnabled(false);
        t_inicio_refacciones.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_refacciones.setName(""); // NOI18N
        t_inicio_refacciones.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, 163, -1));

        l_autorizo_refacciones.setText("<Usuario que asigno operación>");
        l_autorizo_refacciones.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_refacciones.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_refacciones.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 310, 200, -1));

        jLabel38.setText("Inicio_________________________________________________________________________");
        jLabel38.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel38.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel38.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 335, 550, -1));

        jLabel39.setText("Cierre________________________________________________________________________");
        jLabel39.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel39.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel39.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 355, 550, -1));

        t_cierre_refacciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cierre_refacciones.setEnabled(false);
        t_cierre_refacciones.setMinimumSize(new java.awt.Dimension(250, 19));
        t_cierre_refacciones.setName(""); // NOI18N
        t_cierre_refacciones.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_cierre_refacciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 350, 163, -1));

        jLabel40.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel40.setText("12.- Autoriza Reparación:");
        jLabel40.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel40.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel40.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 377, 140, -1));

        jLabel41.setText("Inicio_________________________________________________________________________");
        jLabel41.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel41.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel41.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 395, 550, -1));

        t_inicio_reparacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_reparacion.setEnabled(false);
        t_inicio_reparacion.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_reparacion.setName(""); // NOI18N
        t_inicio_reparacion.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_reparacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 390, 163, -1));

        l_autorizo_reparacion.setText("<Usuario que asigno operación>");
        l_autorizo_reparacion.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_reparacion.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_reparacion.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_reparacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 370, 200, -1));

        jLabel42.setText("Cierre ________________________________________________________________________");
        jLabel42.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel42.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel42.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 416, 550, -1));

        t_cierre_reparacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cierre_reparacion.setEnabled(false);
        t_cierre_reparacion.setMinimumSize(new java.awt.Dimension(250, 19));
        t_cierre_reparacion.setName(""); // NOI18N
        t_cierre_reparacion.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_cierre_reparacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 410, 163, -1));

        cb_autoriza_valuacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_autoriza_valuacionActionPerformed(evt);
            }
        });
        add(cb_autoriza_valuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 290, -1, -1));

        cb_entrega_unidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_entrega_unidadActionPerformed(evt);
            }
        });
        add(cb_entrega_unidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 430, -1, -1));

        jLabel43.setText("No:");
        jLabel43.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel43.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel43.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 476, 30, -1));

        jLabel44.setText("_______________________________________________________________");
        jLabel44.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel44.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel44.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 476, 450, -1));

        jLabel45.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel45.setText("13.- Entrega de la Unidad:");
        jLabel45.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel45.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel45.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 436, 160, -1));

        jLabel46.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel46.setText("14.- Facturación:");
        jLabel46.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel46.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel46.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 140, -1));

        t_inicio_factura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_factura.setEnabled(false);
        t_inicio_factura.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_factura.setName(""); // NOI18N
        t_inicio_factura.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_factura, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 470, 163, -1));

        l_inicio_factura.setText("<Usuario que asigno operación>");
        l_inicio_factura.setMaximumSize(new java.awt.Dimension(300, 15));
        l_inicio_factura.setMinimumSize(new java.awt.Dimension(300, 15));
        l_inicio_factura.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_inicio_factura, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 470, 200, -1));

        jLabel47.setText("____________________________________________________________");
        jLabel47.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel47.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel47.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 436, 430, -1));

        t_factura.setBackground(new java.awt.Color(204, 255, 255));
        t_factura.setToolTipText("Agregar numero de factura");
        t_factura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_factura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_facturaActionPerformed(evt);
            }
        });
        t_factura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_facturaKeyTyped(evt);
            }
        });
        add(t_factura, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 474, 67, -1));

        t_inicio_entrega_unidad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_inicio_entrega_unidad.setEnabled(false);
        t_inicio_entrega_unidad.setMinimumSize(new java.awt.Dimension(250, 19));
        t_inicio_entrega_unidad.setName(""); // NOI18N
        t_inicio_entrega_unidad.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_inicio_entrega_unidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 430, 163, -1));

        l_autorizo_entregar.setText("<Usuario que asigno operación>");
        l_autorizo_entregar.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizo_entregar.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizo_entregar.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizo_entregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 430, 200, -1));

        l_autorizar_interna.setText("<Usuario que asigno operación>");
        l_autorizar_interna.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizar_interna.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizar_interna.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizar_interna, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 210, 200, -1));

        t_autorizar_interna.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_autorizar_interna.setEnabled(false);
        t_autorizar_interna.setMinimumSize(new java.awt.Dimension(250, 19));
        t_autorizar_interna.setName(""); // NOI18N
        t_autorizar_interna.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_autorizar_interna, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, 163, -1));

        jLabel48.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel48.setText("13.- Cierre de orden:");
        jLabel48.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel48.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel48.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 496, 140, -1));

        cb_cierre_unidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_cierre_unidadActionPerformed(evt);
            }
        });
        add(cb_cierre_unidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 492, -1, -1));

        jLabel49.setText("____________________________________________________________");
        jLabel49.setMaximumSize(new java.awt.Dimension(210, 15));
        jLabel49.setMinimumSize(new java.awt.Dimension(210, 15));
        jLabel49.setPreferredSize(new java.awt.Dimension(210, 15));
        add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 496, 430, -1));

        t_cierre_unidad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_cierre_unidad.setEnabled(false);
        t_cierre_unidad.setMinimumSize(new java.awt.Dimension(250, 19));
        t_cierre_unidad.setName(""); // NOI18N
        t_cierre_unidad.setPreferredSize(new java.awt.Dimension(250, 19));
        add(t_cierre_unidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 490, 163, -1));

        l_autorizar_cierre.setText("<Usuario que asigno operación>");
        l_autorizar_cierre.setMaximumSize(new java.awt.Dimension(300, 15));
        l_autorizar_cierre.setMinimumSize(new java.awt.Dimension(300, 15));
        l_autorizar_cierre.setPreferredSize(new java.awt.Dimension(300, 15));
        add(l_autorizar_cierre, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 490, 200, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void t_expedienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_expedienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_expedienteActionPerformed

    private void b_meta_valuacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_meta_valuacionActionPerformed
        // TODO add your handling code here:       
        calendario cal =new calendario(new javax.swing.JFrame(), true);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        cal.setLocation((d.width/2)-(cal.getWidth()/2), (d.height/2)-(cal.getHeight()/2));
        cal.setVisible(true);

        Calendar miCalendario=cal.getReturnStatus();
        if(miCalendario!=null)
        {
            String dia=Integer.toString(miCalendario.get(Calendar.DATE));;
            String mes = Integer.toString(miCalendario.get(Calendar.MONTH)+1);
            String anio = Integer.toString(miCalendario.get(Calendar.YEAR));
            String valor=dia+"-"+mes+"-"+anio+" 00:00:00";
            boolean resp=guardaEmpleado(null, "meta_valuacion", valor);//empleadoByRExpediente
            if(resp=true)
                t_meta_valuacion.setText(dia+"-"+mes+"-"+anio);
            else
            {
                t_meta_valuacion.setText("DD/MM/AAAA");
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            }
        }
        else
        t_meta_valuacion.setText("DD/MM/AAAA");
    }//GEN-LAST:event_b_meta_valuacionActionPerformed

    private void b_meta_refaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_meta_refaccionesActionPerformed
        // TODO add your handling code here:
        calendario cal =new calendario(new javax.swing.JFrame(), true);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        cal.setLocation((d.width/2)-(cal.getWidth()/2), (d.height/2)-(cal.getHeight()/2));
        cal.setVisible(true);

        Calendar miCalendario=cal.getReturnStatus();
        if(miCalendario!=null)
        {
            String dia=Integer.toString(miCalendario.get(Calendar.DATE));;
            String mes = Integer.toString(miCalendario.get(Calendar.MONTH)+1);
            String anio = Integer.toString(miCalendario.get(Calendar.YEAR));
            String valor=dia+"-"+mes+"-"+anio+" 00:00:00";
            boolean resp=guardaEmpleado(null, "meta_refacciones", valor);//empleadoByRExpediente
            if(resp=true)
                t_meta_refacciones.setText(dia+"-"+mes+"-"+anio);
            else
            {
                t_meta_refacciones.setText("DD/MM/AAAA");
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            }
        }
        else
        t_meta_refacciones.setText("DD/MM/AAAA");
    }//GEN-LAST:event_b_meta_refaccionesActionPerformed

    private void b_meta_reparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_meta_reparacionActionPerformed
        // TODO add your handling code here:
        calendario cal =new calendario(new javax.swing.JFrame(), true);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        cal.setLocation((d.width/2)-(cal.getWidth()/2), (d.height/2)-(cal.getHeight()/2));
        cal.setVisible(true);
        Calendar miCalendario=cal.getReturnStatus();
        if(miCalendario!=null)
        {
            String dia=Integer.toString(miCalendario.get(Calendar.DATE));;
            String mes = Integer.toString(miCalendario.get(Calendar.MONTH)+1);
            String anio = Integer.toString(miCalendario.get(Calendar.YEAR));
            String valor=dia+"-"+mes+"-"+anio+" 00:00:00";
            boolean resp=guardaEmpleado(null, "meta_reparacion", valor);//empleadoByRExpediente
            if(resp=true)
                t_meta_reparacion.setText(dia+"-"+mes+"-"+anio);
            else
            {
                t_meta_reparacion.setText("DD/MM/AAAA");
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            }
            
        }
        else
        t_meta_reparacion.setText("DD/MM/AAAA");
    }//GEN-LAST:event_b_meta_reparacionActionPerformed

    private void t_facturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_facturaKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_factura.getText().length()>=7) 
            evt.consume();
        if((car<'0' || car>'9')) 
            evt.consume();
    }//GEN-LAST:event_t_facturaKeyTyped

    private void b_buscar_expedienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscar_expedienteActionPerformed
        buscaEmpleado obj = new buscaEmpleado(new javax.swing.JFrame(), true, usr, this.sessionPrograma);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        Empleado actor=obj.getReturnStatus();
        if(actor!=null)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=guardaEmpleado(actor, "expediente", valor);//empleadoByRExpediente
            if(resp=false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            else
                enviaCorreo("Asignación de expediente orden ("+orden+")", "Hola buen dia, "+actor.getNombre()+" se te comunica que te fue asignado el expediente de la orden en mención", actor.getEmail());
        }
    }//GEN-LAST:event_b_buscar_expedienteActionPerformed

    private void b_buscar_levantamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscar_levantamentoActionPerformed
        // TODO add your handling code here:
        buscaEmpleado obj = new buscaEmpleado(new javax.swing.JFrame(), true, usr, sessionPrograma);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        Empleado actor=obj.getReturnStatus();
        if(actor!=null)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            
            boolean resp=guardaEmpleado(actor, "levantamiento", valor);//empleadoByRExpediente
            if(resp=false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            else
                enviaCorreo("Asignación de levantamiento orden ("+orden+")", "Hola buen dia, "+actor.getNombre()+" se te comunica que te fue asignado el levantamiento de la orden en mención", actor.getEmail());
        }
    }//GEN-LAST:event_b_buscar_levantamentoActionPerformed

    private void b_buscar_cotizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscar_cotizarActionPerformed
        // TODO add your handling code here:
        buscaEmpleado obj = new buscaEmpleado(new javax.swing.JFrame(), true, usr, sessionPrograma);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);        
        Empleado actor=obj.getReturnStatus();
        if(actor!=null)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=guardaEmpleado(actor, "cotizar", valor);//empleadoByRExpediente
            if(resp=false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            else
                enviaCorreo("Asignación de cotización orden ("+orden+")", "Hola buen dia, "+actor.getNombre()+" se te comunica que te fue asignada la cotización de la orden en mención", actor.getEmail());
        }
    }//GEN-LAST:event_b_buscar_cotizarActionPerformed

    private void b_buscar_valuacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscar_valuacionActionPerformed
        // TODO add your handling code here:
        buscaEmpleado obj = new buscaEmpleado(new javax.swing.JFrame(), true, usr, sessionPrograma);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        
        Empleado actor=obj.getReturnStatus();
        if(actor!=null)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            
            boolean resp=guardaEmpleado(actor, "valuacion", valor);//empleadoByRExpediente
            if(resp=false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            else
                enviaCorreo("Asignación de Valuación orden ("+orden+")", "Hola buen dia, "+actor.getNombre()+" se te comunica que te fue asignada la valuación de la orden en mención", actor.getEmail());
        }
    }//GEN-LAST:event_b_buscar_valuacionActionPerformed

    private void b_buscar_refaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscar_refaccionesActionPerformed
        // TODO add your handling code here:
        buscaEmpleado obj = new buscaEmpleado(new javax.swing.JFrame(), true, usr, sessionPrograma);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        
        Empleado actor=obj.getReturnStatus();
        if(actor!=null)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=guardaEmpleado(actor, "refacciones", valor);//empleadoByRExpediente
            if(resp=false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
            else
                enviaCorreo("Asignación de refacciones orden ("+orden+")", "Hola buen dia, "+actor.getNombre()+" se te comunica que te fue asignado el surtimiento de refacciones de la orden en mención", actor.getEmail());
        }
    }//GEN-LAST:event_b_buscar_refaccionesActionPerformed

    private void b_borrar_expedienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_borrar_expedienteActionPerformed
        // TODO add your handling code here:
        if(t_expediente.getText().compareTo("")!=0)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=quitaEmpleado("expediente", valor);
            if(resp==false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
        }
    }//GEN-LAST:event_b_borrar_expedienteActionPerformed

    private void b_borrar_levantamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_borrar_levantamentoActionPerformed
        // TODO add your handling code here:
        if(t_levantamiento.getText().compareTo("")!=0)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);

            boolean resp=quitaEmpleado("levantamiento", valor);
            if(resp==false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
        }
    }//GEN-LAST:event_b_borrar_levantamentoActionPerformed

    private void b_borrar_valuacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_borrar_valuacionActionPerformed
        // TODO add your handling code here:
        if(t_valuacion.getText().compareTo("")!=0)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=quitaEmpleado("valuacion", valor);
            if(resp==false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
        }
    }//GEN-LAST:event_b_borrar_valuacionActionPerformed

    private void b_borrar_refaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_borrar_refaccionesActionPerformed
        // TODO add your handling code here:
        if(t_refacciones.getText().compareTo("")!=0)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=quitaEmpleado("refacciones", valor);
            if(resp==false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
        }
    }//GEN-LAST:event_b_borrar_refaccionesActionPerformed

    private void b_borrar_cotizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_borrar_cotizarActionPerformed
        // TODO add your handling code here:
        if(t_cotizar.getText().compareTo("")!=0)
        {
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            boolean resp=quitaEmpleado("cotizar", valor);
            if(resp==false)
                JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
        }
    }//GEN-LAST:event_b_borrar_cotizarActionPerformed

    private void cb_autoriza_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_autoriza_clienteActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_autoriza_cliente.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "autoriza_cliente", valor);
        else
            resp=quitaEmpleado("autoriza_cliente", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_autoriza_clienteActionPerformed

    private void cb_autoriza_internaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_autoriza_internaActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_autoriza_interna.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "autoriza_interna", valor);
        else
            resp=quitaEmpleado("autoriza_interna", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_autoriza_internaActionPerformed

    private void cb_envio_companiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_envio_companiaActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_envio_compania.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "envio_compania", valor);
        else
            resp=quitaEmpleado("envio_compania", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_envio_companiaActionPerformed

    private void cb_autoriza_companiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_autoriza_companiaActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_autoriza_compania.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "autoriza_compania", valor);
        else
            resp=quitaEmpleado("autoriza_compania", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_autoriza_companiaActionPerformed

    private void cb_autoriza_valuacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_autoriza_valuacionActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_autoriza_valuacion.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "autoriza_valuacion", valor);
        else
            resp=quitaEmpleado("autoriza_valuacion", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_autoriza_valuacionActionPerformed

    private void cb_autoriza_reparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_autoriza_reparacionActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_autoriza_reparacion.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "autoriza_reparacion", valor);
        else
            resp=quitaEmpleado("autoriza_reparacion", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_autoriza_reparacionActionPerformed

    private void cb_entrega_unidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_entrega_unidadActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_entrega_unidad.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "entrega_unidad", valor);
        else
            resp=quitaEmpleado("entrega_unidad", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_entrega_unidadActionPerformed

    private void cb_cierre_unidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_cierre_unidadActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(cb_cierre_unidad.isSelected())
            resp=guardaEmpleado(usr.getEmpleado(), "cierra_orden", valor);
        else
            resp=quitaEmpleado("cierra_orden", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_cb_cierre_unidadActionPerformed

    private void t_facturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_facturaActionPerformed
        // TODO add your handling code here:
        Date fecha = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
        String valor=dateFormat.format(fecha);
        boolean resp=false;
        if(t_factura.getText().compareTo("")!=0)
            resp=guardaEmpleado(usr.getEmpleado(), "factura", valor);
        else
            resp=quitaEmpleado("factura", valor);
        if(resp==false)
            JOptionPane.showMessageDialog(null, "¡Error al actualizar el campo!");
    }//GEN-LAST:event_t_facturaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_borrar_cotizar;
    private javax.swing.JButton b_borrar_expediente;
    private javax.swing.JButton b_borrar_levantamento;
    private javax.swing.JButton b_borrar_refacciones;
    private javax.swing.JButton b_borrar_valuacion;
    private javax.swing.JButton b_buscar_cotizar;
    private javax.swing.JButton b_buscar_expediente;
    private javax.swing.JButton b_buscar_levantamento;
    private javax.swing.JButton b_buscar_refacciones;
    private javax.swing.JButton b_buscar_valuacion;
    private javax.swing.JButton b_meta_refacciones;
    private javax.swing.JButton b_meta_reparacion;
    private javax.swing.JButton b_meta_valuacion;
    private javax.swing.JCheckBox cb_autoriza_cliente;
    private javax.swing.JCheckBox cb_autoriza_compania;
    private javax.swing.JCheckBox cb_autoriza_interna;
    private javax.swing.JCheckBox cb_autoriza_reparacion;
    private javax.swing.JCheckBox cb_autoriza_valuacion;
    private javax.swing.JCheckBox cb_cierre_unidad;
    private javax.swing.JCheckBox cb_entrega_unidad;
    private javax.swing.JCheckBox cb_envio_compania;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JLabel l_apertura;
    private javax.swing.JLabel l_autorizar_cierre;
    private javax.swing.JLabel l_autorizar_interna;
    private javax.swing.JLabel l_autorizo_apertura;
    private javax.swing.JLabel l_autorizo_autoriza_compania;
    private javax.swing.JLabel l_autorizo_cierre_valuacion;
    private javax.swing.JLabel l_autorizo_cliente;
    private javax.swing.JLabel l_autorizo_cotizar;
    private javax.swing.JLabel l_autorizo_entregar;
    private javax.swing.JLabel l_autorizo_envio_compania;
    private javax.swing.JLabel l_autorizo_expediente;
    private javax.swing.JLabel l_autorizo_levantamiento;
    private javax.swing.JLabel l_autorizo_refacciones;
    private javax.swing.JLabel l_autorizo_reparacion;
    private javax.swing.JLabel l_autorizo_valuacion;
    private javax.swing.JLabel l_cotizar;
    private javax.swing.JLabel l_expediente;
    private javax.swing.JLabel l_inicio_factura;
    private javax.swing.JLabel l_levantamiento;
    private javax.swing.JLabel l_refacciones;
    private javax.swing.JLabel l_valuacion;
    private javax.swing.JPanel p_caja;
    private javax.swing.JPanel p_metas;
    private javax.swing.JPanel p_tracto;
    private javax.swing.JTextField t_apertura;
    private javax.swing.JTextField t_autorizar_interna;
    private javax.swing.JTextField t_cierre_cotizar;
    private javax.swing.JTextField t_cierre_levantamiento;
    private javax.swing.JTextField t_cierre_refacciones;
    private javax.swing.JTextField t_cierre_reparacion;
    private javax.swing.JTextField t_cierre_unidad;
    private javax.swing.JTextField t_cierre_valuacion;
    private javax.swing.JTextField t_cotizar;
    private javax.swing.JTextField t_expediente;
    private javax.swing.JTextField t_factura;
    private javax.swing.JTextField t_inicio_apertura;
    private javax.swing.JTextField t_inicio_autoriza_cliente;
    private javax.swing.JTextField t_inicio_autoriza_compania;
    private javax.swing.JTextField t_inicio_cotizar;
    private javax.swing.JTextField t_inicio_entrega_unidad;
    private javax.swing.JTextField t_inicio_envio_compania;
    private javax.swing.JTextField t_inicio_expediente;
    private javax.swing.JTextField t_inicio_factura;
    private javax.swing.JTextField t_inicio_levantamiento;
    private javax.swing.JTextField t_inicio_refacciones;
    private javax.swing.JTextField t_inicio_reparacion;
    private javax.swing.JTextField t_inicio_valuacion;
    private javax.swing.JTextField t_levantamiento;
    private javax.swing.JTextField t_meta_refacciones;
    private javax.swing.JTextField t_meta_reparacion;
    private javax.swing.JTextField t_meta_valuacion;
    private javax.swing.JTextField t_refacciones;
    private javax.swing.JTextField t_valuacion;
    // End of variables declaration//GEN-END:variables

    private void permisos(boolean expediente, boolean levantamiento, boolean cotizar, boolean autorizacion_cliente, boolean autoriza_interna, boolean valuacion, boolean envio_compania, boolean autoriza_compania, boolean autoriza_valuacion, boolean refacciones, boolean autoriza_reparacion, boolean entrega_unidad, boolean facturar, boolean cierre, boolean meta_raparacion, boolean meta_refacciones, boolean meta_valuacion)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            Orden objeto = (Orden)session.get(Orden.class, Integer.parseInt(orden));
            this.usr = (Usuario)session.get(Usuario.class, this.usr.getIdUsuario());

            //*******validamos los permisos
            if(usr.getAltaSeguimiento()==false)
            {
                expediente=false;
                levantamiento=false;
                cotizar=false;
                autorizacion_cliente=false;
                autoriza_interna=false;
                valuacion=false;
                envio_compania=false;
                autoriza_compania=false;
                autoriza_valuacion=false;
                refacciones=false;
                autoriza_reparacion=false;
                entrega_unidad=false;
                facturar=false;
                meta_raparacion=false;
                meta_refacciones=false;
                meta_valuacion=false;
            }
            if(usr.getEditaCierre()==false)
                cierre=false;
            else
                cierre=true;
            //*****************************

            if(objeto.getFechaCierre()!=null)
            {
                expediente = false;
                levantamiento = false;
                cotizar = false;
                autorizacion_cliente = false;
                autoriza_interna = false;
                valuacion = false;
                envio_compania = false;
                autoriza_compania = false;
                autoriza_valuacion = false;
                refacciones = false;
                autoriza_reparacion = false;
                entrega_unidad = false;
                facturar = false;
                meta_raparacion = false;
                meta_refacciones = false;
                meta_valuacion = false;
            }
            if(objeto.getFecha()==null)
            {
                expediente=false;
                levantamiento=false;
                autorizacion_cliente=false;
                entrega_unidad=false;
                cierre=false;
            }
            this.b_buscar_expediente.setEnabled(expediente);   
            this.b_borrar_expediente.setEnabled(expediente);

            this.b_buscar_levantamento.setEnabled(levantamiento);      
            this.b_borrar_levantamento.setEnabled(levantamiento);      

            this.b_buscar_cotizar.setEnabled(cotizar);
            this.b_borrar_cotizar.setEnabled(cotizar);

            this.cb_autoriza_cliente.setEnabled(autorizacion_cliente);

            this.cb_autoriza_interna.setEnabled(autoriza_interna);

            this.b_buscar_valuacion.setEnabled(valuacion);
            this.b_borrar_valuacion.setEnabled(valuacion);

            this.cb_envio_compania.setEnabled(envio_compania);

            this.cb_autoriza_compania.setEnabled(autoriza_compania);

            this.cb_autoriza_valuacion.setEnabled(autoriza_valuacion);

            this.b_buscar_refacciones.setEnabled(refacciones);
            this.b_borrar_refacciones.setEnabled(refacciones);

            this.cb_autoriza_reparacion.setEnabled(autoriza_reparacion);

            this.cb_entrega_unidad.setEnabled(entrega_unidad);

            this.t_factura.setEnabled(false);

            this.cb_cierre_unidad.setEnabled(cierre);

            if(usr.getAltaMetas())
            {
                this.b_meta_refacciones.setEnabled(meta_refacciones);
                this.b_meta_reparacion.setEnabled(meta_raparacion);
                this.b_meta_valuacion.setEnabled(meta_valuacion);
            }
            else
            {
                this.b_meta_refacciones.setEnabled(false);
                this.b_meta_reparacion.setEnabled(false);
                this.b_meta_valuacion.setEnabled(false);
            }
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }
    
    private void buscaApertura()
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            Query q = session.createQuery("from Orden ord where ord.idOrden=" + orden);
            List resultList = q.list();
            if(resultList.size()>0)
            {
                for (Object o : resultList) 
                {
                    Orden actor = (Orden) o;
                    //****Apertura**************************************************
                    t_apertura.setText(""+actor.getUsuarioByIdUserApertura().getEmpleado().getIdEmpleado());
                    l_apertura.setText(actor.getUsuarioByIdUserApertura().getEmpleado().getNombre());

                    Date fecha = actor.getFecha();
                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD HH:MM:SS
                    String valor=dateFormat.format(fecha);

                    Date hora =actor.getHora();
                    dateFormat = new SimpleDateFormat("HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor+=" "+dateFormat.format(hora);
                    t_inicio_apertura.setText(valor);                
                    l_autorizo_apertura.setText(actor.getUsuarioByIdUserApertura().getIdUsuario());
                    //**************************************************************

                    //*****Expediente*********************************************** 
                    try{
                    t_expediente.setText(""+actor.getEmpleadoByRExpediente().getIdEmpleado());
                    }catch(Exception E){}
                    try{
                    l_expediente.setText(actor.getEmpleadoByRExpediente().getNombre());
                    }catch(Exception E){}
                    try{
                    fecha = actor.getRExpedienteFecha();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_expediente.setText(valor);                
                    }catch(Exception E){}
                    try{
                    l_autorizo_expediente.setText(actor.getUsuarioByRExpedienteAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //*********Levantamiento****************************************
                    try{
                    t_levantamiento.setText(""+actor.getEmpleadoByRLevantamiento().getIdEmpleado());
                    }catch(Exception E){}
                    try{
                    l_levantamiento.setText(actor.getEmpleadoByRLevantamiento().getNombre());
                    }catch(Exception E){}
                    try{//inico del levantamiento
                    fecha = actor.getRLevantamientoInicio();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_levantamiento.setText(valor);                
                    }catch(Exception E){}
                    try{//cierre del levantamiento
                    fecha = actor.getRLevantamientoCierre();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_cierre_levantamiento.setText(valor);                
                    }catch(Exception E){}
                    try{
                    l_autorizo_levantamiento.setText(actor.getUsuarioByRLevantamientoAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //***********Cotizar********************************************
                    try{
                    t_cotizar.setText(""+actor.getEmpleadoByRCotiza().getIdEmpleado());
                    }catch(Exception E){}
                    try{
                    l_cotizar.setText(actor.getEmpleadoByRCotiza().getNombre());
                    }catch(Exception E){}
                    try{//inicio de cotizar
                    fecha = actor.getRCotizaInicio();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_cotizar.setText(valor);                
                    }catch(Exception E){}
                    try{//cierre de cotizar
                    fecha = actor.getRCotizaCierre();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_cierre_cotizar.setText(valor);                
                    }catch(Exception E){}
                    try{
                    l_autorizo_cotizar.setText(actor.getUsuarioByRCotizaAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //******Autorizacion cliente************************************
                    try{
                    fecha = actor.getAutorizaCliente();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_autoriza_cliente.setText(valor);
                    cb_autoriza_cliente.setSelected(true);
                    }catch(Exception E){}
                    try{
                    l_autorizo_cliente.setText(actor.getUsuarioByAutorizaClienteAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //******Autorizacion interna************************************
                    try{//inicio de cotizar
                    fecha = actor.getRAutorizacionInterna();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_autorizar_interna.setText(valor);
                    cb_autoriza_interna.setSelected(true);
                    }catch(Exception E){}
                    try{
                    l_autorizar_interna.setText(actor.getUsuarioByRAutorizacionInternaAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //****Usuario Valuacion*****************************************
                    try{
                    t_valuacion.setText(""+actor.getEmpleadoByRValuacion().getIdEmpleado());
                    }catch(Exception E){}
                    try{
                    l_valuacion.setText(actor.getEmpleadoByRValuacion().getNombre());
                    }catch(Exception E){}
                    try{
                    fecha = actor.getRValuacionInicio();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_valuacion.setText(valor);                
                    }catch(Exception E){}
                    try{
                    l_autorizo_valuacion.setText(actor.getUsuarioByRValuacionAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //******Envio a la compañia************************************
                    try{
                    fecha = actor.getEnvioCompania();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_envio_compania.setText(valor);
                    cb_envio_compania.setSelected(true);
                    }catch(Exception E){}
                    try{
                    l_autorizo_envio_compania.setText(actor.getUsuarioByEnvioCompaniaAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //******Autoriza la compañia************************************
                    try{
                    fecha = actor.getAutorizaCompania();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_autoriza_compania.setText(valor);
                    cb_autoriza_compania.setSelected(true);
                    }catch(Exception E){}
                    try{
                    l_autorizo_autoriza_compania.setText(actor.getUsuarioByAutorizaCompaniaAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //******Autoriza la Valuacion************************************
                    try{
                    fecha = actor.getRValuacionCierre();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_cierre_valuacion.setText(valor);
                    cb_autoriza_valuacion.setSelected(true);
                    }catch(Exception E){}
                    try{
                    l_autorizo_cierre_valuacion.setText(actor.getUsuarioByRValuacionCierreAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //****Usuario Refacciones***************************************
                    try{
                    t_refacciones.setText(""+actor.getEmpleadoByRRefacciones().getIdEmpleado());
                    }catch(Exception E){}
                    try{
                    l_refacciones.setText(actor.getEmpleadoByRRefacciones().getNombre());
                    }catch(Exception E){}
                    try{//inicio de refacciones
                    fecha = actor.getInicioRefacciones();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_refacciones.setText(valor);                
                    }catch(Exception E){}
                    try{//cierre de refacciones
                    fecha = actor.getCierreRefacciones();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_cierre_refacciones.setText(valor);                
                    }catch(Exception E){}
                    try{
                    l_autorizo_refacciones.setText(actor.getUsuarioByRRefaccionesAsigno().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //********Autoriza Reparacion***********************************
                    try{//Inicio Reparacion
                    fecha = actor.getRReparacionInicio();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_reparacion.setText(valor);                
                    cb_autoriza_reparacion.setSelected(true);
                    }catch(Exception E){}
                    try{
                        l_autorizo_reparacion.setText(actor.getUsuarioByRReparacionInicioAsigno().getIdUsuario());
                    }catch(Exception E){}
                    try{//Cierre Reparacion
                    fecha = actor.getRReparacionCierre();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_cierre_reparacion.setText(valor);
                    }catch(Exception E){}
                    //**************************************************************

                    //**********Entrega unidad********************************
                    try{
                    fecha = actor.getREntregarFecha();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_entrega_unidad.setText(valor);
                    cb_entrega_unidad.setSelected(true);
                    }catch(Exception E){}
                    try{
                        l_autorizo_entregar.setText(actor.getUsuarioByREntregarAsigno().getIdUsuario());
                    }catch(Exception e){}
                    //**************************************************************

                    //****Usuario Facturar******************************************
                    try{
                    if(actor.getNoFactura()!=null)
                    {
                        t_factura.setText(""+actor.getNoFactura());
                    }
                    }catch(Exception E){}
                    try{
                    fecha = actor.getFehaFectura();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_inicio_factura.setText(valor);
                    }catch(Exception E){}
                    try{
                        t_factura.setText(""+Integer.parseInt(actor.getNoFactura().toString()));
                    }catch(Exception e){}
                    try{
                        l_inicio_factura.setText(actor.getUsuarioByRFactura().getIdUsuario());
                    }catch(Exception e){}
                    //**************************************************************

                    //**********Cierre unidad********************************
                    try{
                    fecha = actor.getFechaCierre();
                    dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                    valor=dateFormat.format(fecha);
                    t_cierre_unidad.setText(valor);
                    cb_cierre_unidad.setSelected(true);
                    }catch(Exception E){}
                    try{
                    l_autorizar_cierre.setText(actor.getUsuarioByRCierre().getIdUsuario());
                    }catch(Exception E){}
                    //**************************************************************

                    //***********metas**********************************************
                    try//meta valuacion
                    {
                        fecha=actor.getMetaValuacion();
                        dateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD HH:MM:SS
                        System.out.println(dateFormat.format(fecha));
                        this.t_meta_valuacion.setText(dateFormat.format(fecha));
                    }catch(Exception e)
                    {
                        this.t_meta_valuacion.setText("DD/MM/AAAA");
                    }

                    try//meta refacciones
                    {
                        fecha=actor.getMetaRefacciones();
                        dateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD HH:MM:SS
                        System.out.println(dateFormat.format(fecha));
                        this.t_meta_refacciones.setText(dateFormat.format(fecha));
                    }catch(Exception e)
                    {
                        this.t_meta_refacciones.setText("DD/MM/AAAA");
                    }

                    try//reparacion
                    {
                        fecha=actor.getMetaReparacion();
                        dateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD HH:MM:SS
                        System.out.println(dateFormat.format(fecha));
                        this.t_meta_reparacion.setText(dateFormat.format(fecha));
                    }catch(Exception e)
                    {
                        this.t_meta_reparacion.setText("DD/MM/AAAA");
                    }
                    //**************************************************************
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                }
            }
            else
            {
                //JOptionPane.showMessageDialog(null, "¡La orden '"+orden+"' no existe!");
                permisos(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            }
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }
    
    private boolean guardaEmpleado(Empleado obj, String campo, String valor)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try 
        {
            session.beginTransaction().begin();
            Orden objeto = (Orden)session.get(Orden.class, Integer.parseInt(orden));
            String [] fecha ;
            String [] hora ;
            String [] aux ;
            int op=0;
            Calendar calendario3;
            switch(campo)
            {
                case "expediente":
                    //dd-MM-yyyy HH:mm:mm
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    objeto.setEmpleadoByRExpediente(obj);
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));

                    objeto.setRExpedienteFecha(calendario3.getTime());
                    objeto.setUsuarioByRExpedienteAsigno(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_expediente.setText(""+obj.getIdEmpleado());
                    l_expediente.setText(obj.getNombre());
                    t_inicio_expediente.setText(valor);
                    l_autorizo_expediente.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;

                case "levantamiento":
                    //dd-MM-yyyy HH:mm:mm
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    objeto.setEmpleadoByRLevantamiento(obj);
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));

                    if(objeto.getRLevantamientoInicio()==null)
                    {
                        objeto.setRLevantamientoInicio(calendario3.getTime());
                        op=1;
                    }
                    //objeto.setRLevantamientoCierre(null);
                    objeto.setUsuarioByRLevantamientoAsigno(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_levantamiento.setText(""+obj.getIdEmpleado());
                    l_levantamiento.setText(obj.getNombre());
                    if(op==1)
                        t_inicio_levantamiento.setText(valor);
                    l_autorizo_levantamiento.setText(usr.getIdUsuario());
                    //t_cierre_levantamiento.setText("");
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;

                case "cotizar":
                    //dd-MM-yyyy HH:mm:mm
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    objeto.setEmpleadoByRCotiza(obj);
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));

                    if(objeto.getRCotizaInicio()==null)
                    {
                        objeto.setRCotizaInicio(calendario3.getTime());
                        op=1;
                    }
                    objeto.setUsuarioByRCotizaAsigno(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_cotizar.setText(""+obj.getIdEmpleado());
                    l_cotizar.setText(obj.getNombre());
                    if(op==1)
                        t_inicio_cotizar.setText(valor);
                    l_autorizo_cotizar.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                                
               case "autoriza_cliente":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setAutorizaCliente(calendario3.getTime());
                    objeto.setUsuarioByAutorizaClienteAsigno(usr);
                    session.getTransaction().commit();
                    cb_autoriza_cliente.setSelected(true);
                    t_inicio_autoriza_cliente.setText(valor);
                    l_autorizo_cliente.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                   
              case "autoriza_interna":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setRAutorizacionInterna(calendario3.getTime());
                    objeto.setUsuarioByRAutorizacionInternaAsigno(usr);
                    session.getTransaction().commit();
                    cb_autoriza_interna.setSelected(true);
                    t_autorizar_interna.setText(valor);
                    l_autorizar_interna.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                                      
                case "valuacion":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    objeto.setEmpleadoByRValuacion(obj);
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));

                    if(objeto.getRValuacionInicio()==null)
                    {
                        objeto.setRValuacionInicio(calendario3.getTime());
                        op=1;
                    }
                    objeto.setUsuarioByRValuacionAsigno(usr);
                    objeto.setRValuacionCierre(null);
                    objeto.setUsuarioByRValuacionCierreAsigno(usr);
                    
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_valuacion.setText(""+obj.getIdEmpleado());
                    l_valuacion.setText(obj.getNombre());
                    if(op==1)
                        t_inicio_valuacion.setText(valor);
                    l_autorizo_valuacion.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                   
               case "envio_compania":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setEnvioCompania(calendario3.getTime());
                    objeto.setUsuarioByEnvioCompaniaAsigno(usr);
                    session.getTransaction().commit();
                    cb_envio_compania.setSelected(true);
                    t_inicio_envio_compania.setText(valor);
                    l_autorizo_envio_compania.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                   
               case "autoriza_compania":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setAutorizaCompania(calendario3.getTime());
                    objeto.setUsuarioByAutorizaCompaniaAsigno(usr);
                    session.getTransaction().commit();
                    cb_autoriza_compania.setSelected(true);
                    t_inicio_autoriza_compania.setText(valor);
                    l_autorizo_autoriza_compania.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                       
                case "autoriza_valuacion":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setRValuacionCierre(calendario3.getTime());
                    objeto.setUsuarioByRValuacionCierreAsigno(usr);
                    session.getTransaction().commit();
                    cb_autoriza_valuacion.setSelected(true);
                    t_cierre_valuacion.setText(valor);
                    l_autorizo_cierre_valuacion.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                    
                case "refacciones":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];
                    objeto.setEmpleadoByRRefacciones(obj);
                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    if(objeto.getInicioRefacciones()==null)
                    {
                        objeto.setInicioRefacciones(calendario3.getTime());
                        op=1;
                    }
                    objeto.setCierreRefacciones(null);
                    objeto.setUsuarioByRRefaccionesAsigno(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_refacciones.setText(""+obj.getIdEmpleado());
                    l_refacciones.setText(obj.getNombre());
                    if(op==1)
                        t_inicio_refacciones.setText(valor);
                    l_autorizo_refacciones.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                    
                case "autoriza_reparacion":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setRReparacionInicio(calendario3.getTime());
                    objeto.setUsuarioByRReparacionInicioAsigno(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    cb_autoriza_reparacion.setSelected(true);
                    t_inicio_reparacion.setText(valor);
                    l_autorizo_reparacion.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                    
                case "entrega_unidad":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setREntregarFecha(calendario3.getTime());
                    session.update(objeto);
                    session.getTransaction().commit();
                    cb_entrega_unidad.setSelected(true);
                    t_inicio_entrega_unidad.setText(valor);
                    l_autorizo_entregar.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;

                case "cierra_orden":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setFechaCierre(calendario3.getTime());
                    objeto.setUsuarioByRCierre(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    cb_cierre_unidad.setSelected(true);
                    t_cierre_unidad.setText(valor);
                    l_autorizar_cierre.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                    
                case "factura":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setFehaFectura(calendario3.getTime());
                    objeto.setUsuarioByRFactura(usr);
                    objeto.setNoFactura(Integer.parseInt(t_factura.getText()));
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_inicio_factura.setText(valor);
                    l_inicio_factura.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
                    
                case "meta_valuacion":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setMetaValuacion(calendario3.getTime());
                    session.update(objeto);
                    session.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;

                case "meta_refacciones":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setMetaRefacciones(calendario3.getTime());
                    session.update(objeto);
                    session.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;

                case "meta_reparacion":
                    fecha = valor.split("-");
                    hora=fecha[2].split(":");
                    aux=hora[0].split(" ");
                    fecha[2]=aux[0];
                    hora[0]=aux[1];

                    calendario3 = Calendar.getInstance();
                    calendario3.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                    objeto.setMetaReparacion(calendario3.getTime());
                    session.update(objeto);
                    session.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
            }
            return false;
        } 
        catch (HibernateException he) 
        {
            he.printStackTrace();
            session.getTransaction().rollback();
            permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            return false;
        }
        finally
        {
        if(session!=null)
            if(session.isOpen())
                session.close();
        }
    }
    
    private boolean quitaEmpleado(String campo, String valor)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try 
        {
            session.beginTransaction().begin();
            Orden objeto = (Orden)session.get(Orden.class, Integer.parseInt(orden));
            String [] fecha ;
            String [] hora ;
            String [] aux ;
            Calendar calendario3;
            switch(campo)
            {
                case "expediente":
                    objeto.setEmpleadoByRExpediente(null);
                    objeto.setRExpedienteFecha(null);
                    objeto.setUsuarioByRExpedienteAsigno(usr);
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_expediente.setText("");
                    l_expediente.setText("<Nombre del Responsable>");
                    t_inicio_expediente.setText("");
                    l_autorizo_expediente.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    return true;
                    
               case "levantamiento":
                    if(objeto.getRCotizaInicio()==null)
                    {
                        objeto.setEmpleadoByRLevantamiento(null);
                        objeto.setRLevantamientoInicio(null);
                        objeto.setRLevantamientoCierre(null);
                        objeto.setUsuarioByRLevantamientoAsigno(usr);
                        session.update(objeto);
                        session.getTransaction().commit();
                        t_levantamiento.setText("");
                        l_levantamiento.setText("<Nombre del Responsable>");
                        t_inicio_levantamiento.setText("");
                        t_cierre_levantamiento.setText("");
                        l_autorizo_levantamiento.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                        return true;
                    }
                    else
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                    return true;

               case "cotizar":
                   if(objeto.getAutorizaCliente()==null)
                   {
                        objeto.setEmpleadoByRCotiza(null);
                        objeto.setRCotizaInicio(null);
                        objeto.setRCotizaCierre(null);
                        objeto.setUsuarioByRCotizaAsigno(usr);
                        session.update(objeto);
                        session.getTransaction().commit();
                        t_cotizar.setText("");
                        l_cotizar.setText("<Nombre del Responsable>");
                        t_inicio_cotizar.setText("");
                        t_cierre_cotizar.setText("");
                        l_autorizo_cotizar.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                   }
                   else
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   return true;

               case "autoriza_cliente":
                   if(objeto.getRAutorizacionInterna()==null)
                   {
                        objeto.setAutorizaCliente(null);
                        objeto.setUsuarioByAutorizaClienteAsigno(usr);
                        session.getTransaction().commit();
                        t_inicio_autoriza_cliente.setText("");
                        l_autorizo_cliente.setText(usr.getIdUsuario());
                        cb_autoriza_cliente.setSelected(false);
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                    }
                   else
                   {
                       this.cb_autoriza_cliente.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                   return true;
                   
               case "autoriza_interna":
                   if(objeto.getRValuacionInicio()==null)
                   {
                        objeto.setRAutorizacionInterna(null);
                        objeto.setUsuarioByRAutorizacionInternaAsigno(usr);
                        session.getTransaction().commit();
                        cb_autoriza_interna.setSelected(false);
                        t_autorizar_interna.setText("");
                        l_autorizar_interna.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                   }
                   else
                   {
                       this.cb_autoriza_interna.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                   return true;
                   
               case "valuacion":
                   if(objeto.getEnvioCompania()==null)
                   {
                        objeto.setEmpleadoByRValuacion(null);
                        objeto.setRValuacionInicio(null);
                        objeto.setUsuarioByRValuacionAsigno(usr);
                        objeto.setRValuacionCierre(null);
                        objeto.setUsuarioByRValuacionCierreAsigno(usr);
                        session.update(objeto);
                        session.getTransaction().commit();
                        t_valuacion.setText("");
                        l_valuacion.setText("<Nombre del Responsable>");
                        t_inicio_valuacion.setText("");
                        l_autorizo_valuacion.setText(usr.getIdUsuario());
                        t_cierre_valuacion.setText("");
                        l_autorizo_cierre_valuacion.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                    }
                   else
                   {
                       this.cb_autoriza_interna.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;
                   
               case "envio_compania":
                   if(objeto.getAutorizaCompania()==null)
                   {
                        objeto.setEnvioCompania(null);
                        objeto.setUsuarioByEnvioCompaniaAsigno(usr);
                        session.getTransaction().commit();
                        cb_envio_compania.setSelected(false);
                        t_inicio_envio_compania.setText("");
                        l_autorizo_envio_compania.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                    }
                   else
                   {
                       this.cb_envio_compania.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;
                   
               case "autoriza_compania":
                   if(objeto.getRValuacionCierre()==null)
                   {
                        objeto.setAutorizaCompania(null);
                        objeto.setUsuarioByAutorizaCompaniaAsigno(usr);
                        session.getTransaction().commit();
                        cb_autoriza_compania.setSelected(false);
                        t_inicio_autoriza_compania.setText(null);
                        l_autorizo_autoriza_compania.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                   }
                   else
                   {
                       this.cb_autoriza_compania.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;
                   
               case "autoriza_valuacion":
                   if(objeto.getInicioRefacciones()==null)
                   { 
                        objeto.setRValuacionCierre(null);
                        objeto.setUsuarioByRValuacionCierreAsigno(usr);
                        session.getTransaction().commit();
                        cb_autoriza_valuacion.setSelected(false);
                        t_cierre_valuacion.setText("");
                        l_autorizo_cierre_valuacion.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                    }
                   else
                   {
                       this.cb_autoriza_valuacion.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;
                   
               case "refacciones":
                   if(objeto.getRReparacionInicio()==null)
                   {
                        objeto.setEmpleadoByRRefacciones(null);
                        objeto.setInicioRefacciones(null);
                        objeto.setCierreRefacciones(null);
                        objeto.setUsuarioByRRefaccionesAsigno(usr);
                        session.update(objeto);
                        session.getTransaction().commit();
                        t_refacciones.setText("");
                        l_refacciones.setText("<Nombre del Responsable>");
                        t_inicio_refacciones.setText("");
                        t_cierre_refacciones.setText("");
                        l_autorizo_refacciones.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                   }
                   else
                   {
                       this.cb_autoriza_valuacion.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;
                   
               case "autoriza_reparacion":
                   if(objeto.getREntregarFecha()==null)
                   { 
                        objeto.setRReparacionInicio(null);
                        objeto.setUsuarioByRReparacionInicioAsigno(usr);
                        session.getTransaction().commit();
                        this.cb_autoriza_reparacion.setSelected(false);
                        t_inicio_reparacion.setText("");
                        l_autorizo_reparacion.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                    }
                   else
                   {
                       this.cb_autoriza_reparacion.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;
               case "entrega_unidad":
                   if(objeto.getFehaFectura()==null)
                   { 
                        objeto.setREntregarFecha(null);
                        objeto.setUsuarioByREntregarAsigno(usr);
                        session.getTransaction().commit();
                        this.cb_entrega_unidad.setSelected(false);
                        t_inicio_entrega_unidad.setText("");
                        l_autorizo_entregar.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                    }
                   else
                   {
                       this.cb_entrega_unidad.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡No se puede eliminar ya que el procedimiento siguente ya esta abierto!");
                   }
                    return true;                   
                   
              case "cierra_orden":
                        objeto.setFechaCierre(null);
                        objeto.setUsuarioByRCierre(usr);
                        session.getTransaction().commit();
                        this.cb_cierre_unidad.setSelected(false);
                        t_cierre_unidad.setText("");
                        l_autorizar_cierre.setText(usr.getIdUsuario());
                        permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                        JOptionPane.showMessageDialog(null, "¡La asignación fue eliminada!");
                        return true;       
                  
             case "factura":
                    //dd-MM-yyyy HH:mm:mm
                    objeto.setFehaFectura(null);
                    objeto.setUsuarioByRFactura(usr);
                    objeto.setNoFactura(null);
                    session.update(objeto);
                    session.getTransaction().commit();
                    t_inicio_factura.setText("");
                    l_inicio_factura.setText(usr.getIdUsuario());
                    permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
                    JOptionPane.showMessageDialog(null, "¡Asignación actualizada!");
                    return true;
            }
            return false;
        } 
        catch (HibernateException he) 
        {
            System.out.println(he);//he.printStackTrace();
            session.getTransaction().rollback();
            switch(campo)
            {
                case "autoriza_cliente":
                    cb_autoriza_cliente.setSelected(true);
                    break;
            }
            permisos(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            return false;
        }
        finally
        {
        if(session!=null)
            if(session.isOpen())
                session.close();
        }
        
    }
    
    public void enviaCorreo(String asunto, String mensaje, String from)
    {
        String smtp="";
        boolean ttl=false;
        String puerto="";
        String envia="";
        String clave="";
        String cc="";
        String texto = null;
        
        try
        {
            FileReader f = new FileReader("correo.ml");
            BufferedReader b = new BufferedReader(f);
            int renglon=0;
            while((texto = b.readLine())!=null)
            {
                switch(renglon)
                {
                    case 1://smtp
                        smtp=texto.trim();
                        break;
                    case 2://ttl
                        if(texto.compareToIgnoreCase("true")==0)
                            ttl=true;
                        else
                            ttl=false;
                        break;
                    case 3://puerto
                        puerto=texto.trim();
                        break;
                    case 4://cuenta
                        envia=texto.trim();
                        break;
                    case 5://contraseña
                        clave=texto.trim();
                        break;
                }
                renglon+=1;
            }
            b.close();
        }catch(Exception e){e.printStackTrace();}
        
        try
        {
            // se obtiene el objeto Session.
            Properties props = new Properties();
            props.put("mail.smtp.host", smtp);
            props.setProperty("mail.smtp.starttls.enable", ""+ttl);
            props.setProperty("mail.smtp.port", puerto);
            props.setProperty("mail.smtp.user", envia);
            props.setProperty("mail.smtp.auth", "true");

            javax.mail.Session session = javax.mail.Session.getDefaultInstance(props, null);
            // session.setDebug(true);

            // Se compone la parte del texto
            BodyPart texto_mensaje = new MimeBodyPart();
            texto_mensaje.setText(mensaje);

            // Una MultiParte para agrupar texto e imagen.
            MimeMultipart multiParte = new MimeMultipart();
            multiParte.addBodyPart(texto_mensaje);

            // Se compone el correo, dando to, from, subject y el contenido.
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(envia));

            String [] direcciones=from.split(";");
            for(int x=0; x<direcciones.length; x++)
            {
                if(direcciones[x].compareTo("")!=0)
                    message.addRecipient(Message.RecipientType.TO, new InternetAddress(direcciones[x].replace(" ","")));
            }

            String [] dirCC=cc.split(";");
            for(int y=0; y<dirCC.length; y++)
            {
                if(dirCC[y].compareTo("")!=0)
                    message.addRecipient(Message.RecipientType.CC, new InternetAddress(dirCC[y].replace(" ","")));
            }

            message.setSubject(asunto);
            message.setContent(multiParte);

            Transport t = session.getTransport("smtp");
            t.connect(envia, clave);
            t.sendMessage(message, message.getAllRecipients());
            t.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
