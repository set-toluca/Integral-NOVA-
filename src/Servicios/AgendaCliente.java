/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Servicios;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Agenda;
import Hibernate.entidades.Orden;
import Hibernate.entidades.Usuario;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.classic.Session;
import Integral.Herramientas;
import Integral.Render1;
import Integral.calendario;

/**
 *
 * @author I.S.C Salvador
 */
public class AgendaCliente extends javax.swing.JPanel {
    String sessionPrograma="";
    Herramientas h;
    Usuario usr;
    String ord="";
    Orden orden_act=null;
    DefaultTableModel model;
    String[] columnas = new String [] {"ID","FECHA","HORA", "ASUNTO"};
    String estado="";

    /**
     * Creates new form Agenda
     */
    public AgendaCliente(String ord1, String ses, Usuario u, String edo) {
        usr=u;
        sessionPrograma=ses;
        ord=ord1;
        estado=edo;
        initComponents();
        if(usr.getEditaAgenda()==false)
        {
            estado="sin permiso";
	}
        formatoTabla();
        buscaMensajes();
        if(estado.compareTo("")==0)
            visualiza(true);
        else
            visualiza(false);
        
        h=new Herramientas(usr, 0);
        if(h.isCerrada(ord)==true)
        {
            visualiza(false);
            t_datos.setEnabled(false);
            b_mas.setEnabled(false);
            b_menos.setEnabled(false);
            b_fecha_siniestro.setEnabled(false);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        c_hora = new javax.swing.JComboBox();
        t_asunto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        b_mas = new javax.swing.JButton();
        b_menos = new javax.swing.JButton();
        b_fecha_siniestro = new javax.swing.JButton();

        c_hora.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        c_hora.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00" }));

        t_asunto.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        t_asunto.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        t_asunto.setAlignmentX(0.0F);
        t_asunto.setAlignmentY(0.0F);
        t_asunto.setBorder(null);
        t_asunto.setMinimumSize(new java.awt.Dimension(3, 14));
        t_asunto.setPreferredSize(new java.awt.Dimension(3, 14));
        t_asunto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_asuntoKeyTyped(evt);
            }
        });

        setBackground(new java.awt.Color(255, 255, 255));

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Fecha", "Hra", "Asunto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(t_datos);

        b_mas.setBackground(new java.awt.Color(2, 135, 242));
        b_mas.setIcon(new ImageIcon("imagenes/boton_mas.png"));
        b_mas.setToolTipText("Agrega una cuenta bancaria");
        b_mas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_masActionPerformed(evt);
            }
        });

        b_menos.setBackground(new java.awt.Color(2, 135, 242));
        b_menos.setIcon(new ImageIcon("imagenes/boton_menos.png"));
        b_menos.setToolTipText("Eliminar la cuenta bancaria seleccionada");
        b_menos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menosActionPerformed(evt);
            }
        });

        b_fecha_siniestro.setBackground(new java.awt.Color(2, 135, 242));
        b_fecha_siniestro.setIcon(new ImageIcon("imagenes/calendario.png"));
        b_fecha_siniestro.setToolTipText("Calendario");
        b_fecha_siniestro.setMaximumSize(new java.awt.Dimension(32, 8));
        b_fecha_siniestro.setMinimumSize(new java.awt.Dimension(32, 8));
        b_fecha_siniestro.setPreferredSize(new java.awt.Dimension(32, 8));
        b_fecha_siniestro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_fecha_siniestroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(b_mas, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b_menos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(b_fecha_siniestro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_mas, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_menos, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_fecha_siniestro, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_masActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_masActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            orden_act = (Orden)session.get(Orden.class, Integer.parseInt(ord)); 
            Calendar calendario3 = Calendar.getInstance();
            
            Agenda ac=new Agenda(orden_act, calendario3.getTime(), null, null);
            orden_act.addAgenda(ac);
            session.saveOrUpdate(orden_act);
            session.getTransaction().commit();
        }
        catch (Exception ioe)
        {
            session.getTransaction().rollback();
            ioe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(null, "Error no se pudo agregar el evento");
        }
        if(session!=null)
            if(session.isOpen()==true)
                session.close();
        buscaMensajes();
    }//GEN-LAST:event_b_masActionPerformed

    private void b_menosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menosActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);

        if(t_datos.getRowCount()>0)
        {
            if(t_datos.getSelectedRow()>=0)
            {
                Session session = HibernateUtil.getSessionFactory().openSession();
                try
                {
                    session.beginTransaction().begin();
                    orden_act=(Orden)session.get(Orden.class, Integer.parseInt(ord));
                    Agenda [] doc = (Agenda[]) orden_act.getAgendas().toArray(new Agenda[0]);
                    int op=0;
                    for(int x=0; x<doc.length; x++)
                    {
                        if(Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString())==doc[x].getIdAgenda())
                        {
                            orden_act.eliminaAgenda(doc[x]);
                            session.update(orden_act);
                            session.delete(doc[x]);
                            DefaultTableModel temp = (DefaultTableModel) t_datos.getModel();
                            temp.removeRow(t_datos.getSelectedRow());
                            x=doc.length;
                            session.getTransaction().commit();
                            op=1;
                        }
                    }
                    if(op==0)
                    if(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString().compareTo("")==0)
                    {
                        DefaultTableModel temp = (DefaultTableModel) t_datos.getModel();
                        temp.removeRow(t_datos.getSelectedRow());
                    }
                    buscaMensajes();
                }
                catch(Exception e)
                {
                    System.out.println(e);
                    session.getTransaction().rollback();
                    JOptionPane.showMessageDialog(null, "¡No se pudo eliminar el evento seleccionado!");
                }
                if(session!=null)
                    if(session.isOpen()==true)
                        session.close();
            }
            else
            JOptionPane.showMessageDialog(null, "¡No hay un evento seleccionado!");
            buscaMensajes();
        }
    }//GEN-LAST:event_b_menosActionPerformed

    private void b_fecha_siniestroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_fecha_siniestroActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        if(t_datos.getSelectedRow()>-1)
        {
            calendario cal =new calendario(new javax.swing.JFrame(), true);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            cal.setLocation((d.width/2)-(cal.getWidth()/2), (d.height/2)-(cal.getHeight()/2));
            cal.setVisible(true);

            Calendar miCalendario=cal.getReturnStatus();
            if(miCalendario!=null)
            {
                String dia=Integer.toString(miCalendario.get(Calendar.DATE));;
                String mes = Integer.toString(miCalendario.get(Calendar.MONTH)+1);
                String anio = Integer.toString(miCalendario.get(Calendar.YEAR));
                t_datos.setValueAt(dia+"-"+mes+"-"+anio, t_datos.getSelectedRow(), 1);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "¡Debe selecciona un registo de la tabla!");
        }
    }//GEN-LAST:event_b_fecha_siniestroActionPerformed

    private void t_asuntoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_asuntoKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_asunto.getText().length()>=150)
        evt.consume();
    }//GEN-LAST:event_t_asuntoKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_fecha_siniestro;
    private javax.swing.JButton b_mas;
    private javax.swing.JButton b_menos;
    private javax.swing.JComboBox c_hora;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField t_asunto;
    private javax.swing.JTable t_datos;
    // End of variables declaration//GEN-END:variables
  public void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(30);
                      break;
                  case 1:
                      column.setPreferredWidth(90);
                      break;
                  case 2:
                      column.setPreferredWidth(70);
                      column.setCellEditor(new DefaultCellEditor(c_hora));
                      break;
                  case 3:
                      column.setPreferredWidth(670);
                      column.setCellEditor(new DefaultCellEditor(t_asunto));
                      break;
                  default:
                      column.setPreferredWidth(10);
                      break;
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }  

  public void buscaMensajes()
  {
      Session session = HibernateUtil.getSessionFactory().openSession();
      try
      {
          session.beginTransaction().begin();
          orden_act = (Orden)session.get(Orden.class, Integer.parseInt(ord));

          Agenda[] eventos = (Agenda[]) orden_act.getAgendas().toArray(new Agenda[0]);
          System.out.println(eventos.length);
          for(int k=0;k<eventos.length;k++) 
          {
              for(int f=0;f<(eventos.length-1)-k;f++) 
              {
                  if ( eventos[f].getFecha().after(eventos[f+1].getFecha()) ) 
                  {
                      Agenda aux=eventos[f];
                      eventos[f]=eventos[f+1];
                      eventos[f+1]=aux;
                  }
                  else
                  if ( eventos[f].getFecha().equals(eventos[f+1].getFecha()) && eventos[f].getIdAgenda()>eventos[f+1].getIdAgenda()) 
                  {
                      Agenda aux=eventos[f];
                      eventos[f]=eventos[f+1];
                      eventos[f+1]=aux;
                  }    
              }
          }
          if(eventos.length>0)
          {
              t_datos.setModel(ModeloTablaReporte(eventos.length, columnas));
              for(int i=0; i<eventos.length; i++)
              {
                  model.setValueAt(eventos[i].getIdAgenda(), i, 0);
                  if(eventos[i].getFecha()!=null)
                      model.setValueAt(eventos[i].getFecha(), i, 1);
                  else
                    model.setValueAt("", i, 1);
                  if(eventos[i].getHora()!=null)
                      model.setValueAt(eventos[i].getHora(), i, 2);
                  else
                      model.setValueAt("", i, 2);
                  if(eventos[i].getAsunto()!=null)
                      model.setValueAt(eventos[i].getAsunto(), i, 3);
                  else
                      model.setValueAt("", i, 3);
              }
          }
          else
              t_datos.setModel(ModeloTablaReporte(0, columnas));    
          session.beginTransaction().rollback();
      }catch(Exception e)
      {
          System.out.println(e);
      }
      if(session!=null)
            if(session.isOpen()==true)
                session.close();
      formatoTabla();
  }
  
  
    DefaultTableModel ModeloTablaReporte(int renglones, String columnas[])
    {
            model = new DefaultTableModel(new Object [renglones][3], columnas)
            {
                Class[] types = new Class [] {
                    java.lang.String.class, 
                    java.lang.String.class, 
                    java.lang.String.class, 
                    java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, true, true
                };

                public void setValueAt(Object value, int row, int col)
                 {                     
                        Vector vector = (Vector)this.dataVector.elementAt(row);
                        Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                        Object resp=null;
                        switch(col)
                        {
                            case 1:
                                    if(vector.get(col)==null)
                                    {
                                        value=value.toString().toUpperCase();
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                    {
                                        Session session = HibernateUtil.getSessionFactory().openSession();
                                        try
                                        {
                                            session.beginTransaction().begin();
                                            Agenda evento = (Agenda)session.get(Agenda.class, Integer.parseInt(t_datos.getValueAt(row, 0).toString()));
                                            if(evento!=null)
                                            {
                                                String [] campos = value.toString().split("-");
                                                Calendar calendario = Calendar.getInstance();
                                                calendario.set(Calendar.MONTH, Integer.parseInt(campos[1])-1);
                                                calendario.set(Calendar.YEAR, Integer.parseInt(campos[2]));
                                                calendario.set(Calendar.DAY_OF_MONTH, Integer.parseInt(campos[0]));
                                                evento.setFecha(calendario.getTime());
                                                session.update(evento);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                if(session.isOpen()==true)
                                                    session.close();
                                                buscaMensajes();
                                            }
                                            else
                                            {
                                                buscaMensajes();
                                                JOptionPane.showMessageDialog(null, "El evento ya no existe");
                                            } 
                                        }
                                        catch(Exception e)
                                        {
                                            session.getTransaction().rollback();
                                            System.out.println(e);
                                        }
                                        if(session!=null)
                                            if(session.isOpen()==true)
                                                session.close();
                                    }
                                    break;

                            case 2:
                                    if(vector.get(col)==null)
                                    {
                                        value=value.toString().toUpperCase();
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                    {
                                        Session session = HibernateUtil.getSessionFactory().openSession();
                                        try
                                        {
                                            session.beginTransaction().begin();
                                            Agenda evento = (Agenda)session.get(Agenda.class, Integer.parseInt(t_datos.getValueAt(row, 0).toString()));
                                            if(evento!=null)
                                            {
                                                String [] campos = value.toString().split(":");
                                                Calendar calendario = Calendar.getInstance();
                                                calendario.set(Calendar.HOUR_OF_DAY, Integer.parseInt(campos[0]));
                                                calendario.set(Calendar.MINUTE, Integer.parseInt(campos[1]));
                                                calendario.set(Calendar.SECOND, 0);
                                                evento.setHora(calendario.getTime());
                                                session.update(evento);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                if(session.isOpen()==true)
                                                    session.close();
                                                buscaMensajes();
                                            }
                                            else
                                            {
                                                buscaMensajes();
                                                JOptionPane.showMessageDialog(null, "El evento ya no existe");
                                            } 
                                        }
                                        catch(Exception e)
                                        {
                                            session.getTransaction().rollback();
                                            System.out.println(e);
                                        }
                                        if(session!=null)
                                            if(session.isOpen()==true)
                                                session.close();
                                    }
                                    break;
                                
                            case 3:
                                    if(vector.get(col)==null)
                                    {
                                        value=value.toString().toUpperCase();
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                    {
                                        Session session = HibernateUtil.getSessionFactory().openSession();
                                        value=value.toString().toUpperCase();
                                        try
                                        {
                                            session.beginTransaction().begin();
                                            Agenda evento = (Agenda)session.get(Agenda.class, Integer.parseInt(t_datos.getValueAt(row, 0).toString()));
                                            if(evento!=null)
                                            {
                                                evento.setAsunto(value.toString());
                                                session.update(evento);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                if(session.isOpen()==true)
                                                    session.close();
                                                buscaMensajes();
                                            }
                                            else
                                            {
                                                buscaMensajes();
                                                JOptionPane.showMessageDialog(null, "El evento ya no existe");
                                            } 
                                        }
                                        catch(Exception e)
                                        {
                                            session.getTransaction().rollback();
                                            System.out.println(e);
                                        }
                                        if(session!=null)
                                            if(session.isOpen()==true)
                                                session.close();
                                    }
                                    break;
                                
                            default:
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                        }
                    }
                
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            };
            return model;
    }

    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242);   
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
        {
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        } 
        tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
    }
    
    public void visualiza(Boolean valor)
    {
        this.b_fecha_siniestro.setEnabled(valor);
        this.b_mas.setEnabled(valor);
        this.b_menos.setEnabled(valor);
        this.t_datos.setEnabled(valor);
    }
}
