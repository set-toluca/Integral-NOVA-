/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Servicios;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Foto;
import Hibernate.entidades.Orden;
import Hibernate.entidades.Usuario;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import Integral.ExtensionFileFilter;
import Integral.Herramientas;
import Integral.Imagen;
import java.io.BufferedReader;
import java.io.FileReader;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;


/**
 *
 * @author I.S.C Salvador
 */
public final class Galeria extends javax.swing.JPanel {

    /**
     * Creates new form Galeria
     */
    private final Usuario usr;
    private String orden="";
    DefaultTableModel model;
    String[] columnas = new String [] {"ID", "NOMBRE"};
    Orden ord;
    String sessionPrograma="";
    Herramientas h;
    String edo="";
    String ruta;
    JFileChooser selector;
    
    public Galeria(String id, Usuario usuario, String estado, String ses) {
        sessionPrograma=ses;
        usr=usuario;
        orden=id;
        edo=estado;
        initComponents();
        
        ruta="";
        try
        {
            FileReader f = new FileReader("config.txt");
            BufferedReader b = new BufferedReader(f);
            if((ruta = b.readLine())==null)
                ruta="";
            b.close();
        }catch(Exception e){e.printStackTrace();}
                    
        if(usr.getEditaGaleria()==false)
        {
            edo="sin permiso";
	}
        
        cargaFotos();
        if(edo.compareTo("")==0)
            visualiza(true);
        else
            visualiza(false);
        
        h=new Herramientas(usr, 0);
        if(h.isCerrada(orden)==true)
            visualiza(false);
        selector=new JFileChooser();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelGrande = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        p_cinta = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        PanelGrande.setBackground(new java.awt.Color(255, 255, 255));
        PanelGrande.setBorder(javax.swing.BorderFactory.createTitledBorder("Tama√±o Original"));

        javax.swing.GroupLayout PanelGrandeLayout = new javax.swing.GroupLayout(PanelGrande);
        PanelGrande.setLayout(PanelGrandeLayout);
        PanelGrandeLayout.setHorizontalGroup(
            PanelGrandeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        PanelGrandeLayout.setVerticalGroup(
            PanelGrandeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setBackground(new java.awt.Color(2, 135, 242));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new ImageIcon("imagenes/guardar-documento.png"));
        jButton2.setText("Agregar");
        jButton2.setToolTipText("Agregar Imagen JPG");
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(90, 66, 126), 1, true));

        p_cinta.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(p_cinta);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Doble click en la miniatura para visualizar el archivo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 559, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        
        selector.setFileFilter(new ExtensionFileFilter("JPG and JPEG", new String[] { "JPG", "JPEG" }));
        selector.setSelectedFile(null);
        selector.setMultiSelectionEnabled(true);
        int estado=1;
        File destino=null;
        estado=selector.showOpenDialog(null);
        if(estado==0)
        {
            File[] archivo=null;
            archivo=selector.getSelectedFiles();
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                for(int x=0; x<archivo.length; x++)
                {
                    session.beginTransaction().begin();
                    if(archivo[x].exists())
                    {
                        File folder = new File(ruta+"ordenes/"+orden);
                        folder.mkdirs();
                        folder = new File(ruta+"ordenes/"+orden+"/miniatura");
                        folder.mkdirs();
                        Random rng=new Random();
                        long  dig8 = rng.nextInt(90000000)+10000000;
                        destino = new File(ruta+"ordenes/"+orden+"/"+dig8+".jpg");
                        File miniatura = new File(ruta+"ordenes/"+orden+"/miniatura/"+dig8+".jpg");

                        String ruta=archivo[x].getPath();
                        javax.swing.JPanel p=new Imagen(ruta, 385, 250, 0, 0, 385, 250);
                        BufferedImage dibujo =new BufferedImage(385, 250, BufferedImage.TYPE_INT_RGB);
                        Graphics g = dibujo.getGraphics();
                        p.paint(g);
                        ImageIO.write((RenderedImage)dibujo, "jpg", miniatura); // Salvar la imagen en el fichero

                        BufferedImage dibujoGrande =ImageIO.read(archivo[x]);
                        ImageIO.write((RenderedImage)dibujoGrande, "jpg", destino); // Salvar la imagen en el fichero*/

                        ord = (Orden)session.get(Orden.class, Integer.parseInt(orden)); 

                        //*******obtenemos fecha con hora******
                        Date fecha_orden = new Date();
                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                        String valor=dateFormat.format(fecha_orden);
                        String [] fecha = valor.split("-");
                        String [] hora=fecha[2].split(":");
                        String [] aux=hora[0].split(" ");
                        fecha[2]=aux[0];
                        hora[0]=aux[1];
                        Calendar calendario = Calendar.getInstance();
                        calendario.set(
                            Integer.parseInt(fecha[2]), 
                            Integer.parseInt(fecha[1])-1, 
                            Integer.parseInt(fecha[0]), 
                            Integer.parseInt(hora[0]), 
                            Integer.parseInt(hora[1]), 
                            Integer.parseInt(hora[2]));
                        System.out.println(calendario.getTime());
                        Foto img=new Foto(ord, dig8+".jpg", calendario.getTime());
                        //******************************************

                        ord.addFoto(img);
                        session.saveOrUpdate(ord);
                        session.getTransaction().commit();
                    }
                    else
                    {
                        session.getTransaction().rollback();
                        destino.deleteOnExit();
                        //javax.swing.JOptionPane.showMessageDialog(null, "no se pudo cargar la imagen");
                    }
                }
            }catch (Exception ioe)
            {
                session.getTransaction().rollback();
                destino.deleteOnExit();
                ioe.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(null, "Error no se pudo cargar alguna imagen");
            }
            if(session != null)
                if(session.isOpen())
                    session.close(); 
            cargaFotos();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelGrande;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel p_cinta;
    // End of variables declaration//GEN-END:variables


    public void cargaFotos()
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            ord=(Orden)session.get(Orden.class, Integer.parseInt(orden));
            p_cinta.removeAll();
            Foto[] fotos = (Foto[]) session.createCriteria(Foto.class).add(Restrictions.eq("orden.idOrden", ord.getIdOrden())).addOrder(Order.asc("fecha")).list().toArray(new Foto[0]);
            for (Foto foto : fotos) {
                miniatura m = new miniatura(foto, this.orden, edo, ruta);
                p_cinta.add(m);
            }
            fotos=null;
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }


    public void visualiza(Boolean valor)
    {
        this.jButton2.setEnabled(valor);
    }
}
