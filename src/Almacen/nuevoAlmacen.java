package Almacen;

import Compras.buscaPedido;
import Ejemplar.altaEjemplar;
import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Almacen;
import Hibernate.entidades.Configuracion;
import Hibernate.entidades.Ejemplar;
import Hibernate.entidades.Factura;
import Hibernate.entidades.Movimiento;
import Hibernate.entidades.Orden;
import Hibernate.entidades.OrdenExterna;
import Hibernate.entidades.Partida;
import Hibernate.entidades.PartidaExterna;
import Hibernate.entidades.Pedido;
import Hibernate.entidades.Usuario;
import Servicios.buscaOrden;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import Integral.FormatoEditor;
import Integral.FormatoTabla;
import Integral.Herramientas;
import Integral.Render1;
import org.hibernate.Criteria;
/**
 * @author ESPECIALIZADO TOLUCA
 */
public class nuevoAlmacen extends javax.swing.JPanel {
    Usuario usr;
    Usuario usrAut;
    FormatoTabla formato;
    String sessionPrograma="";
    Herramientas h;
    int menu;
    nuevoAlmacen.MyModel model;
    public Orden orden_act=null;
    public Partida part_act=null;
    public Pedido pedido=null;    
    Almacen miAlmacen;
    String miTitulo="Movimientos de Almacén (Entrada de material de proveedor)";
    /**
     * Creates new form nuevAlmacen
     */
    public nuevoAlmacen(Usuario usuario, String ses, int op) {
        initComponents();
        menu=op;
        usr=usuario;
        sessionPrograma=ses;
        formato = new FormatoTabla(); 
        String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Pedidos","X Surtir","Entrada","Costo c/u","Total"};
        Class[] types = new Class [] 
        {
            java.lang.String.class, java.lang.String.class, java.lang.String.class,
            java.lang.String.class, java.lang.String.class, java.lang.String.class,
            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
            java.lang.Double.class, java.lang.Double.class
        };
        model=new MyModel(0, columnas, types);
        t_datos.setModel(model);
        t_datos.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        sumaTotales();
        formatoTabla();
        b_buscapedido.setEnabled(true);
        b_buscaorden.setEnabled(false);
    }
    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242); //2, 135, 242  //m 90,66,126
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
        {
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        }
        tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
        t_datos.setDefaultRenderer(String.class, formato);
        t_datos.setDefaultRenderer(Boolean.class, formato);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codigo = new javax.swing.JComboBox();
        autoriza = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        t_contra = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        t_user = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        b_autorizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_motivo = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanelMalmacen = new javax.swing.JPanel();
        jPanelProveedor = new javax.swing.JPanel();
        l_tmovimiento = new javax.swing.JLabel();
        l_fecha = new javax.swing.JLabel();
        l_nmovimiento = new javax.swing.JLabel();
        t_nmovimiento = new javax.swing.JTextField();
        t_fecha = new javax.swing.JTextField();
        c_tmovimiento = new javax.swing.JComboBox();
        l_pedido = new javax.swing.JLabel();
        t_pedido = new javax.swing.JTextField();
        l_toperacion = new javax.swing.JLabel();
        c_toperacion = new javax.swing.JComboBox();
        b_buscapedido = new javax.swing.JButton();
        t_nreferencia = new javax.swing.JTextField();
        l_nreferencia = new javax.swing.JLabel();
        l_orden = new javax.swing.JLabel();
        t_orden = new javax.swing.JTextField();
        b_buscaorden = new javax.swing.JButton();
        l_tipo = new javax.swing.JLabel();
        t_tipo = new javax.swing.JTextField();
        l_marca = new javax.swing.JLabel();
        t_serie = new javax.swing.JTextField();
        l_modelo = new javax.swing.JLabel();
        t_modelo = new javax.swing.JTextField();
        l_serie = new javax.swing.JLabel();
        t_marca = new javax.swing.JTextField();
        t_compania = new javax.swing.JTextField();
        l_compania = new javax.swing.JLabel();
        l_siniestro = new javax.swing.JLabel();
        t_siniestro = new javax.swing.JTextField();
        t_asegurado = new javax.swing.JTextField();
        l_asegurado = new javax.swing.JLabel();
        t_folio = new javax.swing.JTextField();
        l_folio = new javax.swing.JLabel();
        l_tipo_pedido = new javax.swing.JLabel();
        r1 = new javax.swing.JRadioButton();
        r2 = new javax.swing.JRadioButton();
        jPanelED = new javax.swing.JPanel();
        l_er = new javax.swing.JLabel();
        t_er = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        jPanelM = new javax.swing.JPanel();
        jPanelOperaciones = new javax.swing.JPanel();
        l_iva = new javax.swing.JLabel();
        t_IVA = new javax.swing.JFormattedTextField();
        t_subtotal = new javax.swing.JFormattedTextField();
        l_subtotal = new javax.swing.JLabel();
        l_total = new javax.swing.JLabel();
        t_total = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        t_notas = new javax.swing.JTextArea();
        l_notas = new javax.swing.JLabel();
        b_guardar = new javax.swing.JButton();
        b_recargar = new javax.swing.JButton();
        b_mas = new javax.swing.JButton();
        b_menos = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        f1 = new javax.swing.JRadioButton();
        f2 = new javax.swing.JRadioButton();
        f3 = new javax.swing.JRadioButton();
        f4 = new javax.swing.JRadioButton();
        f5 = new javax.swing.JRadioButton();

        autoriza.setModalExclusionType(null);
        autoriza.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Autorizar entrega de material", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        t_contra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_contraActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel2.setText("Contraseña:");

        t_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_userActionPerformed(evt);
            }
        });
        t_user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_userKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel1.setText("Usuario:");

        b_autorizar.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        b_autorizar.setText("Autorizar");
        b_autorizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_autorizarActionPerformed(evt);
            }
        });
        b_autorizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                b_autorizarFocusLost(evt);
            }
        });

        t_motivo.setColumns(20);
        t_motivo.setRows(5);
        t_motivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_motivoKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(t_motivo);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel3.setText("Motivo:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(b_autorizar))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t_contra)
                            .addComponent(t_user))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_contra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(b_autorizar)
                .addContainerGap())
        );

        javax.swing.GroupLayout autorizaLayout = new javax.swing.GroupLayout(autoriza.getContentPane());
        autoriza.getContentPane().setLayout(autorizaLayout);
        autorizaLayout.setHorizontalGroup(
            autorizaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        autorizaLayout.setVerticalGroup(
            autorizaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanelMalmacen.setBackground(new java.awt.Color(254, 254, 254));
        jPanelMalmacen.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), miTitulo, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        jPanelProveedor.setBackground(new java.awt.Color(255, 255, 255));
        jPanelProveedor.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Proveedor", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        l_tmovimiento.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_tmovimiento.setText("T. Movimiento");

        l_fecha.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_fecha.setText("Fecha:");

        l_nmovimiento.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_nmovimiento.setText("N° Mov.");

        t_nmovimiento.setEditable(false);
        t_nmovimiento.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_nmovimiento.setEnabled(false);

        t_fecha.setEditable(false);
        t_fecha.setText("DD/MM/AAAA");
        t_fecha.setToolTipText("fecha para refacciones");
        t_fecha.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_fecha.setEnabled(false);

        c_tmovimiento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Entrada", "Salida" }));
        c_tmovimiento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                c_tmovimientoItemStateChanged(evt);
            }
        });

        l_pedido.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_pedido.setText("N° Pedido");

        t_pedido.setEditable(false);
        t_pedido.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_pedido.setEnabled(false);

        l_toperacion.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_toperacion.setText("T. Operación");

        c_toperacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pedido", "Compañía", "Operarios", "Venta" }));
        c_toperacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                c_toperacionItemStateChanged(evt);
            }
        });

        b_buscapedido.setIcon(new ImageIcon("imagenes/buscar1.png"));
        b_buscapedido.setEnabled(false);
        b_buscapedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscapedidoActionPerformed(evt);
            }
        });

        t_nreferencia.setEditable(false);
        t_nreferencia.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_nreferencia.setEnabled(false);

        l_nreferencia.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_nreferencia.setText("N° Referencia");

        l_orden.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_orden.setText("O. Taller");

        t_orden.setEditable(false);
        t_orden.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_orden.setEnabled(false);

        b_buscaorden.setIcon(new ImageIcon("imagenes/buscar1.png"));
        b_buscaorden.setEnabled(false);
        b_buscaorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscaordenActionPerformed(evt);
            }
        });

        l_tipo.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_tipo.setText("Tipo:");

        t_tipo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_tipo.setEnabled(false);

        l_marca.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_marca.setText("Marca:");

        t_serie.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_serie.setEnabled(false);

        l_modelo.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_modelo.setText("Modelo:");

        t_modelo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_modelo.setEnabled(false);

        l_serie.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_serie.setText("Serie:");

        t_marca.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_marca.setEnabled(false);

        t_compania.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_compania.setEnabled(false);

        l_compania.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_compania.setText("Compañía:");

        l_siniestro.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_siniestro.setText("Siniestro");

        t_siniestro.setEditable(false);
        t_siniestro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_siniestro.setEnabled(false);

        t_asegurado.setEditable(false);
        t_asegurado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_asegurado.setEnabled(false);

        l_asegurado.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_asegurado.setText("Asegurado");

        t_folio.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_folio.setEnabled(false);
        t_folio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_folioKeyTyped(evt);
            }
        });

        l_folio.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_folio.setText("NO°:");

        buttonGroup1.add(r1);
        r1.setText("Factura");
        r1.setEnabled(false);

        buttonGroup1.add(r2);
        r2.setSelected(true);
        r2.setText("Remisión");
        r2.setEnabled(false);

        javax.swing.GroupLayout jPanelProveedorLayout = new javax.swing.GroupLayout(jPanelProveedor);
        jPanelProveedor.setLayout(jPanelProveedorLayout);
        jPanelProveedorLayout.setHorizontalGroup(
            jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProveedorLayout.createSequentialGroup()
                        .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProveedorLayout.createSequentialGroup()
                                .addComponent(l_tmovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                .addComponent(l_orden)
                                .addGap(31, 31, 31)))
                        .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(c_tmovimiento, 0, 190, Short.MAX_VALUE)
                            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                .addComponent(t_orden)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b_buscaorden, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelProveedorLayout.createSequentialGroup()
                        .addComponent(l_siniestro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_siniestro, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(l_asegurado)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProveedorLayout.createSequentialGroup()
                        .addComponent(t_asegurado, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(l_compania)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_compania, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(l_folio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_folio, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(r1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r2))
                    .addGroup(jPanelProveedorLayout.createSequentialGroup()
                        .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                .addComponent(l_toperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(c_toperacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                        .addGap(221, 221, 221)
                                        .addComponent(l_modelo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(t_modelo))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProveedorLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(l_tipo_pedido)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(l_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(t_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_buscapedido, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(l_serie, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(l_nmovimiento, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(t_nmovimiento)
                                    .addComponent(t_serie)))
                            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                .addComponent(l_tipo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(l_marca)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_marca, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                .addGap(389, 389, 389)))
                        .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(l_fecha)
                                .addGap(13, 13, 13)
                                .addComponent(t_fecha, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(l_nreferencia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_nreferencia))))))
        );
        jPanelProveedorLayout.setVerticalGroup(
            jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProveedorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_buscapedido, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_fecha)
                        .addComponent(l_nmovimiento)
                        .addComponent(t_nmovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_tmovimiento)
                        .addComponent(l_pedido)
                        .addComponent(t_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(c_toperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_toperacion)
                        .addComponent(c_tmovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_tipo_pedido)))
                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l_orden)
                            .addComponent(t_orden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(l_tipo)
                        .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l_modelo)
                            .addComponent(t_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l_serie)
                            .addComponent(t_marca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_serie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l_marca)
                            .addComponent(t_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l_nreferencia)
                            .addComponent(t_nreferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelProveedorLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(b_buscaorden, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_asegurado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_compania)
                        .addComponent(t_compania, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_folio)
                        .addComponent(t_folio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(r1)
                        .addComponent(r2))
                    .addGroup(jPanelProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(l_siniestro)
                        .addComponent(t_siniestro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_asegurado)))
                .addContainerGap())
        );

        jPanelED.setBackground(new java.awt.Color(255, 255, 255));
        jPanelED.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        l_er.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_er.setText("Entrego");

        t_er.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_er.setNextFocusableComponent(b_guardar);
        t_er.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_erActionPerformed(evt);
            }
        });
        t_er.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_erKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelEDLayout = new javax.swing.GroupLayout(jPanelED);
        jPanelED.setLayout(jPanelEDLayout);
        jPanelEDLayout.setHorizontalGroup(
            jPanelEDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l_er, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_er)
                .addContainerGap())
        );
        jPanelEDLayout.setVerticalGroup(
            jPanelEDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEDLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelEDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(l_er, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(t_er))
                .addContainerGap())
        );

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "#", "N° Parte", "Descripción", "Medida", "Pedidos", "X Surtir", "Cantidad", "Costo c/u", "Total"
            }
        ));
        t_datos.setCellSelectionEnabled(false);
        t_datos.setRowSelectionAllowed(true);
        t_datos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        t_datos.getTableHeader().setReorderingAllowed(false);
        t_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_datosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(t_datos);
        t_datos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jPanelM.setBackground(new java.awt.Color(2, 135, 242));

        jPanelOperaciones.setBackground(new java.awt.Color(2, 135, 242));
        jPanelOperaciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        l_iva.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_iva.setForeground(new java.awt.Color(255, 255, 255));
        l_iva.setText("I.V.A.:");
        jPanelOperaciones.add(l_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 20, -1, -1));

        t_IVA.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_IVA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_IVA.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_IVA.setText("0.00");
        t_IVA.setEnabled(false);
        t_IVA.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanelOperaciones.add(t_IVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 88, -1));

        t_subtotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_subtotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_subtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_subtotal.setText("0.00");
        t_subtotal.setEnabled(false);
        t_subtotal.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanelOperaciones.add(t_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 88, -1));

        l_subtotal.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_subtotal.setForeground(new java.awt.Color(255, 255, 255));
        l_subtotal.setText("Subtotal:");
        jPanelOperaciones.add(l_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 4, -1, -1));

        l_total.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_total.setForeground(new java.awt.Color(255, 255, 255));
        l_total.setText("Total:");
        jPanelOperaciones.add(l_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 40, -1, -1));

        t_total.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_total.setText("0.00");
        t_total.setEnabled(false);
        t_total.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanelOperaciones.add(t_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 88, -1));

        t_notas.setColumns(20);
        t_notas.setRows(5);
        t_notas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_notasKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(t_notas);

        l_notas.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_notas.setForeground(new java.awt.Color(250, 250, 250));
        l_notas.setText("Notas:");

        b_guardar.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        b_guardar.setIcon(new ImageIcon("imagenes/guardar.png"));
        b_guardar.setText("Guardar");
        b_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_guardarActionPerformed(evt);
            }
        });

        b_recargar.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        b_recargar.setIcon(new ImageIcon("imagenes/reenviar.png"));
        b_recargar.setText("Recargar");
        b_recargar.setToolTipText("");
        b_recargar.setEnabled(false);
        b_recargar.setPreferredSize(new java.awt.Dimension(32, 8));
        b_recargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_recargarActionPerformed(evt);
            }
        });

        b_mas.setIcon(new ImageIcon("imagenes/boton_mas.png"));
        b_mas.setToolTipText("Agrega una partida");
        b_mas.setEnabled(false);
        b_mas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_masActionPerformed(evt);
            }
        });

        b_menos.setIcon(new ImageIcon("imagenes/boton_menos.png"));
        b_menos.setMnemonic('x');
        b_menos.setToolTipText("Elimina la partida seleccionada");
        b_menos.setEnabled(false);
        b_menos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menosActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(2, 135, 242));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "filtrar por:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(254, 254, 254))); // NOI18N

        buttonGroup2.add(f1);
        f1.setForeground(new java.awt.Color(254, 254, 254));
        f1.setText("Hojalateria");
        f1.setEnabled(false);
        f1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(f2);
        f2.setForeground(new java.awt.Color(254, 254, 254));
        f2.setText("Mecanica");
        f2.setEnabled(false);
        f2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(f3);
        f3.setForeground(new java.awt.Color(254, 254, 254));
        f3.setText("Suspensión");
        f3.setEnabled(false);
        f3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(f4);
        f4.setForeground(new java.awt.Color(254, 254, 254));
        f4.setText("Electricidad");
        f4.setEnabled(false);
        f4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f4ActionPerformed(evt);
            }
        });

        buttonGroup2.add(f5);
        f5.setForeground(new java.awt.Color(254, 254, 254));
        f5.setSelected(true);
        f5.setText("Todos");
        f5.setEnabled(false);
        f5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(f1)
                    .addComponent(f2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(f3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(f5))
                    .addComponent(f4))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(f1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(f2))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(f3)
                    .addComponent(f5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(f4))
        );

        javax.swing.GroupLayout jPanelMLayout = new javax.swing.GroupLayout(jPanelM);
        jPanelM.setLayout(jPanelMLayout);
        jPanelMLayout.setHorizontalGroup(
            jPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(b_mas, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(b_menos, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(l_notas)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_guardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_recargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelMLayout.setVerticalGroup(
            jPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMLayout.createSequentialGroup()
                .addGroup(jPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b_recargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanelOperaciones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelMLayout.createSequentialGroup()
                        .addGroup(jPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(l_notas)
                            .addComponent(b_mas, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_menos, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanelMalmacenLayout = new javax.swing.GroupLayout(jPanelMalmacen);
        jPanelMalmacen.setLayout(jPanelMalmacenLayout);
        jPanelMalmacenLayout.setHorizontalGroup(
            jPanelMalmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanelProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelMalmacenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelED, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanelM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelMalmacenLayout.setVerticalGroup(
            jPanelMalmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMalmacenLayout.createSequentialGroup()
                .addComponent(jPanelProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMalmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMalmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void t_erKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_erKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_er.getText().length()>=255)
        evt.consume();
    }//GEN-LAST:event_t_erKeyTyped

    private void t_notasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_notasKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_notas.getText().length()>=255)
        evt.consume();
    }//GEN-LAST:event_t_notasKeyTyped

    private void b_masActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_masActionPerformed
        h=new Herramientas(usr, menu);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        List part_act, renglones;
        
        try
        {
            session.beginTransaction().begin();
            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0)
            {
                pedido =(Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
                if(t_pedido.getText().compareTo("")!=0)
                {
                    consultaPartidaPedido obj = new consultaPartidaPedido(new javax.swing.JFrame(), true, pedido, usr);
                    obj.t_pedido.setText(t_pedido.getText());
                    obj.busca(c_toperacion.getSelectedItem().toString(),l_tipo_pedido.getText(), c_tmovimiento.getSelectedItem().toString());
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                    obj.setVisible(true);
                    renglones=obj.getReturnStatus();
                    if(renglones!=null)
                    {
                        for(int x=0; x<renglones.size(); x++)
                        {
                            part_act=(List)renglones.get(x);
                            int r=buscapartida(part_act);
                            if(r==-1)
                            {
                                Object[] vector=new Object[part_act.size()];
                                for(int c=0; c<part_act.size(); c++)
                                {
                                    vector[c]=part_act.get(c);
                                }
                                model.addRow(vector);
                                if(l_tipo_pedido.getText().compareTo("Interno")==0)
                                {
                                    model.setColumnaEditable(3, true);
                                    model.setColumnaEditable(8, true);
                                }
                                if(l_tipo_pedido.getText().compareTo("Externo")==0)
                                {
                                    model.setColumnaEditable(6, true);
                                }
                                if(l_tipo_pedido.getText().compareTo("Adicional")==0)
                                {
                                    model.setColumnaEditable(8, true);
                                }
                            }
                            //else
                                //JOptionPane.showMessageDialog(null, "¡No se pueden agregar partidas duplicadas!");
                        }
                        sumaTotales();
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Selecciona una partida!");
                    b_buscapedido.requestFocus();
                }
            }
            if(c_toperacion.getSelectedItem().toString().compareTo("Compañía")==0)
            {
                orden_act =(Orden)session.get(Orden.class, Integer.parseInt(t_orden.getText()));
                if(t_orden.getText().compareTo("")!=0)
                {
                    consultaPartidaOrden obj = new consultaPartidaOrden(new javax.swing.JFrame(), true,this.orden_act, usr);
                    obj.t_orden.setText(t_orden.getText());
                    obj.busca(c_toperacion.getSelectedItem().toString(),l_tipo_pedido.getText(), c_tmovimiento.getSelectedItem().toString(), "", "");
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                    obj.setVisible(true);
                    renglones=obj.getReturnStatus();
                    if(renglones!=null)
                    {
                        for(int x=0; x<renglones.size(); x++)
                        {
                            part_act=(List)renglones.get(x);
                            int r=buscapartida(part_act);
                            if(r==-1)
                            {
                                Object[] vector=new Object[10];
                                for(int c=0; c<part_act.size(); c++)
                                {
                                    vector[c]=part_act.get(c);
                                }
                                model.addRow(vector);
                                model.setColumnaEditable(8, true);
                                sumaTotales();
                            }
                            //else
                                //JOptionPane.showMessageDialog(null, "¡No se pueden agregar partidas duplicadas!");
                        }
                    }               
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Selecciona una partida!");
                    b_buscapedido.requestFocus();
                }
            }
            if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0)
            {
                orden_act =(Orden)session.get(Orden.class, Integer.parseInt(t_orden.getText()));
                if(t_orden.getText().compareTo("")!=0)
                {
                    consultaPartidaOrden obj = new consultaPartidaOrden(new javax.swing.JFrame(), true, this.orden_act, usr);
                    String q1="";
                    String q2="";
                    if(f1.isSelected())
                    {
                        q1+=" and part.espHoj=true";
                        q2+=" and partEx.pedido.partida.espHoj=true";
                    }
                    if(f2.isSelected())
                    {
                        q1+=" and part.espMec=true";
                        q2+=" and partEx.pedido.partida.espMec=true";
                    }
                    if(f3.isSelected())
                    {
                        q1+=" and part.espSus=true";
                        q2+=" and partEx.pedido.partida.espSus=true";
                    }
                    if(f4.isSelected())
                    {
                        q1+=" and part.espEle=true";
                        q2+=" and partEx.pedido.partida.espEle=true";
                    }
                    obj.t_orden.setText(t_orden.getText());
                    obj.busca(c_toperacion.getSelectedItem().toString(),l_tipo_pedido.getText(), c_tmovimiento.getSelectedItem().toString(), q1, q2);
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                    obj.setVisible(true);
                    renglones=obj.getReturnStatus();
                    if(renglones!=null)
                    {
                        for(int x=0; x<renglones.size(); x++)
                        {
                            part_act=(List)renglones.get(x);
                            int r=buscapartida(part_act);
                            if(r==-1)
                            {
                                Object[] vector=new Object[10];
                                for(int c=0; c<part_act.size(); c++)
                                {
                                    vector[c]=part_act.get(c);
                                }
                                model.addRow(vector);
                                if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                                    model.setColumnaEditable(7, true);
                                else
                                    model.setColumnaEditable(8, true);
                                sumaTotales();
                            }
                            else
                                JOptionPane.showMessageDialog(null, "¡No se pueden agregar partidas duplicadas!");
                        }
                    }               
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Selecciona una partida!");
                    b_buscapedido.requestFocus();
                }
            }
            if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
            {
                pedido =(Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
                if(t_pedido.getText().compareTo("")!=0)
                {
                    consultaPartidaPedido obj = new consultaPartidaPedido(new javax.swing.JFrame(), true,pedido, usr);
                    obj.t_pedido.setText(t_pedido.getText());
                    obj.busca(c_toperacion.getSelectedItem().toString(),l_tipo_pedido.getText(), c_tmovimiento.getSelectedItem().toString());
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                    obj.setVisible(true);
                    renglones=obj.getReturnStatus();
                    if(renglones!=null)
                    {
                        for(int x=0; x<renglones.size(); x++)
                        {
                            part_act=(List)renglones.get(x);
                            int r=buscapartida(part_act);
                            if(r==-1)
                            {
                                Object[] vector=new Object[10];
                                for(int c=0; c<part_act.size(); c++)
                                {
                                    vector[c]=part_act.get(c);
                                }
                                model.addRow(vector);
                                if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                                    model.setColumnaEditable(5, true);
                                else
                                    model.setColumnaEditable(7, true);
                                sumaTotales();
                            }
                            //else
                                //JOptionPane.showMessageDialog(null, "¡No se pueden agregar partidas duplicadas!");
                        }
                    }               
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Selecciona una partida!");
                    b_buscapedido.requestFocus();
                }
            }
        }catch(Exception e)
        {
            System.out.println();
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_b_masActionPerformed

    private void c_toperacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_c_toperacionItemStateChanged
        h= new Herramientas(usr, menu);
        h.session(sessionPrograma);
        h.desbloqueaOrden();
        h.desbloqueaPedido();
        switch (c_toperacion.getSelectedIndex()) 
        {
            case 0:
                operacion(true, true, false, true, true, true, true, true, true, true);
                borra_cajas();
                limpiar_tabla();
                break;
            case 1:
                operacion(false, true, true, true, false, false, false, false, false, false);
                borra_cajas();
                limpiar_tabla();
                break;
            case 2:
                operacion(false, false, true, false, false, false, false, false, false, false);
                borra_cajas();
                limpiar_tabla();
                break;
            case 3:
                //operacion(true, true, false, true, true, true, true, true, true, true);
                operacion(true, true, false, true, true, true, true, true, true, true);
                //operacion(false, false, true, false, false, false, false, false, false, false);
                borra_cajas();
                limpiar_tabla();
                break;
        }
        titulos();
    }//GEN-LAST:event_c_toperacionItemStateChanged

    private void b_buscapedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscapedidoActionPerformed
        h=new Herramientas(usr, menu);
        h.session(sessionPrograma);
        buscaPedido obj;
        if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
            obj = new buscaPedido(new javax.swing.JFrame(), true, 1, "Externo");
        else
            obj = new buscaPedido(new javax.swing.JFrame(), true, 1, "");
        obj.t_busca.requestFocus();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        Pedido ped=obj.getReturnStatus();
        if(ped!=null)
        {
            operacion(true, true, false, true, true, true, true, true, true, true);
            limpiar_tabla();
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                //session.beginTransaction().begin();
                ped=(Pedido)session.get(Pedido.class, ped.getIdPedido());
                h.desbloqueaOrden();
                h.desbloqueaPedido();
                String edo=h.estadoPedido(ped);
                if(edo.compareTo("")==0 || edo.compareTo("*bloqueada ok*")==0)
                {
                    switch(ped.getTipoPedido())
                    {
                        case "Interno":
                            Partida partida = (Partida)session.createCriteria(Partida.class).add(Restrictions.eq("pedido.idPedido", ped.getIdPedido())).setMaxResults(1).uniqueResult();
                            if(partida!=null)
                            {
                                orden_act=(Orden)session.get(Orden.class, partida.getOrdenByIdOrden().getIdOrden());
                                borra_cajas();
                                l_tipo_pedido.setText(ped.getTipoPedido());
                                t_pedido.setText(""+ped.getIdPedido());
                                t_orden.setText(""+orden_act.getIdOrden());
                                t_tipo.setText(orden_act.getTipo().getTipoNombre());
                                t_marca.setText(""+orden_act.getMarca().getIdMarca());//marcanombre
                                t_modelo.setText(Integer.toString(orden_act.getModelo()));
                                t_serie.setText(orden_act.getNoSerie());
                                t_compania.setText(""+orden_act.getCompania().getIdCompania());//nombre
                                t_siniestro.setText(orden_act.getSiniestro());
                                t_asegurado.setText(""+orden_act.getClientes().getIdClientes());//nombre
                            }
                            break;
                        case "Externo":
                                OrdenExterna orden_Ex=(OrdenExterna)session.get(OrdenExterna.class, ped.getOrdenExterna().getIdOrden());
                                borra_cajas();
                                l_tipo_pedido.setText(ped.getTipoPedido());
                                t_pedido.setText(""+ped.getIdPedido());
                                //t_orden.setText(""+orden_Ex.getIdOrden());
                                if(orden_Ex.getTipo()!=null)
                                    t_tipo.setText(orden_Ex.getTipo().getTipoNombre());
                                if(orden_Ex.getMarca()!=null)
                                    t_marca.setText(""+orden_Ex.getMarca().getIdMarca());//marcanombre
                                if(orden_Ex.getModelo()!=null)
                                    t_modelo.setText(Integer.toString(orden_Ex.getModelo()));
                                if(orden_Ex.getNoSerie()!=null)
                                    t_serie.setText(orden_Ex.getNoSerie());
                                if(orden_Ex.getCompania()!=null)
                                    t_compania.setText(""+orden_Ex.getCompania().getIdCompania());//nombre
                                if(orden_Ex.getSiniestro()!=null)
                                    t_siniestro.setText(orden_Ex.getSiniestro());
                            break;
                        case "Adicional":
                                orden_act=(Orden)session.get(Orden.class, ped.getOrden().getIdOrden());
                                borra_cajas();
                                l_tipo_pedido.setText(ped.getTipoPedido());
                                t_pedido.setText(""+ped.getIdPedido());
                                t_orden.setText(""+orden_act.getIdOrden());
                                t_tipo.setText(orden_act.getTipo().getTipoNombre());
                                t_marca.setText(""+orden_act.getMarca().getIdMarca());//marcanombre
                                t_modelo.setText(Integer.toString(orden_act.getModelo()));
                                t_serie.setText(orden_act.getNoSerie());
                                t_compania.setText(""+orden_act.getCompania().getIdCompania());//nombre
                                t_siniestro.setText(orden_act.getSiniestro());
                                t_asegurado.setText(""+orden_act.getClientes().getIdClientes());//nombre
                            break;
                    }
                    t_pedido.setText(""+ped.getIdPedido());
                    b_mas.setEnabled(true);
                    b_menos.setEnabled(true);
                    busca();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Pedido bloqueado por:"+ped.getUsuarioByBloqueado().getIdUsuario());
                }
            }catch(Exception e)
            {
                e.printStackTrace();
            }
            finally
            {
                if(session.isOpen())
                    session.close();
            }
        }
        else
        {
            h= new Herramientas(usr, menu);
            h.desbloqueaOrden();
            limpiar_tabla();
            borra_cajas();
            sumaTotales();
            b_buscapedido.requestFocus();
        }
    }//GEN-LAST:event_b_buscapedidoActionPerformed

    private void c_tmovimientoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_c_tmovimientoItemStateChanged
        h= new Herramientas(usr, menu);
        h.session(sessionPrograma);
        h.desbloqueaOrden();
        h.desbloqueaPedido();
        switch (c_tmovimiento.getSelectedIndex())
        {
            case 0:
                t_datos.setModel(model);
                formatoTabla();
                borra_cajas();
                limpiar_tabla();
                break;
            case 1:
                t_datos.setModel(model);
                formatoTabla();
                borra_cajas();
                limpiar_tabla();
                break;
        }   
        titulos();
    }//GEN-LAST:event_c_tmovimientoItemStateChanged

    private void b_buscaordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscaordenActionPerformed
        h=new Herramientas(usr, menu);
        h.session(sessionPrograma);
        buscaOrden obj = new buscaOrden(new javax.swing.JFrame(), true, usr, 0);
        obj.t_busca.requestFocus();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        orden_act=obj.getReturnStatus();
        try
        {
            if(orden_act!=null)
            {
                limpiar_tabla();
                if(orden_act.getInicioRefacciones()!=null)
                {
                    if(orden_act.getFechaCierre()==null)
                    {
                        h= new Herramientas(usr, menu);
                        h.desbloqueaOrden();
                        //String resp=h.estadoOrden(orden_act);
                        //if(resp.compareTo("")==0 || resp.compareTo("*bloqueada ok*")==0)
                        //{
                            t_orden.setText(""+orden_act.getIdOrden());
                            if(t_orden.getText().compareTo("")!=0)
                            {
                                borra_cajas();
                                orden_act=buscarOrden(orden_act.getIdOrden());
                                t_orden.setText(""+orden_act.getIdOrden());
                                t_tipo.setText(orden_act.getTipo().getTipoNombre());
                                t_marca.setText(""+orden_act.getMarca().getIdMarca());//marcanombre
                                t_modelo.setText(Integer.toString(orden_act.getModelo()));
                                t_serie.setText(orden_act.getNoSerie());
                                t_compania.setText(""+orden_act.getCompania().getIdCompania());//nombre
                                t_siniestro.setText(orden_act.getSiniestro());
                                t_asegurado.setText(""+orden_act.getClientes().getIdClientes());//nombre
                                b_mas.setEnabled(true);
                                b_menos.setEnabled(true);
                                busca();
                            }                            
                            else
                            {
                                borra_cajas();
                                b_mas.setEnabled(false);
                                b_menos.setEnabled(false);
                                orden_act=null;
                            }
                        /*}
                        else
                            JOptionPane.showMessageDialog(null, "¡Orden Bloqueada por:"+orden_act.getUsuarioByBloqueada().getIdUsuario());*/
                    }
                    else
                        JOptionPane.showMessageDialog(null, "¡Orden cerrada!");
                }
                else
                    JOptionPane.showMessageDialog(null, "¡Aún no esta disponible!");
            }
            else
            {
                h= new Herramientas(usr, menu);
                h.desbloqueaOrden();
                limpiar_tabla();
                borra_cajas();
                sumaTotales();
                b_buscaorden.requestFocus();
            }
        }catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_b_buscaordenActionPerformed

    private void b_menosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menosActionPerformed
        h=new Herramientas(usr, menu);
        h.session(sessionPrograma);
        if(t_datos.getSelectedRow()>=0)
        {   
            DefaultTableModel model = (DefaultTableModel) t_datos.getModel();
            int [] renglones = t_datos.getSelectedRows();
            int opt=JOptionPane.showConfirmDialog(this, "¡Las partidas se eliminará!");
            if (JOptionPane.YES_OPTION == opt)
            {
                for(int x=0; x<renglones.length; x++)
                    model.removeRow(t_datos.getSelectedRow());
                sumaTotales();
                JOptionPane.showMessageDialog(null, "¡Partida eliminada!");
            }
        }
        else
            JOptionPane.showMessageDialog(null, "¡Selecciona la partida que desees eliminar!");
    }//GEN-LAST:event_b_menosActionPerformed

    private void t_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_datosMouseClicked
        /*if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 )
        {
            if(t_datos.getSelectedRow()>=0)
            {
                if(t_datos.getSelectedColumn()==3)
                {
                    codigo.removeAllItems();
                    codigo.addItem("S/C");
                    codigo.setSelectedItem("S/C");
                    codigo.addItem("Agregar");
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    try
                    {
                        session.beginTransaction().begin();
                        Partida partida=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("pedido.idPedido", (Integer.parseInt(t_pedido.getText())))).add(Restrictions.eq("idPartida", Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()))).setMaxResults(1).uniqueResult();
                        if(partida!=null)
                        {
                            Ejemplar[] codigos = (Ejemplar[]) partida.getCatalogo().getEjemplars().toArray(new Ejemplar[0]);
                            if(codigos!=null)
                            {
                                Ejemplar codigoAux= new Ejemplar();
                                for(int k=0;k<codigos.length;k++)
                                {
                                    for(int f=0;f<(codigos.length-1)-k;f++)
                                    {
                                        if (codigos[f].getIdParte().compareTo(codigos[f+1].getIdParte())==1)
                                        {
                                            codigoAux=codigos[f];
                                            codigos[f]=codigos[f+1];
                                            codigos[f+1]=codigoAux;
                                        }
                                    }
                                }
                                if(codigos.length>0)
                                {
                                    for(int i=0; i<codigos.length; i++)
                                    {
                                        codigo.addItem(codigos[i].getIdParte());
                                    }

                                }
                            }
                        }
                        session.beginTransaction().commit();
                    }catch(Exception e)
                    {
                        System.out.println("Error"+e);
                        e.printStackTrace();
                    }
                    if(session!=null)
                        if(session.isOpen())
                            session.close();
                }
            }
        }*/
    }//GEN-LAST:event_t_datosMouseClicked

    private void t_folioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_folioKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_folio.getText().length()>=15)
        evt.consume();
    }//GEN-LAST:event_t_folioKeyTyped

    private void b_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_guardarActionPerformed
        h=new Herramientas(usr, menu);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            Almacen almacen = new Almacen();
            almacen.setUsuario(usr);
            Date fecha_almacen = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            String valor=dateFormat.format(fecha_almacen);
            String [] fecha = valor.split("-");
            String [] hora=fecha[2].split(":");
            String [] aux=hora[0].split(" ");
            fecha[2]=aux[0];
            hora[0]=aux[1];
            Calendar calendario = Calendar.getInstance();
            calendario.set(
                Integer.parseInt(fecha[2]),
                Integer.parseInt(fecha[1])-1,
                Integer.parseInt(fecha[0]),
                Integer.parseInt(hora[0]),
                Integer.parseInt(hora[1]),
                Integer.parseInt(hora[2]));
            almacen.setFecha(calendario.getTime());
            almacen.setEntrego(t_er.getText());
            almacen.setDocumento(t_folio.getText());
            almacen.setNotas(t_notas.getText());
            if (c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                almacen.setTipoMovimiento(1);
            else
                almacen.setTipoMovimiento(2);
            switch (c_toperacion.getSelectedIndex()) 
            {
                case 0://ped
                    if(l_tipo_pedido.getText().compareTo("Interno")==0)
                    {
                        if(t_er.getText().compareTo("")!=0)
                        {
                            if(t_datos.getRowCount()>0)
                            {
                                if(consultaLista(8)==true)
                                {
                                    if(almacen.getTipoMovimiento()==1)
                                    {
                                        if(t_folio.getText().compareTo("")!=0)
                                        {
                                            //consultar si estan todas autorizadas //para antes de entrada
                                            /*if(autorizaOperarios1()==true)
                                            {*/
                                                almacen.setOperacion(1); 
                                                if(r1.isSelected())
                                                    almacen.setTipoDocumento("F");
                                                else
                                                    almacen.setTipoDocumento("R");
                                                Integer respuesta=guardarAlmacen(almacen);
                                                if(respuesta!=null)
                                                {
                                                    JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                                    estado(false, false, false, false, false, false, false, false, false, false, true);
                                                    b_recargar.requestFocus();
                                                    formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                                    fa.formato();
                                                }
                                                else
                                                    b_guardar.requestFocus();
                                            //}
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "Falta el numero de factura o remisión");
                                    }
                                    else
                                    {
                                        almacen.setOperacion(1); 
                                        if(r1.isSelected())
                                            almacen.setTipoDocumento("F");
                                        else
                                            almacen.setTipoDocumento("R");
                                        Integer respuesta=guardarAlmacen(almacen);
                                        if(respuesta!=null)
                                        {
                                            JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                            estado(false, false, false, false, false, false, false, false, false, false, true);
                                            b_recargar.requestFocus();
                                            formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                            fa.formato();
                                        }
                                        else
                                            b_guardar.requestFocus();
                                    }
                                }
                                else
                                JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                            }
                            else
                            JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                            t_er.requestFocus();
                        }
                    }
                    if(l_tipo_pedido.getText().compareTo("Externo")==0)
                    {
                        if(t_er.getText().compareTo("")!=0)
                        {
                            if(t_datos.getRowCount()>0)
                            {
                                if(consultaLista(6)==true)
                                {
                                    if(almacen.getTipoMovimiento()==1)
                                    {
                                        if(t_folio.getText().compareTo("")!=0)
                                        {
                                            almacen.setOperacion(2);
                                            if(r1.isSelected())
                                                almacen.setTipoDocumento("F");
                                            else
                                                almacen.setTipoDocumento("R");
                                            Integer respuesta=guardarAlmacen(almacen);
                                            if(respuesta!=null)
                                            {
                                                JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                                estado(false, false, false, false, false, false, false, false, false, false, true);                              
                                                b_recargar.requestFocus();
                                                formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                                fa.formato();
                                            }
                                            else
                                                b_guardar.requestFocus();
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "Falta el numero de factura o remisión");
                                    }
                                    else
                                    {
                                        almacen.setOperacion(2);
                                        if(r1.isSelected())
                                            almacen.setTipoDocumento("F");
                                        else
                                            almacen.setTipoDocumento("R");
                                        Integer respuesta=guardarAlmacen(almacen);
                                        if(respuesta!=null)
                                        {
                                            JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                            estado(false, false, false, false, false, false, false, false, false, false, true);                              
                                            b_recargar.requestFocus();
                                            formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                            fa.formato();
                                        }
                                        else
                                            b_guardar.requestFocus();
                                    }
                                }
                                else
                                JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                            }
                            else
                            JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                            t_er.requestFocus();
                        }
                    }
                    if(l_tipo_pedido.getText().compareTo("Adicional")==0)
                    {
                        if(t_er.getText().compareTo("")!=0)
                        {
                            if(t_datos.getRowCount()>0)
                            {
                                if(consultaLista(8)==true)
                                {
                                    if(almacen.getTipoMovimiento()==1)
                                    {
                                        if(t_folio.getText().compareTo("")!=0)
                                        {
                                            //consultar si estan todas autorizadas //para antes de entrada
                                            /*if(autorizaOperarios1()==true)
                                            {*/
                                                almacen.setOperacion(3);
                                                if(r1.isSelected())
                                                    almacen.setTipoDocumento("F");
                                                else
                                                    almacen.setTipoDocumento("R");
                                                Integer respuesta=guardarAlmacen(almacen);
                                                if(respuesta!=null)
                                                {
                                                    JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                                    estado(false, false, false, false, false, false, false, false, false, false, true);                              
                                                    b_recargar.requestFocus();
                                                    formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                                    fa.formato();
                                                }
                                                else
                                                    b_guardar.requestFocus();
                                            //}
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "Falta el numero de factura o remisión");
                                    }
                                    else
                                    {
                                        almacen.setOperacion(3);
                                        if(r1.isSelected())
                                            almacen.setTipoDocumento("F");
                                        else
                                            almacen.setTipoDocumento("R");
                                        Integer respuesta=guardarAlmacen(almacen);
                                        if(respuesta!=null)
                                        {
                                            JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                            estado(false, false, false, false, false, false, false, false, false, false, true);                              
                                            b_recargar.requestFocus();
                                            formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                            fa.formato();
                                        }
                                        else
                                            b_guardar.requestFocus();
                                    }
                                }
                                else
                                JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                            }
                            else
                            JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                            t_er.requestFocus();
                        }
                    }
                    break;            
                case 1://compania
                    if(t_er.getText().compareTo("")!=0)
                    {
                        if(t_datos.getRowCount()>0)
                        {
                            if(consultaLista(8)==true)
                            {
                                if(t_folio.getText().compareTo("")!=0)
                                {
                                    almacen.setOperacion(4);
                                    if(r1.isSelected())
                                        almacen.setTipoDocumento("F");
                                    else
                                        almacen.setTipoDocumento("R");
                                    Integer respuesta=guardarAlmacenOrden(almacen);
                                    if(respuesta!=null)
                                    {
                                        JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                        estado(false, false, false, false, false, false, false, false, false, false, true);
                                        b_recargar.requestFocus();
                                        formatosOrden fa=new formatosOrden(this.usr, this.sessionPrograma, almacen);
                                        fa.formato();
                                    }
                                    else
                                        b_guardar.requestFocus();
                                }
                                else
                                    JOptionPane.showMessageDialog(null, "Falta el numero de factura o remisión");
                            }
                            else
                                JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                        }
                        else
                            JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                        t_er.requestFocus();
                    }
                    break;                
                case 2://operario
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                    {
                        if(t_er.getText().compareTo("")!=0)
                        {
                            if(t_datos.getRowCount()>0)
                            {
                                if(consultaLista(7)==true)
                                {
                                    almacen.setOperacion(5);                                                        
                                    Integer respuesta=guardarAlmacenOrden(almacen);
                                    if(respuesta!=null)
                                    {
                                        JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                        estado(false, false, false, false, false, false, false, false, false, false, true);
                                        b_recargar.requestFocus();
                                        formatosOrden fa=new formatosOrden(this.usr, this.sessionPrograma, almacen);
                                        fa.formato();
                                    }
                                    else
                                        b_guardar.requestFocus();
                                }
                                else
                                    JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                            }
                            else
                                JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                            t_er.requestFocus();
                        }
                    }
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                    {
                        if(autorizaOperarios()==true)
                        {//para pedido op
                            if(t_er.getText().compareTo("")!=0)
                            {
                                if(t_datos.getRowCount()>0)
                                {
                                    if(consultaLista(8)==true)
                                    {
                                        //almacen.setAutorizo(usr);
                                        almacen.setOperacion(5);
                                        Integer respuesta=guardarAlmacenOrden(almacen);
                                        if(respuesta!=null)
                                        {
                                            JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                            estado(false, false, false, false, false, false, false, false, false, false, true);
                                            b_recargar.requestFocus();
                                            formatosOrden fa=new formatosOrden(this.usr, this.sessionPrograma, almacen);
                                            fa.formato();
                                        }
                                        else
                                            b_guardar.requestFocus();
                                    }
                                    else
                                        JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                                }
                                else
                                    JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                                t_er.requestFocus();
                            }
                        }
                    }
                    break;

                case 3://venta
                    if(t_er.getText().compareTo("")!=0)
                    {
                        if(t_datos.getRowCount()>0)
                        {
                            int columna=5;
                            if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                                columna=7;
                            if(consultaLista(columna)==true)
                            {
                                almacen.setOperacion(6);
                                Integer respuesta=guardarAlmacen(almacen);
                                if(respuesta!=null)
                                {
                                    JOptionPane.showMessageDialog(null, "Registro almacenado con la clave:  " +respuesta);
                                    estado(false, false, false, false, false, false, false, false, false, false, true);
                                    b_recargar.requestFocus();
                                    formatosPedido fa=new formatosPedido(this.usr, this.sessionPrograma, almacen);
                                    fa.formato();
                                }
                                else
                                b_guardar.requestFocus();
                            }
                            else
                            JOptionPane.showMessageDialog(null, "No se puede almacenar la cantidad ya que una partida contiene 0.00");
                        }
                        else
                        JOptionPane.showMessageDialog(null, "Es necesario seleccionar alguna partida");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Ingresa el nombre del que entrego/recibio");
                        t_er.requestFocus();
                    }
                    break;
            }
        }catch(Exception e)
        {
            System.out.println();
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_b_guardarActionPerformed

    private void b_recargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_recargarActionPerformed
        h=new Herramientas(usr, menu);
        h.session(sessionPrograma);
        h.desbloqueaOrden();
        c_tmovimiento.setSelectedIndex(0);
        c_toperacion.setSelectedIndex(0);
        limpiar_tabla();
        borra_cajas();
        estado(true, false, false, true, true, true, true, true, false, true, false);
        r2.setSelected(true);
        r2.setSelected(false);
        sumaTotales();
    }//GEN-LAST:event_b_recargarActionPerformed

    private void t_erActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_erActionPerformed
        b_guardar.requestFocus();
    }//GEN-LAST:event_t_erActionPerformed

    private void t_contraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_contraActionPerformed
        b_autorizar.requestFocus();
    }//GEN-LAST:event_t_contraActionPerformed

    private void t_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_userActionPerformed
        t_contra.requestFocus();
    }//GEN-LAST:event_t_userActionPerformed

    private void b_autorizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_autorizarActionPerformed
        if(t_motivo.getText().compareTo("")!=0)
        {
            if(t_user.getText().compareTo("")!=0)
            {
                if(t_contra.getPassword().toString().compareTo("")!=0)
                {
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    try
                    {
                        session.beginTransaction().begin();
                        Usuario autorizar = (Usuario)session.createCriteria(Usuario.class).add(Restrictions.eq("idUsuario", t_user.getText())).add(Restrictions.eq("clave", t_contra.getText())).setMaxResults(1).uniqueResult();
                        if(autorizar!=null)
                        {
                            if(autorizar.getAutorizaEntregas()==true)
                            {
                                usrAut=autorizar;
                                autoriza.dispose();
                            }
                            else
                            JOptionPane.showMessageDialog(this, "¡El usuario no tiene permiso de autorizar!");
                        }
                        else
                        {
                            session.beginTransaction().rollback();
                            JOptionPane.showMessageDialog(this, "¡Datos Incorrectos!");
                            t_user.requestFocus();
                        }
                    }catch(Exception e)
                    {
                        session.beginTransaction().rollback();
                        JOptionPane.showMessageDialog(this, "¡Error al consultar los datos!");
                        e.printStackTrace();
                    }
                    if(session!=null)
                        if(session.isOpen()==true)
                        session.close();
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "¡Ingrese la contraseña!");
                    t_contra.requestFocus();
                }
            }
            else
            {
            JOptionPane.showMessageDialog(this, "¡Ingrese el usuario!");
            t_user.requestFocus();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "¡Debe ingresar el motivo por el cual hace la autorización!");
            t_motivo.requestFocus();
        }
    }//GEN-LAST:event_b_autorizarActionPerformed

    private void b_autorizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_b_autorizarFocusLost
        sumaTotales();
    }//GEN-LAST:event_b_autorizarFocusLost

    private void t_motivoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_motivoKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_motivo.getText().length()>=255)
        evt.consume();
    }//GEN-LAST:event_t_motivoKeyTyped

    private void t_userKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_userKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_user.getText().length()>=10)
        evt.consume();
    }//GEN-LAST:event_t_userKeyTyped

    private void f1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f1ActionPerformed
        // TODO add your handling code here:
        busca();
    }//GEN-LAST:event_f1ActionPerformed

    private void f2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f2ActionPerformed
        // TODO add your handling code here:
        busca();
    }//GEN-LAST:event_f2ActionPerformed

    private void f3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f3ActionPerformed
        // TODO add your handling code here:
        busca();
    }//GEN-LAST:event_f3ActionPerformed

    private void f4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f4ActionPerformed
        // TODO add your handling code here:
        busca();
    }//GEN-LAST:event_f4ActionPerformed

    private void f5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f5ActionPerformed
        // TODO add your handling code here:
        busca();
    }//GEN-LAST:event_f5ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog autoriza;
    private javax.swing.JButton b_autorizar;
    private javax.swing.JButton b_buscaorden;
    private javax.swing.JButton b_buscapedido;
    private javax.swing.JButton b_guardar;
    private javax.swing.JButton b_mas;
    private javax.swing.JButton b_menos;
    private javax.swing.JButton b_recargar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox c_tmovimiento;
    private javax.swing.JComboBox c_toperacion;
    private javax.swing.JComboBox codigo;
    private javax.swing.JRadioButton f1;
    private javax.swing.JRadioButton f2;
    private javax.swing.JRadioButton f3;
    private javax.swing.JRadioButton f4;
    private javax.swing.JRadioButton f5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelED;
    private javax.swing.JPanel jPanelM;
    private javax.swing.JPanel jPanelMalmacen;
    private javax.swing.JPanel jPanelOperaciones;
    private javax.swing.JPanel jPanelProveedor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel l_asegurado;
    private javax.swing.JLabel l_compania;
    private javax.swing.JLabel l_er;
    private javax.swing.JLabel l_fecha;
    private javax.swing.JLabel l_folio;
    private javax.swing.JLabel l_iva;
    private javax.swing.JLabel l_marca;
    private javax.swing.JLabel l_modelo;
    private javax.swing.JLabel l_nmovimiento;
    private javax.swing.JLabel l_notas;
    private javax.swing.JLabel l_nreferencia;
    private javax.swing.JLabel l_orden;
    private javax.swing.JLabel l_pedido;
    private javax.swing.JLabel l_serie;
    private javax.swing.JLabel l_siniestro;
    private javax.swing.JLabel l_subtotal;
    private javax.swing.JLabel l_tipo;
    private javax.swing.JLabel l_tipo_pedido;
    private javax.swing.JLabel l_tmovimiento;
    private javax.swing.JLabel l_toperacion;
    private javax.swing.JLabel l_total;
    private javax.swing.JRadioButton r1;
    private javax.swing.JRadioButton r2;
    private javax.swing.JFormattedTextField t_IVA;
    private javax.swing.JTextField t_asegurado;
    private javax.swing.JTextField t_compania;
    private javax.swing.JPasswordField t_contra;
    private javax.swing.JTable t_datos;
    private javax.swing.JTextField t_er;
    private javax.swing.JTextField t_fecha;
    private javax.swing.JTextField t_folio;
    private javax.swing.JTextField t_marca;
    private javax.swing.JTextField t_modelo;
    private javax.swing.JTextArea t_motivo;
    private javax.swing.JTextField t_nmovimiento;
    private javax.swing.JTextArea t_notas;
    private javax.swing.JTextField t_nreferencia;
    private javax.swing.JTextField t_orden;
    private javax.swing.JTextField t_pedido;
    private javax.swing.JTextField t_serie;
    private javax.swing.JTextField t_siniestro;
    private javax.swing.JFormattedTextField t_subtotal;
    private javax.swing.JTextField t_tipo;
    private javax.swing.JFormattedTextField t_total;
    private javax.swing.JTextField t_user;
    // End of variables declaration//GEN-END:variables
    private Orden buscarOrden(int id)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try 
        {
            session.beginTransaction().begin();
            Orden ord = (Orden)session.get(Orden.class, id);
            session.getTransaction().commit();
            return ord;
        } 
        catch (HibernateException he) 
        {
            he.printStackTrace();
            session.getTransaction().rollback();
            return null;
        }
        finally 
        {
            session.close(); 
        }
    }
    
    public void busca()
    {
        h= new Herramientas(usr, menu);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0)
            {
                Pedido pedido=(Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
                l_tipo_pedido.setText(pedido.getTipoPedido());
                if(this.l_tipo_pedido.getText().compareTo("Interno")==0)
                {
                    session.beginTransaction().begin();
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                    {
                        String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Pedidos","X Surtir","Entrada","Costo c/u","Total"};//, "OK"};//para antes de entrada 
                        Class[] types = new Class [] 
                        {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class,
                            java.lang.String.class, java.lang.String.class, java.lang.String.class,
                            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
                            java.lang.Double.class, java.lang.Double.class
                            //, java.lang.Boolean.class //para antes de entrada
                        };
                        Query query = session.createQuery("SELECT DISTINCT par FROM Partida par "
                                + "LEFT JOIN FETCH par.movimientos movPart "
                                + "LEFT JOIN movPart.almacen alm "
                                + "where par.pedido.idPedido="+Integer.parseInt(t_pedido.getText())); //where alm.operacion=1 and 
                                //+ "and par.pedido!="+null);
                        List partidas = query.list();
                        model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                        model.setColumnaEditable(8, true);
                        model.setColumnaEditable(3, true);
                        t_datos.setModel(model);
                        for(int a=0; a<partidas.size(); a++)
                        {
                            Partida par = (Partida) partidas.get(a);
                            Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            double entradas=0, devoluciones=0;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==1)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==1)
                                    devoluciones+=mov[b].getCantidad();
                            }
                            double total_almacen=entradas-devoluciones;
                            double total=par.getCantPcp()-total_almacen;

                            model.setValueAt(par.getIdPartida(), a, 0);
                            model.setValueAt(par.getIdEvaluacion(), a, 1);
                            model.setValueAt(par.getSubPartida(), a, 2);
                            if(par.getEjemplar()!=null)
                                model.setValueAt(par.getEjemplar().getIdParte(), a, 3);
                            else
                                model.setValueAt("", a, 3);
                            model.setValueAt(par.getCatalogo().getNombre(), a, 4);
                            model.setValueAt(par.getMed(), a, 5);
                            model.setValueAt(par.getCantPcp(), a, 6);
                            model.setValueAt(total, a, 7);
                            model.setValueAt(0.0d, a, 8);

                            if(par.getPcp()!=null)
                                model.setValueAt(par.getPcp(), a, 9);
                            else
                                    model.setValueAt(par.getPcp(), a, 9);
                            model.setValueAt(0.0d, a, 10);
                            //model.setValueAt(par.getOp(), a, 11); //para antes de entrada
                        }
                        for(int m=model.getRowCount()-1; m>=0; m--)
                        {
                            if( ((double)model.getValueAt(m, 7)) ==0.0d )
                                model.removeRow(m);
                        }
                    }
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                    {
                        String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Pedidos","En almacen","Devolución","Costo c/u","Total"};
                        Class[] types = new Class [] 
                        {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class,
                            java.lang.String.class, java.lang.String.class, java.lang.String.class,
                            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
                            java.lang.Double.class, java.lang.Double.class
                        };
                        Query query = session.createQuery("SELECT DISTINCT par FROM Partida par "
                                + "LEFT JOIN FETCH par.movimientos movPart "
                                + "LEFT JOIN movPart.almacen alm "
                                + "where alm.operacion=1 and par.pedido.idPedido="+Integer.parseInt(t_pedido.getText()));
                                //+ "and par.pedido!="+null);
                        List partidas = query.list();
                        model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                        model.setColumnaEditable(8, true);
                        model.setColumnaEditable(3, true);
                        t_datos.setModel(model);
                        for(int a=0; a<partidas.size(); a++)
                        {
                            Partida par = (Partida) partidas.get(a);
                            Movimiento[] mov = (Movimiento[])session.createCriteria(Movimiento.class).add(Restrictions.eq("partida.idPartida", par.getIdPartida())).list().toArray(new Movimiento[0]);
                            double entradas=0.0d, devoluciones=0.0d, entregadas=0.0d, devueltas=0.0d;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==1)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==1)
                                    devoluciones+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                    devueltas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                    entregadas+=mov[b].getCantidad();
                            }
                            double total_Pedido=entradas-devoluciones;
                            double total_operario=entregadas-devueltas;
                            double total=total_Pedido-total_operario;
                            model.setValueAt(par.getIdPartida(), a, 0);
                            model.setValueAt(par.getIdEvaluacion(), a, 1);
                            model.setValueAt(par.getSubPartida(), a, 2);
                            if(par.getEjemplar()!=null)
                                model.setValueAt(par.getEjemplar().getIdParte(), a, 3);
                            else
                                model.setValueAt("", a, 3);
                            model.setValueAt(par.getCatalogo().getNombre(), a, 4);
                            model.setValueAt(par.getMed(), a, 5);
                            model.setValueAt(par.getCantPcp(), a, 6);
                            model.setValueAt(total, a, 7);
                            model.setValueAt(0.0d, a, 8);
                            if(par.getPcp()!=null)
                                model.setValueAt(par.getPcp(), a, 9);
                            else
                                model.setValueAt(par.getPcp(), a, 9);
                            model.setValueAt(0.0d, a, 10); 
                        }
                        for(int m=model.getRowCount()-1; m>=0; m--)
                        {
                            if( ((double)model.getValueAt(m, 7)) ==0.0d)
                                model.removeRow(m);
                        }
                    }
                    sumaTotales();
                    session.beginTransaction().commit();
                }
            
                if(this.l_tipo_pedido.getText().compareTo("Externo")==0)
                {
                    try
                    {
                        session.beginTransaction().begin();
                        if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                        {
                            String[] columnas = new String [] {"Id","N° Parte","Descripción","Medida","Pedidos","X Surtir","Entrada","Costo c/u","Total"};
                            Class[] types = new Class [] 
                            {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
                                java.lang.Double.class
                            };
                            Query query = session.createQuery("SELECT DISTINCT part FROM PartidaExterna part "
                                    + "where part.pedido.idPedido="+Integer.parseInt(t_pedido.getText()));
                                    //+ "and part.pedido!="+null);
                            List partidas = query.list();
                            model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                            model.setColumnaEditable(6, true);
                            t_datos.setModel(model);
                            for(int a=0; a<partidas.size(); a++)
                            {
                                PartidaExterna par = (PartidaExterna) partidas.get(a);
                                Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                                double entradas=0.0d, devoluciones=0.0d;
                                for(int b=0; b<mov.length; b++)
                                {
                                    Almacen alm=mov[b].getAlmacen();
                                    if(alm.getTipoMovimiento()==1 && alm.getOperacion()==2)
                                        entradas+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==2 && alm.getOperacion()==2)
                                        devoluciones+=mov[b].getCantidad();
                                }
                                double total_almacen=entradas-devoluciones;
                                double total=par.getCantidad()-total_almacen;
                                model.setValueAt(par.getIdPartidaExterna(), a, 0);
                                if(par.getNoParte()!=null)
                                    model.setValueAt(par.getNoParte(), a, 1);
                                else
                                    model.setValueAt("", a, 1);
                                model.setValueAt(par.getDescripcion(), a, 2);
                                model.setValueAt(par.getUnidad(), a, 3);
                                model.setValueAt(par.getCantidad(), a, 4);
                                model.setValueAt(total, a, 5);
                                model.setValueAt(0.0d, a, 6);
                                model.setValueAt(par.getCosto(), a, 7);
                                model.setValueAt(0.0d, a, 8);
                            }
                            for(int m=model.getRowCount()-1; m>=0; m--)
                            {
                                if( ((double)model.getValueAt(m, 5)) == 0.0d)
                                    model.removeRow(m);
                            }
                        }
                        if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                        {
                            String[] columnas = new String [] {"Id","N° Parte","Descripción","Medida","Pedidos","En almacen","Devolución","Costo c/u","Total"};
                            Class[] types = new Class [] 
                            {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
                                java.lang.Double.class
                            };
                            Query query = session.createQuery("SELECT DISTINCT part FROM PartidaExterna part "
                                    + "LEFT JOIN FETCH part.movimientos movPart "
                                    + "LEFT JOIN movPart.almacen alm "
                                    + "where alm.operacion=2 and part.pedido.idPedido="+Integer.parseInt(t_pedido.getText()));
                                    //+ "and part.pedido!="+null);
                            List partidas = query.list();
                            model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                            model.setColumnaEditable(6, true);
                            t_datos.setModel(model);
                            for(int a=0; a<partidas.size(); a++)
                            {
                                PartidaExterna par = (PartidaExterna) partidas.get(a);
                                //Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                                Movimiento[] mov = (Movimiento[])session.createCriteria(Movimiento.class).add(Restrictions.eq("partidaExterna.idPartidaExterna", par.getIdPartidaExterna())).list().toArray(new Movimiento[0]);
                                double entradas=0, devoluciones=0, entregadas=0, devueltas=0;;
                                for(int b=0; b<mov.length; b++)
                                {
                                    Almacen alm=mov[b].getAlmacen();
                                    if(alm.getTipoMovimiento()==1 && alm.getOperacion()==2)
                                        entradas+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==2 && alm.getOperacion()==2)
                                        devoluciones+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==1 && alm.getOperacion()==6)
                                        devueltas+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==2 && alm.getOperacion()==6)
                                        entregadas+=mov[b].getCantidad();
                                }
                                double total_Pedido=entradas-devoluciones;
                                double total_operario=entregadas-devueltas;
                                double total=total_Pedido-total_operario;
                                model.setValueAt(par.getIdPartidaExterna(), a, 0);
                                if(par.getNoParte()!=null)
                                    model.setValueAt(par.getNoParte(), a, 1);
                                else
                                    model.setValueAt("", a, 1);
                                model.setValueAt(par.getDescripcion(), a, 2);
                                model.setValueAt(par.getUnidad(), a, 3);
                                model.setValueAt(par.getCantidad(), a, 4);
                                model.setValueAt(total, a, 5);
                                model.setValueAt(0.0d, a, 6);

                                if(par.getCosto()!=null)
                                    model.setValueAt(par.getCosto(), a, 7);
                                else
                                    model.setValueAt(0.0d, a, 7);
                                model.setValueAt(0.0d, a, 8);
                            }
                            for(int m=model.getRowCount()-1; m>=0; m--)
                            {
                                if( ((double)model.getValueAt(m, 5)) ==0.0d)
                                    model.removeRow(m);
                            }
                        }
                        sumaTotales();
                        session.beginTransaction().commit();
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                        session.beginTransaction().rollback();
                    }
                    finally
                    {
                        if(session.isOpen()==true)
                            session.close();
                    }
                }
            
                if(this.l_tipo_pedido.getText().compareTo("Adicional")==0)
                {
                    try
                    {
                        session.beginTransaction().begin();
                        if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                        {
                            String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Pedidos","X Surtir","Entrada","Costo c/u","Total"};//, "Ok"}; //para antes de entrada
                            Class[] types = new Class [] 
                            {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
                                java.lang.Double.class, java.lang.Double.class
                                //, java.lang.Boolean.class //para antes de entrada
                            };
                            Query query = session.createQuery("SELECT DISTINCT part FROM PartidaExterna part "
                                    + "where part.pedido.idPedido="+Integer.parseInt(t_pedido.getText()));
                            List partidas = query.list();
                            model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                            model.setColumnaEditable(8, true);
                            t_datos.setModel(model);
                            for(int a=0; a<partidas.size(); a++)
                            {
                                PartidaExterna par = (PartidaExterna) partidas.get(a);
                                Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                                double entradas=0, devoluciones=0;
                                for(int b=0; b<mov.length; b++)
                                {
                                    Almacen alm=mov[b].getAlmacen();
                                    if(alm.getTipoMovimiento()==1 && alm.getOperacion()==3)
                                        entradas+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==2 && alm.getOperacion()==3)
                                        devoluciones+=mov[b].getCantidad();
                                }
                                double total_almacen=entradas-devoluciones;
                                double total=par.getCantidad()-total_almacen;
                                model.setValueAt(par.getIdPartidaExterna(), a, 0);
                                //model.setValueAt(par.getPedido().getPartida().getIdEvaluacion(), a, 1);
                                //model.setValueAt(par.getPedido().getPartida().getSubPartida(), a, 2);
                                model.setValueAt(0, a, 1);
                                model.setValueAt(0, a, 2);
                                if(par.getNoParte()!=null)
                                    model.setValueAt(par.getNoParte(), a, 3);
                                else
                                    model.setValueAt("", a, 3);
                                //model.setValueAt(par.getPedido().getPartida().getCatalogo().getNombre()+"/"+par.getDescripcion(), a, 4);
                                model.setValueAt(par.getDescripcion(), a, 4);
                                model.setValueAt(par.getUnidad(), a, 5);
                                model.setValueAt(par.getCantidad(), a, 6);
                                model.setValueAt(total, a, 7);
                                model.setValueAt(0.0d, a, 8);
                                model.setValueAt(par.getCosto(), a, 9);
                                model.setValueAt(0.0d, a, 10);
                                //model.setValueAt(par.getOp(), a, 11); //para antes de entrada
                            }
                            for(int m=model.getRowCount()-1; m>=0; m--)
                            {
                                if( ((double)model.getValueAt(m, 7)) ==0.0d)
                                    model.removeRow(m);
                            }
                        }
                        if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                        {
                            String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Pedidos","En almacen","Devolución","Costo c/u","Total"};
                            Class[] types = new Class [] 
                            {
                                java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,
                                java.lang.Double.class, java.lang.Double.class
                            };
                            Query query = session.createQuery("SELECT DISTINCT part FROM PartidaExterna part "
                                    + "LEFT JOIN FETCH part.movimientos movPart "
                                    + "LEFT JOIN movPart.almacen alm "
                                    + "where alm.operacion=3 and part.pedido.idPedido="+Integer.parseInt(t_pedido.getText())
                                    + "and part.pedido!="+null);
                            List partidas = query.list();
                            model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                            model.setColumnaEditable(8, true);
                            t_datos.setModel(model);
                            for(int a=0; a<partidas.size(); a++)
                            {
                                PartidaExterna par = (PartidaExterna) partidas.get(a);
                                //Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                                Movimiento[] mov = (Movimiento[])session.createCriteria(Movimiento.class).add(Restrictions.eq("partidaExterna.idPartidaExterna", par.getIdPartidaExterna())).list().toArray(new Movimiento[0]);
                                double entradas=0, devoluciones=0, entregadas=0, devueltas=0;;
                                for(int b=0; b<mov.length; b++)
                                {
                                    Almacen alm=mov[b].getAlmacen();
                                    if(alm.getTipoMovimiento()==1 && alm.getOperacion()==3)
                                        entradas+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==2 && alm.getOperacion()==3)
                                        devoluciones+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                        devueltas+=mov[b].getCantidad();
                                    if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                        entregadas+=mov[b].getCantidad();
                                }
                                double total_Pedido=entradas-devoluciones;
                                double total_operario=entregadas-devueltas;
                                double total=total_Pedido-total_operario;
                                model.setValueAt(par.getIdPartidaExterna(), a, 0);
                                //model.setValueAt(par.getPedido().getPartida().getIdEvaluacion(), a, 1);
                                //model.setValueAt(par.getPedido().getPartida().getSubPartida(), a, 2);
                                model.setValueAt(0, a, 1);
                                model.setValueAt(0, a, 2);
                                if(par.getNoParte()!=null)
                                    model.setValueAt(par.getNoParte(), a, 3);
                                else
                                    model.setValueAt("", a, 3);
                                //model.setValueAt(par.getPedido().getPartida().getCatalogo().getNombre()+"/"+par.getDescripcion(), a, 4);
                                model.setValueAt(par.getDescripcion(), a, 4);
                                model.setValueAt(par.getUnidad(), a, 5);
                                model.setValueAt(par.getCantidad(), a, 6);
                                model.setValueAt(total, a, 7);
                                model.setValueAt(0.0d, a, 8);
                                model.setValueAt(par.getCosto(), a, 9);
                                model.setValueAt(0.0d, a, 10);
                            }
                            for(int m=model.getRowCount()-1; m>=0; m--)
                            {
                                if( ((double)model.getValueAt(m, 7)) ==0.0d)
                                    model.removeRow(m);
                            }
                        }
                        sumaTotales();
                        session.beginTransaction().commit();
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                        session.beginTransaction().rollback();
                    }
                    finally
                    {
                        if(session.isOpen()==true)
                            session.close();
                    }
                }
            }
            
            if(c_toperacion.getSelectedItem().toString().compareTo("Compañía")==0)
            {
                Class[] types = new Class [] 
                {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                    java.lang.String.class, java.lang.String.class, java.lang.String.class,
                    java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                };
                if(t_orden.getText().compareTo("")!=0)
                {
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                    {
                        String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Autorizados","X Surtir","Entrada"};
                        Query query = session.createQuery("SELECT DISTINCT part FROM Partida part "
                                + "where part.ordenByIdOrden.idOrden="+Integer.parseInt(t_orden.getText())
                                + " and part.so="+true);
                        List partidas = query.list();
                        
                        model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                        model.setColumnaEditable(8, true);
                        t_datos.setModel(model);
                        for(int a=0; a<partidas.size(); a++)
                        {
                            Partida par = (Partida) partidas.get(a);
                            Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            double entradas=0, devoluciones=0;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==4)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==4)
                                    devoluciones+=mov[b].getCantidad();
                            }
                            double total_almacen=entradas-devoluciones;
                            double total=par.getCantidadAut()-total_almacen;
                            model.setValueAt(par.getIdPartida(), a, 0);
                            model.setValueAt(par.getIdEvaluacion(), a, 1);
                            model.setValueAt(par.getSubPartida(), a, 2);
                            if(par.getEjemplar()!=null)
                                model.setValueAt(par.getEjemplar().getIdParte(), a, 3);
                            else
                                model.setValueAt("", a, 3);
                            model.setValueAt(par.getCatalogo().getNombre(), a, 4);
                            model.setValueAt(par.getMed(), a, 5);
                            model.setValueAt(par.getCantidadAut(), a, 6);
                            model.setValueAt(total, a, 7);
                            model.setValueAt(0.0d, a, 8);
                        } 
                        for(int m=model.getRowCount()-1; m>=0; m--)
                        {
                            if( ((double)model.getValueAt(m, 7)) == 0.0d)
                                model.removeRow(m);
                        }
                    }
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                    {
                        String[] columnas = new String [] {"Id","N°","#","N° Parte","Descripción","Medida","Autorizados","En almacen","Devolución"};
                        Query query = session.createQuery("SELECT DISTINCT part FROM Partida part "
                                + "LEFT JOIN FETCH part.movimientos movPart "
                                + "LEFT JOIN movPart.almacen alm "
                                + "where alm.operacion=4 and part.ordenByIdOrden.idOrden="+Integer.parseInt(t_orden.getText()));
                        List partidas = query.list();
                        model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                        model.setColumnaEditable(8, true);
                        t_datos.setModel(model);
                        for(int a=0; a<partidas.size(); a++)
                        {
                            Partida par = (Partida) partidas.get(a);
                            //Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            Movimiento[] mov = (Movimiento[])session.createCriteria(Movimiento.class).add(Restrictions.eq("partida.idPartida", par.getIdPartida())).list().toArray(new Movimiento[0]);
                            double entradas=0, devoluciones=0, entregadas=0, devueltas=0;;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==4)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==4)
                                    devoluciones+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                    devueltas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                    entregadas+=mov[b].getCantidad();
                            }
                            double total_Pedido=entradas-devoluciones;
                            double total_operario=entregadas-devueltas;
                            double total=total_Pedido-total_operario;
                            model.setValueAt(par.getIdPartida(), a, 0);
                            model.setValueAt(par.getIdEvaluacion(), a, 1);
                            model.setValueAt(par.getSubPartida(), a, 2);
                            if(par.getEjemplar()!=null)
                                model.setValueAt(par.getEjemplar().getIdParte(), a, 3);
                            else
                                model.setValueAt("", a, 3);
                            model.setValueAt(par.getCatalogo().getNombre(), a, 4);
                            model.setValueAt(par.getMed(), a, 5);
                            model.setValueAt(par.getCantidadAut(), a, 6);
                            model.setValueAt(total, a, 7);
                            model.setValueAt(0.0d, a, 8);
                        } 
                        for(int m=model.getRowCount()-1; m>=0; m--)
                        {
                            if( ((double)model.getValueAt(m, 7)) == 0.0d)
                                model.removeRow(m);
                        }
                    }
                }
            }
            if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0)
            {
                if(t_orden.getText().compareTo("")!=0)
                {
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                    {
                        Class[] types = new Class [] 
                        {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                            java.lang.Double.class, java.lang.Double.class
                        };
                        String[] columnas = new String [] {"Id","Partida","Tipo","N° Parte","Descripción","Medida","Operario","Devoluciones"};
                        
                        String q1="SELECT DISTINCT part FROM Partida part "
                                + "LEFT JOIN FETCH part.movimientos movPart "
                                + "LEFT JOIN movPart.almacen alm "
                                + "where alm.operacion=5 and part.ordenByIdOrden.idOrden="+Integer.parseInt(t_orden.getText());
                        
                        String q2="SELECT DISTINCT partEx FROM PartidaExterna partEx "
                                + "LEFT JOIN FETCH partEx.movimientos movEx "
                                + "LEFT JOIN movEx.almacen alm "
                                + "where alm.operacion=5 and partEx.pedido.orden.idOrden="+Integer.parseInt(t_orden.getText());
                        
                        if(f1.isSelected())
                        {
                            q1+=" and part.espHoj=true";
                            q2+=" and partEx.pedido.partida.espHoj=true";
                        }
                        if(f2.isSelected())
                        {
                            q1+=" and part.espMec=true";
                            q2+=" and partEx.pedido.partida.espMec=true";
                        }
                        if(f3.isSelected())
                        {
                            q1+=" and part.espSus=true";
                            q2+=" and partEx.pedido.partida.espSus=true";
                        }
                        if(f4.isSelected())
                        {
                            q1+=" and part.espEle=true";
                            q2+=" and partEx.pedido.partida.espEle=true";
                        }
                        
                        Query query = session.createQuery(q1);
                        List partidas = query.list();
                        
                        Query query1 = session.createQuery(q2);
                        List partidasExternas = query1.list();
                        
                        model=new nuevoAlmacen.MyModel(partidas.size()+partidasExternas.size(), columnas, types);
                        model.setColumnaEditable(7, true);
                        t_datos.setModel(model);
                        
                        for(int a=0; a<partidas.size(); a++)
                        {
                            Partida par = (Partida) partidas.get(a);
                            Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            double entregadas=0, devueltas=0;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                    devueltas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                    entregadas+=mov[b].getCantidad();
                            }
                            double total=entregadas-devueltas;
                            model.setValueAt(par.getIdPartida(), a, 0);
                            String gm="";
                            if(par.isEspEle()==true)
                                gm="E";
                            if(par.isEspHoj()==true)
                                gm="H";
                            if(par.isEspMec()==true)
                                gm="M";
                            if(par.isEspSus()==true)
                                gm="S";
                            model.setValueAt(par.getIdEvaluacion()+"-"+par.getSubPartida()+"-"+gm, a, 1);
                            if(par.getPedido()==null)
                                model.setValueAt("COM.", a, 2);
                            else
                                model.setValueAt("PED.", a, 2);
                            if(par.getEjemplar()!=null)
                                model.setValueAt(par.getEjemplar().getIdParte(), a, 3);
                            else
                                model.setValueAt("", a, 3);
                            model.setValueAt(par.getCatalogo().getNombre(), a, 4);
                            model.setValueAt(par.getMed(), a, 5);
                            model.setValueAt(total, a, 6);
                            model.setValueAt(0.0d, a, 7);
                        }
                        
                        for(int a=0; a<partidasExternas.size(); a++)
                        {
                            PartidaExterna par = (PartidaExterna) partidasExternas.get(a);
                            Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            double entregadas=0, devueltas=0;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                    devueltas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                    entregadas+=mov[b].getCantidad();
                            }
                            double total=entregadas-devueltas;
                            model.setValueAt(par.getIdPartidaExterna(), a+partidas.size(), 0);
                            String gm="";
                            /*if(par.getPedido().getPartida().isEspEle()==true)
                                gm="E";
                            if(par.getPedido().getPartida().isEspHoj()==true)
                                gm="H";
                            if(par.getPedido().getPartida().isEspMec()==true)
                                gm="M";
                            if(par.getPedido().getPartida().isEspSus()==true)
                                gm="S";*/
                            model.setValueAt("-"+gm, a+partidas.size(), 1);
                            model.setValueAt("ADI.", a+partidas.size(), 2);
                            if(par.getNoParte()!=null)
                                model.setValueAt(par.getNoParte(), a+partidas.size(), 3);
                            else
                                model.setValueAt("", a+partidas.size(), 3);
                            model.setValueAt(par.getDescripcion(), a+partidas.size(), 4);
                            model.setValueAt(par.getUnidad(), a+partidas.size(), 5);
                            model.setValueAt(total, a+partidas.size(), 6);
                            model.setValueAt(0.0d, a+partidas.size(), 7);
                        }
                        for(int m=model.getRowCount()-1; m>=0; m--)
                        {
                            if( ((double)model.getValueAt(m, 6)) == 0.0d)
                                model.removeRow(m);
                        }
                    }
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                    {
                        Class[] types = new Class [] 
                        {
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                            java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                            java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, 
                            java.lang.Boolean.class //para pedido op
                        };
                        String[] columnas = new String [] {"Id","Partida","Tipo","N° Parte","Descripción","Medida","Existencias","Operario","Entregadas","Solicita"}; //para pedido op
                        String q1="SELECT DISTINCT part FROM Partida part "
                                + "LEFT JOIN FETCH part.movimientos movPart "
                                + "LEFT JOIN movPart.almacen alm "
                                + "where part.ordenByIdOrden.idOrden="+Integer.parseInt(t_orden.getText())
                                + " and alm!="+null;
                        
                        String q2="SELECT DISTINCT partEx FROM PartidaExterna partEx "
                                + "LEFT JOIN FETCH partEx.movimientos movEx "
                                + "LEFT JOIN movEx.almacen alm "
                                + "where alm.operacion in (3, 5) and partEx.pedido.orden.idOrden="+Integer.parseInt(t_orden.getText());
                        
                        if(f1.isSelected())
                        {
                            q1+=" and part.espHoj=true";
                            q2+=" and partEx.pedido.partida.espHoj=true";
                        }
                        if(f2.isSelected())
                        {
                            q1+=" and part.espMec=true";
                            q2+=" and partEx.pedido.partida.espMec=true";
                        }
                        if(f3.isSelected())
                        {
                            q1+=" and part.espSus=true";
                            q2+=" and partEx.pedido.partida.espSus=true";
                        }
                        if(f4.isSelected())
                        {
                            q1+=" and part.espEle=true";
                            q2+=" and partEx.pedido.partida.espEle=true";
                        }
                        
                        Query query = session.createQuery(q1);
                        List partidas = query.list();
                        
                        Query query1 = session.createQuery(q2);
                        List partidasExternas = query1.list();
                            
                        model=new nuevoAlmacen.MyModel(partidas.size()+partidasExternas.size(), columnas, types);
                        model.setColumnaEditable(8, true);
                        t_datos.setModel(model);
                        for(int a=0; a<partidas.size(); a++)
                        {
                            Partida par = (Partida) partidas.get(a);
                            Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            double entradas=0, devoluciones=0, entregadas=0, devueltas=0;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                //Entradad por pedido interno
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==1)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==1)
                                    devoluciones+=mov[b].getCantidad();
                                //entrada por compañia
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==4)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==4)
                                    devoluciones+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                    devueltas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                    entregadas+=mov[b].getCantidad();
                            }
                            double total_Pedido=entradas-devoluciones;
                            double total_operario=entregadas-devueltas;
                            double total=total_Pedido-total_operario;
                            model.setValueAt(par.getIdPartida(), a, 0);
                            model.setValueAt(par.getIdEvaluacion()+"-"+par.getSubPartida(), a, 1);
                            if(par.getPedido()==null)
                                model.setValueAt("COM.", a, 2);
                            else
                                model.setValueAt("PED.", a, 2);
                            if(par.getEjemplar()!=null)
                                model.setValueAt(par.getEjemplar().getIdParte(), a, 3);
                            else
                                model.setValueAt("", a, 3);
                            model.setValueAt(par.getCatalogo().getNombre(), a, 4);
                            model.setValueAt(par.getMed(), a, 5);
                            model.setValueAt(total, a, 6);
                            model.setValueAt(total_operario, a, 7);
                            model.setValueAt(0.0d, a, 8);
                            //model.setValueAt(par.getPerdidases().size(), a, 9);// para pedido op
                            model.setValueAt(par.getOp(), a, 9); //para pedido op
                        }
                        for(int a=0; a<partidasExternas.size(); a++)
                        {
                            PartidaExterna par = (PartidaExterna) partidasExternas.get(a);
                            Movimiento[] mov=(Movimiento[])par.getMovimientos().toArray(new Movimiento[0]);
                            double entradas=0, devoluciones=0, entregadas=0, devueltas=0;
                            for(int b=0; b<mov.length; b++)
                            {
                                Almacen alm=mov[b].getAlmacen();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==3)
                                    entradas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==3)
                                    devoluciones+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==1 && alm.getOperacion()==5)
                                    devueltas+=mov[b].getCantidad();
                                if(alm.getTipoMovimiento()==2 && alm.getOperacion()==5)
                                    entregadas+=mov[b].getCantidad();
                            }
                            double total_Pedido=entradas-devoluciones;
                            double total_operario=entregadas-devueltas;
                            double total=total_Pedido-total_operario;
                            model.setValueAt(par.getIdPartidaExterna(), a+partidas.size(), 0);
                            model.setValueAt("-", a+partidas.size(), 1);
                            model.setValueAt("ADI.", a+partidas.size(), 2);
                            if(par.getNoParte()!=null)
                                model.setValueAt(par.getNoParte(), a+partidas.size(), 3);
                            else
                                model.setValueAt("", a+partidas.size(), 3);
                            model.setValueAt(par.getDescripcion(), a+partidas.size(), 4);
                            model.setValueAt(par.getUnidad(), a+partidas.size(), 5);
                            model.setValueAt(total, a+partidas.size(), 6);
                            model.setValueAt(total_operario, a+partidas.size(), 7);
                            model.setValueAt(0.0d, a+partidas.size(), 8);
                            //model.setValueAt(0, a+partidas.size(), 9);//para op
                            model.setValueAt(par.getOp(), a+partidas.size(), 9); //para pedido op
                        }
                        for(int m=model.getRowCount()-1; m>=0; m--)
                        {
                            if( ((double)model.getValueAt(m, 6)) == 0.0d)
                                model.removeRow(m);
                        }
                    }
                }
            }
            if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
            {
                Pedido pedido=(Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
                l_tipo_pedido.setText(pedido.getTipoPedido());
                session.beginTransaction().begin();
                if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                {
                    Class[] types = new Class [] 
                    {
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.Double.class,
                        java.lang.Double.class
                    };
                    String[] columnas = new String [] {"Id","N° Parte","Descripción","Medida","Entregados","Devueltos"};
                    Query query = session.createQuery("SELECT DISTINCT part FROM PartidaExterna part "
                            + "LEFT JOIN FETCH part.movimientos movPart "
                            + "LEFT JOIN movPart.almacen alm "
                            + "where alm.operacion=2 and part.pedido.idPedido="+Integer.parseInt(t_pedido.getText())
                            + "and part.pedido!="+null);
                    List partidas = query.list();
                    model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                    model.setColumnaEditable(5, true);
                    t_datos.setModel(model);
                    for(int a=0; a<partidas.size(); a++)
                    {
                        PartidaExterna par = (PartidaExterna) partidas.get(a);
                        Movimiento[] mov = (Movimiento[])session.createCriteria(Movimiento.class).add(Restrictions.eq("partidaExterna.idPartidaExterna", par.getIdPartidaExterna())).list().toArray(new Movimiento[0]);
                        double entregados=0.0d, devoluciones=0.0d;
                        for(int b=0; b<mov.length; b++)
                        {
                            Almacen alm=mov[b].getAlmacen();
                            if(alm.getTipoMovimiento()==1 && alm.getOperacion()==6)
                                devoluciones+=mov[b].getCantidad();
                            if(alm.getTipoMovimiento()==2 && alm.getOperacion()==6)
                                entregados+=mov[b].getCantidad();
                        }
                        double total=entregados-devoluciones;
                        model.setValueAt(par.getIdPartidaExterna(), a, 0);
                        if(par.getNoParte()!=null)
                            model.setValueAt(par.getNoParte(), a, 1);
                        else
                            model.setValueAt("", a, 1);
                        model.setValueAt(par.getDescripcion(), a, 2);
                        model.setValueAt(par.getUnidad(), a, 3);
                        model.setValueAt(total, a, 4);
                        model.setValueAt(0.0d, a, 5);
                    }
                    for(int m=model.getRowCount()-1; m>=0; m--)
                    {
                        if( ((double)model.getValueAt(m, 4)) == 0.0d)
                            model.removeRow(m);
                    }
                }
                if(c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                {
                    Class[] types = new Class [] 
                    {
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.Double.class,
                        java.lang.Double.class,
                        java.lang.Double.class,
                        java.lang.Double.class
                    };
                    String[] columnas = new String [] {"Id","N° Parte","Descripción","Medida","Pedidos","Entregadas","Existencias","Salida"};
                    Query query = session.createQuery("SELECT DISTINCT part FROM PartidaExterna part "
                            + "LEFT JOIN FETCH part.movimientos movPart "
                            + "LEFT JOIN movPart.almacen alm "
                            + "where alm.operacion=2 and part.pedido.idPedido="+Integer.parseInt(t_pedido.getText())
                            + "and part.pedido!="+null);
                    List partidas = query.list();
                    model=new nuevoAlmacen.MyModel(partidas.size(), columnas, types);
                    model.setColumnaEditable(7, true);
                    t_datos.setModel(model);
                    for(int a=0; a<partidas.size(); a++)
                    {
                        PartidaExterna par = (PartidaExterna) partidas.get(a);
                        Movimiento[] mov = (Movimiento[])session.createCriteria(Movimiento.class).add(Restrictions.eq("partidaExterna.idPartidaExterna", par.getIdPartidaExterna())).list().toArray(new Movimiento[0]);
                        double entradas=00.d, devoluciones=0.0d, entregadas=0.0d, devueltas=0.0d;
                        for(int b=0; b<mov.length; b++)
                        {
                            Almacen alm=mov[b].getAlmacen();
                            if(alm.getTipoMovimiento()==1 && alm.getOperacion()==2)
                                entradas+=mov[b].getCantidad();
                            if(alm.getTipoMovimiento()==2 && alm.getOperacion()==2)
                                devoluciones+=mov[b].getCantidad();
                            if(alm.getTipoMovimiento()==1 && alm.getOperacion()==6)
                                devueltas+=mov[b].getCantidad();
                            if(alm.getTipoMovimiento()==2 && alm.getOperacion()==6)
                                entregadas+=mov[b].getCantidad();
                        }
                        double total_Existencias=entradas-devoluciones;
                        double total_cliente=entregadas-devueltas;
                        double total=total_Existencias-total_cliente;
                        model.setValueAt(par.getIdPartidaExterna(), a, 0);
                        if(par.getNoParte()!=null)
                            model.setValueAt(par.getNoParte(), a, 1);
                        else
                            model.setValueAt("", a, 1);
                        model.setValueAt(par.getDescripcion(), a, 2);
                        model.setValueAt(par.getUnidad(), a, 3);
                        model.setValueAt(par.getCantidad(), a, 4);
                        model.setValueAt(total_cliente, a, 5);
                        model.setValueAt(total, a, 6);
                        model.setValueAt(0.0d, a, 7);
                    }
                    for(int m=model.getRowCount()-1; m>=0; m--)
                    {
                        if( ((double)model.getValueAt(m, 6)) == 0.0d)
                            model.removeRow(m);
                    }
                }
                sumaTotales();
                session.beginTransaction().commit();
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
        formatoTabla();
    }
    
    public class MyModel extends DefaultTableModel
    {        
        Class [] types;
        int ren=0;
        int col=0;
        private List celdaEditable;
        
        public MyModel(int renglones, String columnas[], Class[] tipos)
        {
            types=tipos;
            ren=renglones;
            col=columnas.length;
            celdaEditable=new ArrayList();
            for(int x=0; x<renglones; x++)
            {
                List aux=new ArrayList();
                for(int y=0; y<types.length; y++)
                    aux.add(false);
                celdaEditable.add(aux);
            }
            setDataVector(new Object [renglones][columnas.length], columnas);
        }
        @Override
        public int getRowCount() {
            return ren;
        }
        @Override
        public int getColumnCount() {
            return col;
        }
        @Override
        public void setValueAt(Object value, int row, int col)
        {
            if(t_datos.getRowCount()>0)
            {
                Vector vector = (Vector)dataVector.elementAt(row);
                Object celda = ((Vector)dataVector.elementAt(row)).elementAt(col);
                switch(col)
                {
                    case 3:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }
                        else
                        {
                            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0)
                            {
                                Session session = HibernateUtil.getSessionFactory().openSession();
                                try
                                {
                                    session.beginTransaction().begin();
                                    usr = (Usuario)session.get(Usuario.class, usr.getIdUsuario());
                                    Partida part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("pedido.idPedido", Integer.parseInt(t_pedido.getText()))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 1).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()))).setMaxResults(1).uniqueResult();
                                    if(part!=null)
                                    {
                                        if(value.toString().compareTo("")!=0)
                                        {
                                            //if(value.toString().compareTo("Agregar")!=0)
                                            //{
                                                Ejemplar ejem = (Ejemplar)session.get(Ejemplar.class, value.toString());
                                                if(ejem!=null)
                                                {
                                                    part.setEjemplar(ejem);
                                                    session.update(part);
                                                    session.getTransaction().commit();
                                                    vector.setElementAt(value, col);
                                                    dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                    if(session.isOpen()==true)
                                                        session.close();
                                                }
                                            //}
                                            /*else
                                            {
                                                if(usr.getEditarEjemplar()==true)
                                                {
                                                    h=new Herramientas(usr, menu);
                                                    h.session(sessionPrograma);     
                                                    altaEjemplar obj = new altaEjemplar(new javax.swing.JFrame(), true, usr, sessionPrograma);
                                                    obj.t_modelo.setText(part.getOrdenByIdOrden().getModelo().toString());
                                                    obj.c_marca.setSelectedItem(part.getOrdenByIdOrden().getMarca().getMarcaNombre());
                                                    obj.c_tipo.setSelectedItem(part.getOrdenByIdOrden().getTipo().getTipoNombre());
                                                    obj.t_catalogo.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 3).toString());
                                                    obj.t_modelo.setEnabled(false);
                                                    obj.c_marca.setEnabled(false);
                                                    obj.c_tipo.setEnabled(false);
                                                    obj.t_catalogo.setEnabled(false);
                                                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                                                    obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                                                    obj.setVisible(true); 
                                                    t_datos.setValueAt("", t_datos.getSelectedRow(), 3);
                                                }
                                                else
                                                {
                                                    fireTableCellUpdated(row, col);
                                                    JOptionPane.showMessageDialog(null, "Acceso Denegado");
                                                }
                                            }*/
                                        }
                                        else
                                        {
                                            part.setEjemplar(null);
                                            session.update(part);
                                            session.getTransaction().commit();
                                            vector.setElementAt("", col);
                                            dataVector.setElementAt(vector, row);
                                            fireTableCellUpdated(row, col);
                                            if(session.isOpen()==true)
                                                session.close();
                                        }
                                    }
                                    else
                                        JOptionPane.showMessageDialog(null, "La partida ya no existe");
                                }
                                catch(Exception e)
                                {
                                    session.getTransaction().rollback();
                                    JOptionPane.showMessageDialog(null, "¡Error al cargar la información!");
                                    e.printStackTrace();
                                }
                                finally
                                {
                                    if(session!=null)
                                        if(session.isOpen()==true)
                                            session.close();
                                }
                            }
                            else
                            {
                                vector.setElementAt(value, col);
                                dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);                            
                            }
                        }
                        break;

                        case 5:
                            if(vector.get(col)==null)
                            {
                                vector.setElementAt(value, col);
                                dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                            }
                            else
                            {
                                if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
                                {
                                    if((double)value<=(double)t_datos.getValueAt(row, 4))
                                    {
                                        vector.setElementAt(value, col);
                                        dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                        JOptionPane.showMessageDialog(null, "La cantidad máxima a devolver es: "+t_datos.getValueAt(row, 4)+t_datos.getValueAt(row, 3).toString());
                                }
                                else
                                {
                                    vector.setElementAt(value, col);
                                    dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                            }
                        break;

                        case 6:
                            double entrada=0.0, salida=0.0;
                            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && l_tipo_pedido.getText().compareTo("Externo")==0)
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        if((double)value>=0)
                                        {
                                            if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                                            {
                                                if((double)value<=(double)t_datos.getValueAt(row, 5))
                                                {
                                                    vector.setElementAt(value, col);
                                                    dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                    sumaTotales();
                                                }
                                                else
                                                    JOptionPane.showMessageDialog(null, "La cantidad máxima por entrar es: "+t_datos.getValueAt(row, 5)+t_datos.getValueAt(row, 3).toString()); 
                                            }
                                            else
                                            {
                                                Query query = session.createQuery("SELECT sum(mov.cantidad) from Movimiento mov "
                                                        +" where mov.partidaExterna.pedido.idPedido="+t_pedido.getText()
                                                        +" AND mov.partidaExterna.idPartidaExterna="+t_datos.getValueAt(row, 0)
                                                        +" and mov.almacen.tipoMovimiento=1"
                                                        +" and mov.almacen.operacion=6");
                                                Object  ent = query.uniqueResult();
                                                if(ent!=null)
                                                    entrada=Double.parseDouble(ent.toString());
                                                query = session.createQuery("SELECT sum(mov.cantidad) from Movimiento mov "
                                                        +" where mov.partidaExterna.pedido.idPedido="+t_pedido.getText()
                                                        +" AND mov.partidaExterna.idPartidaExterna="+t_datos.getValueAt(row, 0)
                                                        +" and mov.almacen.tipoMovimiento=2"
                                                        +" and mov.almacen.operacion=6");
                                                Object  sal = query.uniqueResult();
                                                if(sal!=null)
                                                    salida=Double.parseDouble(sal.toString());
                                                double totalOperario=salida-entrada;
                                                if((double)value<= (double)t_datos.getValueAt(row, 5))
                                                {
                                                    vector.setElementAt(value, col);
                                                    dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                    sumaTotales();
                                                }
                                                else
                                                {
                                                    if(totalOperario>0)
                                                        JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 5).toString()+ t_datos.getValueAt(row, 3).toString() + " debido a que ya se entregaron al cliente " +totalOperario+ t_datos.getValueAt(row, 3).toString());
                                                    else
                                                        JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 5).toString()+t_datos.getValueAt(row, 3).toString());
                                                }
                                            }
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "El campo no permite números negativos"); 
                                        t_datos.setColumnSelectionInterval(col, col);
                                        t_datos.setRowSelectionInterval(row, row);
                                    }catch(Exception e)
                                    {
                                        System.out.println(e);
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                }
                            }
                            else
                            {
                                vector.setElementAt(value, col);
                                dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                            }
                            break;

                        case 7://Entrada operario y Salida Venta
                            if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0 && c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        if((double)value>=0)
                                        {
                                            if((double)value<=(double)t_datos.getValueAt(row, 6))
                                            {
                                                vector.setElementAt(value, col);
                                                dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                            }
                                            else
                                                JOptionPane.showMessageDialog(null, "La cantidad máxima por entregar es: "+t_datos.getValueAt(row, 6).toString()+t_datos.getValueAt(row, 5).toString());
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "El campo no permite números negativos");
                                        t_datos.setColumnSelectionInterval(col, col);
                                        t_datos.setRowSelectionInterval(row, row);
                                    }
                                    catch(Exception e)
                                    {
                                        System.out.println(e);
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                }
                            }
                            else
                            {
                                if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0 && c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                                {
                                    if((double)value>=0)
                                    {
                                        if((double)value<=(double)t_datos.getValueAt(row, 6))
                                        {
                                            vector.setElementAt(value, col);
                                            dataVector.setElementAt(vector, row);
                                            fireTableCellUpdated(row, col);
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "La cantidad máxima por entregar es: "+t_datos.getValueAt(row, 6).toString()+t_datos.getValueAt(row, 3).toString());
                                    }
                                    else
                                        JOptionPane.showMessageDialog(null, "El campo no permite números negativos");
                                }
                                else
                                {
                                    vector.setElementAt(value, col);
                                    dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                            }
                            break;

                        case 8://Pedido Interno(Ent, Sal), Pedido Adicional(Ent, Sal), Compañia(Ent, Sal) y Salida Operarios
                            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && (l_tipo_pedido.getText().compareTo("Interno")==0 || l_tipo_pedido.getText().compareTo("Adicional")==0))
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        if((double)value>=0)
                                        {
                                            if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                                            {
                                                if((double)value<=(double)t_datos.getValueAt(row, 7))
                                                {
                                                    vector.setElementAt(value, col);
                                                    dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                    sumaTotales();
                                                }
                                                else
                                                    JOptionPane.showMessageDialog(null, "La cantidad máxima por entrar es: "+t_datos.getValueAt(row, 7)+t_datos.getValueAt(row, 5).toString()); 
                                            }
                                            else
                                            {
                                                double entrada1=0.0, salida1=0.0;
                                                Query query = session.createQuery("SELECT sum(mov.cantidad) from Movimiento mov "
                                                        +" where mov.partida.pedido.idPedido="+t_pedido.getText()
                                                        +" AND mov.partida.idPartida="+t_datos.getValueAt(row, 0)
                                                        +" and mov.almacen.tipoMovimiento=1"
                                                        +" and mov.almacen.operacion=5");
                                                Object  ent = query.uniqueResult();
                                                if(ent!=null)
                                                    entrada1=Double.parseDouble(ent.toString());
                                                query = session.createQuery("SELECT sum(mov.cantidad) from Movimiento mov "
                                                        +" where mov.partida.pedido.idPedido="+t_pedido.getText()
                                                        +" AND mov.partida.idPartida="+t_datos.getValueAt(row, 0)
                                                        +" and mov.almacen.tipoMovimiento=2"
                                                        +" and mov.almacen.operacion=5");
                                                Object  sal = query.uniqueResult();
                                                if(sal!=null)
                                                    salida1=Double.parseDouble(sal.toString());
                                                double totalOperario=salida1-entrada1;
                                                if((double)value <= (double)t_datos.getValueAt(row, 7))
                                                {
                                                    vector.setElementAt(value, col);
                                                    dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                    sumaTotales();
                                                }
                                                else
                                                {
                                                    if(totalOperario>0)
                                                        JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 7).toString()+ t_datos.getValueAt(row, 5).toString() + " debido a que ya se entregaron al operario " +totalOperario+ t_datos.getValueAt(row, 5).toString());
                                                    else
                                                        JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 7).toString()+t_datos.getValueAt(row, 5).toString());
                                                }
                                            }
                                        }
                                        else
                                            JOptionPane.showMessageDialog(null, "El campo no permite números negativos"); 
                                        sumaTotales();
                                    }catch(Exception e)
                                    {
                                        System.out.println(e);
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                }
                            }
                            else
                            {
                                if(c_toperacion.getSelectedItem().toString().compareTo("Compañía")==0)
                                {
                                    if(vector.get(col)==null)
                                    {
                                        vector.setElementAt(value, col);
                                        dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                    {
                                        Session session = HibernateUtil.getSessionFactory().openSession();
                                        try
                                        {
                                            if((double)value>=0)
                                            {
                                                if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                                                {
                                                    if((double)value<=(double)t_datos.getValueAt(row, 7))
                                                    {
                                                        vector.setElementAt(value, col);
                                                        dataVector.setElementAt(vector, row);
                                                        fireTableCellUpdated(row, col);
                                                        sumaTotales();
                                                    }
                                                    else
                                                        JOptionPane.showMessageDialog(null, "La cantidad máxima por entrar es: "+t_datos.getValueAt(row, 7)+t_datos.getValueAt(row, 5).toString()); 
                                                }
                                                else
                                                {
                                                    double entrada1=0.0, salida1=0.0;
                                                    Query query = session.createQuery("SELECT sum(mov.cantidad) from Movimiento mov "
                                                            +" where mov.partida.ordenByIdOrden.idOrden="+t_orden.getText()
                                                            +" AND mov.partida.idPartida="+t_datos.getValueAt(row, 0)
                                                            +" and mov.almacen.tipoMovimiento=1"
                                                            +" and mov.almacen.operacion=5");
                                                    Object  ent = query.uniqueResult();
                                                    if(ent!=null)
                                                        entrada1=Double.parseDouble(ent.toString());
                                                    query = session.createQuery("SELECT sum(mov.cantidad) from Movimiento mov "
                                                            +" where mov.partida.ordenByIdOrden.idOrden="+t_orden.getText()
                                                            +" AND mov.partida.idPartida="+t_datos.getValueAt(row, 0)
                                                            +" and mov.almacen.tipoMovimiento=2"
                                                            +" and mov.almacen.operacion=5");
                                                    Object  sal = query.uniqueResult();
                                                    if(sal!=null)
                                                        salida1=Double.parseDouble(sal.toString());
                                                    double totalOperario=salida1-entrada1;
                                                    if((double)value<= (double)t_datos.getValueAt(row, 7))
                                                    {
                                                        vector.setElementAt(value, col);
                                                        dataVector.setElementAt(vector, row);
                                                        fireTableCellUpdated(row, col);
                                                        sumaTotales();
                                                    }
                                                    else
                                                    {
                                                        if(totalOperario>0)
                                                            JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 7).toString()+ t_datos.getValueAt(row, 5).toString() + " debido a que ya se entregaron al operario " +totalOperario+ t_datos.getValueAt(row, 5).toString());
                                                        else
                                                            JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 7).toString()+t_datos.getValueAt(row, 5).toString());
                                                    }
                                                }
                                            }
                                            else
                                                JOptionPane.showMessageDialog(null, "El campo no permite números negativos"); 
                                            sumaTotales();
                                        }catch(Exception e)
                                        {
                                            System.out.println(e);
                                        }
                                        if(session!=null)
                                            if(session.isOpen())
                                                session.close();
                                    }
                                }
                                else
                                {
                                    if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0 && c_tmovimiento.getSelectedItem().toString().compareTo("Salida")==0)
                                    {
                                        if(vector.get(col)==null)
                                        {
                                            vector.setElementAt(value, col);
                                            dataVector.setElementAt(vector, row);
                                            fireTableCellUpdated(row, col);
                                        }
                                        else
                                        {
                                            Session session = HibernateUtil.getSessionFactory().openSession();
                                            try
                                            {
                                                if((double)value>=0)
                                                {
                                                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                                                    {
                                                        if((double)value<=(double)t_datos.getValueAt(row, 6))
                                                        {
                                                            vector.setElementAt(value, col);
                                                            dataVector.setElementAt(vector, row);
                                                            fireTableCellUpdated(row, col);
                                                            sumaTotales();
                                                        }
                                                        else
                                                            JOptionPane.showMessageDialog(null, "La cantidad máxima por devolver es: "+t_datos.getValueAt(row, 6)+t_datos.getValueAt(row, 5).toString()); 
                                                    }
                                                    else
                                                    {
                                                        if((double)value<=(double)t_datos.getValueAt(row, 6))
                                                        {
                                                            vector.setElementAt(value, col);
                                                            dataVector.setElementAt(vector, row);
                                                            fireTableCellUpdated(row, col);
                                                            sumaTotales();
                                                        }
                                                        else
                                                            JOptionPane.showMessageDialog(null, "La cantidad máxima a entregar es: "+t_datos.getValueAt(row, 6)+t_datos.getValueAt(row, 5).toString()); 
                                                    }
                                                }
                                                else
                                                    JOptionPane.showMessageDialog(null, "El campo no permite números negativos"); 
                                                sumaTotales();
                                            }catch(Exception e)
                                            {
                                                System.out.println(e);
                                            }
                                            if(session!=null)
                                                if(session.isOpen())
                                                    session.close();
                                        }
                                    }
                                    else
                                    {
                                        vector.setElementAt(value, col);
                                        dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                    }
                                }
                            }
                            break;

                    default:
                        vector.setElementAt(value, col);
                        dataVector.setElementAt(vector, row);
                        fireTableCellUpdated(row, col);
                        break;
                }
            }
        }
        public Class getColumnClass(int columnIndex) 
        {
            return types [columnIndex];
        }
        public boolean isCellEditable(int rowIndex, int columnIndex) 
        {
            List aux=(List)celdaEditable.get(rowIndex);
            return (boolean)aux.get(columnIndex);
        }
        @Override
        public void removeRow(int row) 
        {
            dataVector.remove(row);
            celdaEditable.remove(row);
            fireTableRowsDeleted(row, row);
            ren=ren-1;
        }
        @Override 
        public void addRow(Object[] vec) 
        {
            insertRow(getRowCount(), vec);
        }
        @Override
        public void insertRow(int row, Object[] rowData) {
            Vector vector=new Vector();
            for(int x=0; x<rowData.length; x++)
                vector.add(rowData[x]);
            dataVector.insertElementAt(vector, row);
            List aux=new ArrayList();
            for(int x=0; x<rowData.length; x++)
                aux.add(false);
            celdaEditable.add(ren, aux);
            fireTableRowsInserted(row, row);
            ren=ren+1;
        }
        public void setCeldaEditable(int fila, int columna,  boolean editable)
        {
            List aux=(List)celdaEditable.get(fila);
            aux.set(columna, editable);
        }
        public void setColumnaEditable(int columna, boolean editable)
        {
            for(int i=0; i<celdaEditable.size(); i++)
            {
                List aux=(List)celdaEditable.get(i);
                aux.set(columna, editable);
            }
        }        
    }
    
    private int buscapartida(List partida)
    {
        int x=-1;
        for(int ren=0; ren<t_datos.getRowCount(); ren++)
        {
            if(t_datos.getValueAt(ren, 0).toString().compareTo(partida.get(0).toString())==0)
                x=ren;
        }
        return x;
    }
    
    private void limpiar_tabla(){
        for (int i = 0; i < t_datos.getRowCount(); i++) 
        {
            model.removeRow(i);
            i-=1;
        }
        b_mas.setEnabled(false);
        b_menos.setEnabled(false);
        formatoTabla();
    }
    
    private void borra_cajas()
    {
        if (c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
            l_er.setText("Entrego");
        else
            l_er.setText("Recibio");
        t_er.setText("");
        t_notas.setText("");
        t_fecha.setText("DD/MM/AAAA");
        t_tipo.setText("");
        t_marca.setText("");
        t_modelo.setText("");
        t_serie.setText("");
        t_compania.setText("");
        t_siniestro.setText("");
        t_asegurado.setText("");
        t_orden.setText("");
        t_pedido.setText("");
        t_nmovimiento.setText("");
        t_folio.setText("");
        t_nreferencia.setText("");
        this.l_tipo_pedido.setText("");
    }
    
    private void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
            TableColumn column = col_model.getColumn(i);
            switch(i)
            {
                case 0:
                    column.setPreferredWidth(10);
                    break;
                case 1:
                    if( (c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && l_tipo_pedido.getText().compareTo("Externo")==0) || (c_toperacion.getSelectedItem().toString().compareTo("Venta")==0) )
                        column.setPreferredWidth(100);
                    else
                        column.setPreferredWidth(10);
                    break;
                case 2:
                    if( (c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && l_tipo_pedido.getText().compareTo("Externo")==0) || (c_toperacion.getSelectedItem().toString().compareTo("Venta")==0) )
                        column.setPreferredWidth(350);
                    else
                        column.setPreferredWidth(10);
                    break;
                case 3:
                    if( (c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && l_tipo_pedido.getText().compareTo("Externo")==0) || (c_toperacion.getSelectedItem().toString().compareTo("Venta")==0) )
                        column.setPreferredWidth(20);
                    else
                    {
                        column.setPreferredWidth(100);
                        if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && l_tipo_pedido.getText().compareTo("Interno")==0)
                        {
                            //DefaultCellEditor miEditor = new DefaultCellEditor(codigo);
                            //miEditor.setClickCountToStart(2);
                            //column.setCellEditor(miEditor); 
                        }
                    }
                    break;
                case 4:               
                    if( (c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 && l_tipo_pedido.getText().compareTo("Externo")==0) || (c_toperacion.getSelectedItem().toString().compareTo("Venta")==0) )
                        column.setPreferredWidth(50);
                    else
                        column.setPreferredWidth(350);
                    break;
                case 5:               
                    column.setPreferredWidth(50);
                    break;
                case 6:               
                    column.setPreferredWidth(50);
                    break;
                case 7:               
                    column.setPreferredWidth(50);
                    break;
                case 8:               
                    column.setPreferredWidth(50);
                    break;
                default:
                    column.setPreferredWidth(50);
                    break; 
            }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setBackground(new java.awt.Color(90,66,126));
        header.setForeground(Color.white);
        sumaTotales();
    }        
    
    private boolean consultaLista(int columna)
    {
        for(int ren=0; ren<t_datos.getRowCount(); ren++)
        {
            if((double)t_datos.getValueAt(ren, columna)==0.00)
                return false;
        }
        return true;
    } 
    
    private boolean salidaOperarios()
    {
        for(int ren=0; ren<t_datos.getRowCount(); ren++)
        {
            if((double)t_datos.getValueAt(ren, 7)+(double)t_datos.getValueAt(ren, 8)<=(int)t_datos.getValueAt(ren, 9))
                return true;
            else
            {
                t_user.setText("");
                t_contra.setText("");
                t_motivo.setText("");
                /*usrAut=null;
                Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                autoriza.setSize(380, 300);//284, 177
                autoriza.setLocation((d.width/2)-(autoriza.getWidth()/2), (d.height/2)-(autoriza.getHeight()/2));
                autoriza.setVisible(true);
                if(usrAut!=null)
                {*/
                    t_notas.setText(t_motivo.getText());
                    t_notas.setEnabled(false);
                    return true;
                /*}
                else
                    return false;*/
            }
        }
        return false;
    }
    
    private boolean autorizaOperarios()
    {
        for(int ren=0; ren<t_datos.getRowCount(); ren++)
        {
            if((boolean)t_datos.getValueAt(ren, 9)==false)
            {
                JOptionPane.showMessageDialog(this, "La partida "+t_datos.getValueAt(ren, 1).toString()+" no esta autorizada por operaciones para ser entregada aun");
                return false;
            }
        }
        return true;
    }
    
    private boolean autorizaOperarios1()
    {
        for(int ren=0; ren<t_datos.getRowCount(); ren++)
        {
            if((boolean)t_datos.getValueAt(ren, 11)==false)
            {
                JOptionPane.showMessageDialog(this, "La partida "+t_datos.getValueAt(ren, 1).toString()+" no esta autorizada por operaciones para ser recibida aun");
                return false;
            }
        }
        return true;
    }
    private Integer guardarAlmacen(Almacen obj) 
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Integer IdAlmacen = null;
        try 
        {
            session.beginTransaction().begin();
            pedido =(Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
            obj.setPedido(pedido);
            obj.setMovimientos(new HashSet(0));
            IdAlmacen=(Integer) session.save(obj);
            Almacen alm = (Almacen)session.get(Almacen.class, IdAlmacen);
            for(int ren=0; ren<t_datos.getRowCount(); ren++)
            {
                Movimiento mov = new Movimiento();
                mov.setAlmacen(alm);
                if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0)
                {
                    if(l_tipo_pedido.getText().compareTo("Interno")==0 || l_tipo_pedido.getText().compareTo("Adicional")==0)
                        mov.setCantidad((double)t_datos.getValueAt(ren, 8));
                    else
                        mov.setCantidad((double)t_datos.getValueAt(ren, 6));
                }
                if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
                {
                    if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                        mov.setCantidad((double)t_datos.getValueAt(ren, 5));
                    else
                        mov.setCantidad((double)t_datos.getValueAt(ren, 7));
                }
                if(l_tipo_pedido.getText().compareTo("Interno")==0)// || l_tipo_pedido.getText().compareTo("Adicional")==0)
                {
                    Partida part=(Partida)session.get(Partida.class, (Integer)t_datos.getValueAt(ren, 0));
                    mov.setPartida(part);
                }
                else
                {
                    PartidaExterna part=(PartidaExterna)session.get(PartidaExterna.class, (Integer)t_datos.getValueAt(ren, 0));
                    mov.setPartidaExterna(part);
                }
                
                alm.addMovimiento(mov);
            }
            session.update(alm);
            session.beginTransaction().commit();
            t_nmovimiento.setText(alm.getIdAlmacen().toString());
            t_fecha.setText(alm.getFecha().toLocaleString());
            t_notas.setText(alm.getNotas());
            t_pedido.setText(alm.getPedido().getIdPedido().toString());
        } 
        catch (HibernateException he) 
        {
            he.printStackTrace();
            session.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "¡Error al guardar!"); 
            IdAlmacen = null;
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
            return IdAlmacen;
        }   
    }    
    
    private Integer guardarAlmacenOrden(Almacen obj) 
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Integer IdAlmacen = null;
        try 
        {
            session.beginTransaction().begin();
            orden_act =(Orden)session.get(Orden.class, orden_act.getIdOrden());
            obj.setMovimientos(new HashSet(0));
            IdAlmacen=(Integer) session.save(obj);
            Almacen alm = (Almacen)session.get(Almacen.class, IdAlmacen);
            for(int ren=0; ren<t_datos.getRowCount(); ren++)
            {
                Partida part=null;
                PartidaExterna parEx=null;
                Movimiento mov = new Movimiento();
                mov.setAlmacen(alm);
                if(c_toperacion.getSelectedItem().toString().compareTo("Compañía")==0)
                {
                    mov.setCantidad((double)t_datos.getValueAt(ren, 8));
                    part=(Partida)session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(t_orden.getText()))).add(Restrictions.eq("idPartida", Integer.parseInt(t_datos.getValueAt(ren, 0).toString()))).setMaxResults(1).uniqueResult();
                }
                if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0 && c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
                    mov.setCantidad((double)t_datos.getValueAt(ren, 7));
                else
                    mov.setCantidad((double)t_datos.getValueAt(ren, 8));
                if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0)
                {
                    if(t_datos.getValueAt(ren, 2).toString().compareTo("PED.")==0 || t_datos.getValueAt(ren, 2).toString().compareTo("COM.")==0)
                        part=(Partida)session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(t_orden.getText()))).add(Restrictions.eq("idPartida", Integer.parseInt(t_datos.getValueAt(ren, 0).toString()))).setMaxResults(1).uniqueResult();
                    if(t_datos.getValueAt(ren, 2).toString().compareTo("ADI.")==0)
                        parEx=(PartidaExterna)session.get(PartidaExterna.class, Integer.parseInt(t_datos.getValueAt(ren, 0).toString()));
                }
                mov.setPartida(part);
                mov.setPartidaExterna(parEx);
                alm.setNotas(t_notas.getText());
                alm.addMovimiento(mov);
            }
            session.update(alm);
            session.beginTransaction().commit();
            t_nmovimiento.setText(alm.getIdAlmacen().toString());
            t_fecha.setText(alm.getFecha().toLocaleString());
            t_notas.setText(alm.getNotas());
        } 
        catch (HibernateException he) 
        {
            he.printStackTrace();
            session.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "¡Error al guardar!"); 
            IdAlmacen = null;
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
            return IdAlmacen;
        }
    }  
    
    public void sumaTotales()
    {
        double subtotal=0.0d, iva;        
        if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0)
        {
            if(l_tipo_pedido.getText().compareTo("Interno")==0 || l_tipo_pedido.getText().compareTo("Adicional")==0)
            {
                for(int ren=0; ren<t_datos.getRowCount(); ren++)
                {
                    double multi= Double.parseDouble(String.valueOf(t_datos.getValueAt(ren,8)))*Double.parseDouble(String.valueOf(t_datos.getValueAt(ren,9)));
                    t_datos.setValueAt(multi,ren,10);
                    subtotal+=multi;
                }
            }
            if(l_tipo_pedido.getText().compareTo("Externo")==0)
            {
                for(int ren=0; ren<t_datos.getRowCount(); ren++)
                {
                    double multi= Double.parseDouble(String.valueOf(t_datos.getValueAt(ren,6)))*Double.parseDouble(String.valueOf(t_datos.getValueAt(ren,7)));
                    t_datos.setValueAt(multi,ren,8);
                    subtotal+=multi;
                }
            }
            
        }
        t_subtotal.setValue(subtotal);
        Session session = HibernateUtil.getSessionFactory().openSession();
        Configuracion con = (Configuracion)session.get(Configuracion.class, 1);
        t_IVA.setValue(iva=subtotal*con.getIva()/100);
        t_total.setValue(subtotal+iva);
        if(session.isOpen())
            session.close();
    }
    
    public void estado(boolean guardar, boolean mas, boolean menos, boolean notas, boolean datos, boolean tmovimiento, boolean toperacion, boolean er, boolean buscao, boolean buscap, boolean recargar)
    {
        b_guardar.setEnabled(guardar);
        b_mas.setEnabled(mas);
        b_menos.setEnabled(menos);
        t_notas.setEnabled(notas);
        t_datos.setEnabled(datos);
        c_tmovimiento.setEnabled(tmovimiento);
        c_toperacion.setEnabled(toperacion);
        t_er.setEnabled(er);
        b_buscaorden.setEnabled(buscao);
        b_buscapedido.setEnabled(buscap);
        b_recargar.setEnabled(recargar);
    }
    public void operacion(boolean buscap, boolean nreferencia, boolean buscao, boolean folio, boolean lsubtotal, boolean tsubtotal, boolean liva, boolean tiva, boolean ltotal, boolean ttotal)
    {
        b_buscapedido.setEnabled(buscap);
        t_nreferencia.setEditable(nreferencia);
        b_buscaorden.setEnabled(buscao);
        if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0)
        {
            
            f1.setEnabled(buscao);
            f2.setEnabled(buscao);
            f3.setEnabled(buscao);
            f4.setEnabled(buscao);
            f5.setEnabled(buscao);
            f5.setSelected(true);
        }
        else
        {
            f1.setEnabled(false);
            f2.setEnabled(false);
            f3.setEnabled(false);
            f4.setEnabled(false);
            f5.setEnabled(false);
            f5.setSelected(true);
        }
            
        t_folio.setEnabled(folio);
        r1.setEnabled(folio);
        r2.setEnabled(folio);
        l_subtotal.setVisible(lsubtotal);
        t_subtotal.setVisible(tsubtotal);
        l_iva.setVisible(liva);
        t_IVA.setVisible(tiva);
        l_total.setVisible(ltotal);
        t_total.setVisible(ttotal);
    }
    public void titulos()
    {
        if(c_tmovimiento.getSelectedItem().toString().compareTo("Entrada")==0)
        {
            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 || c_toperacion.getSelectedItem().toString().compareTo("Pedido Externo")==0 || c_toperacion.getSelectedItem().toString().compareTo("Compañía")==0)
                miTitulo="Movimientos de Almacén (Entrada de material de proveedor)";
            if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0)
                miTitulo="Movimientos de Almacén (Devolución de material de operarios)";
            if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
                miTitulo="Movimientos de Almacén (Devolución de ventas)";
        }
        else
        {
            if(c_toperacion.getSelectedItem().toString().compareTo("Pedido")==0 || c_toperacion.getSelectedItem().toString().compareTo("Pedido Externo")==0 || c_toperacion.getSelectedItem().toString().compareTo("Compañía")==0)
                miTitulo="Movimientos de Almacén (Devolución de material a proveedor)";
            if(c_toperacion.getSelectedItem().toString().compareTo("Operarios")==0)
                miTitulo="Movimientos de Almacén (Entrega de material a operarios)";
            if(c_toperacion.getSelectedItem().toString().compareTo("Venta")==0)
                miTitulo="Movimientos de Almacén (Entrega de ventas)";
        }
        jPanelMalmacen.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), miTitulo, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
    }
    void autorizaInterno()
    {
        /*Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            Object []valores;
            List aux=new ArrayList();
            for(int x=0; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 1).toString().compareTo("0")!=0)
                {
                    aux.add(t_datos.getValueAt(x, 0));
                }
            }
            session.beginTransaction();
            Criteria consulta=session.createCriteria(Partida.class);
            if(aux.size()>0)
                consulta.add(Restrictions.in("idPartida", aux));
            consulta.add(Restrictions.eq("op", false));
            Factura[] facturas = (Factura[])consulta.list().toArray(new Factura[0]);
            model=(DefaultTableModel)t_datos.getModel();
            if(facturas.length>0)
            {
                
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        if(session!=null)
            if(session.isOpen())
                session.close();*/
    }
}