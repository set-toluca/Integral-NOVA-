/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Empleados;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Empleado;
import Hibernate.entidades.Puestos;
import Hibernate.entidades.Usuario;
import Integral.ExtensionFileFilter;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import Integral.FormatoTabla;
import Integral.Herramientas;
import Integral.Render1;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author I.S.C Salvador
 */
public class modificaEmpleado extends javax.swing.JPanel {

    /**
     * Creates new form modificaEmpleado
     */
    private Usuario user;
    int[] puestos;
    private Session session;
    private Empleado actor;
    DefaultTableModel model;
    Puestos puesto;
    String[] columnas = new String [] {"Id","Nombre","Dirección","Teléfono","Puesto","Email","F.Pago","Importe"};
    FormatoTabla formato;
    Herramientas h;
    String sessionPrograma="";
    int x=0;
    
    public modificaEmpleado(Usuario actor, String ses) {
        initComponents();
        formato = new FormatoTabla();
        cargaPuestos();
        user=actor;
        sessionPrograma=ses;
        buscaDato();
    }

    DefaultTableModel ModeloTablaReporte(int renglones, String columnas[])
    {
        model = new DefaultTableModel(new Object [renglones][8], columnas)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class,
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false,false,false,false,false,false,false,false
            };
            
            public void setValueAt(Object value, int row, int col)
            {
                Vector vector = (Vector)this.dataVector.elementAt(row);
                Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                switch(col)
                {
                    case 0:
                        vector.setElementAt(value, col);
                        this.dataVector.setElementAt(vector, row);
                        fireTableCellUpdated(row, col);
                        break;
                    default:
                        vector.setElementAt(value, col);
                        this.dataVector.setElementAt(vector, row);
                        fireTableCellUpdated(row, col);
                        break;
                }
            }
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];                 
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        return model;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        t_nombre = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        t_direccion = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        t_email = new javax.swing.JTextField();
        t_telefono = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        c_puesto = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        c_pago = new javax.swing.JComboBox();
        t_importe = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        b_guardar = new javax.swing.JButton();
        b_cancelar = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        t_numero = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        Eliminar = new javax.swing.JButton();
        bt_actualiza = new javax.swing.JButton();
        Selecciona = new javax.swing.JButton();
        Selecciona1 = new javax.swing.JButton();
        bt_actualiza2 = new javax.swing.JButton();
        b_busca = new javax.swing.JButton();
        t_busca = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Edita de Empleados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 0, 255));
        jLabel8.setText("Nombre:");

        t_nombre.setBackground(new java.awt.Color(204, 255, 255));
        t_nombre.setEnabled(false);
        t_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_nombreActionPerformed(evt);
            }
        });
        t_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_nombreKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 0, 255));
        jLabel9.setText("Dirección:");

        t_direccion.setBackground(new java.awt.Color(204, 255, 255));
        t_direccion.setEnabled(false);
        t_direccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_direccionActionPerformed(evt);
            }
        });
        t_direccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_direccionKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Tel:");

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("email:");

        t_email.setBackground(new java.awt.Color(204, 255, 255));
        t_email.setEnabled(false);
        t_email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_emailActionPerformed(evt);
            }
        });
        t_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_emailKeyTyped(evt);
            }
        });

        t_telefono.setBackground(new java.awt.Color(204, 255, 255));
        t_telefono.setEnabled(false);
        t_telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_telefonoActionPerformed(evt);
            }
        });
        t_telefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_telefonoKeyTyped(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 0, 255));
        jLabel17.setText("Puesto:");

        c_puesto.setEnabled(false);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText("F. Pago");

        c_pago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Día", "Hora", "Comision", "Semana", "Catorcena", "Quincena", "Mes" }));
        c_pago.setEnabled(false);

        t_importe.setBackground(new java.awt.Color(204, 255, 255));
        t_importe.setEnabled(false);
        t_importe.setNextFocusableComponent(b_guardar);
        t_importe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_importeFocusLost(evt);
            }
        });
        t_importe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_importeActionPerformed(evt);
            }
        });
        t_importe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_importeKeyTyped(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 0, 255));
        jLabel19.setText("Importe:");

        b_guardar.setBackground(new java.awt.Color(2, 135, 242));
        b_guardar.setForeground(new java.awt.Color(255, 255, 255));
        b_guardar.setIcon(new ImageIcon("imagenes/guardar.png"));
        b_guardar.setText("Actualizar");
        b_guardar.setToolTipText("Actualizar registro actual");
        b_guardar.setEnabled(false);
        b_guardar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        b_guardar.setNextFocusableComponent(b_cancelar);
        b_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_guardarActionPerformed(evt);
            }
        });

        b_cancelar.setBackground(new java.awt.Color(2, 135, 242));
        b_cancelar.setForeground(new java.awt.Color(255, 255, 255));
        b_cancelar.setIcon(new ImageIcon("imagenes/cancelar.png"));
        b_cancelar.setText("Cancelar");
        b_cancelar.setToolTipText("Cancelar registro actual");
        b_cancelar.setEnabled(false);
        b_cancelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        b_cancelar.setNextFocusableComponent(t_nombre);
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel20.setText("No:");

        t_numero.setBackground(new java.awt.Color(204, 255, 255));
        t_numero.setEnabled(false);
        t_numero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_numeroActionPerformed(evt);
            }
        });
        t_numero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_numeroKeyTyped(evt);
            }
        });

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Dirección", "Teléfono", "Puesto", "Email", "F.Pago", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t_datos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        t_datos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(t_datos);

        Eliminar.setBackground(new java.awt.Color(2, 135, 242));
        Eliminar.setForeground(new java.awt.Color(255, 255, 255));
        Eliminar.setIcon(new ImageIcon("imagenes/del-user.png"));
        Eliminar.setText("Eliminar");
        Eliminar.setToolTipText("Eliminar el registro actual");
        Eliminar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        bt_actualiza.setBackground(new java.awt.Color(2, 135, 242));
        bt_actualiza.setForeground(new java.awt.Color(255, 255, 255));
        bt_actualiza.setIcon(new ImageIcon("imagenes/tabla.png"));
        bt_actualiza.setText("Actualizar");
        bt_actualiza.setToolTipText("Actualizar los datos de la tabla");
        bt_actualiza.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bt_actualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_actualizaActionPerformed(evt);
            }
        });

        Selecciona.setBackground(new java.awt.Color(2, 135, 242));
        Selecciona.setForeground(new java.awt.Color(255, 255, 255));
        Selecciona.setIcon(new ImageIcon("imagenes/update-user.png"));
        Selecciona.setText("Seleccionar");
        Selecciona.setToolTipText("Seleccionar un registro de la tabla para editar");
        Selecciona.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Selecciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionaActionPerformed(evt);
            }
        });

        Selecciona1.setBackground(new java.awt.Color(2, 135, 242));
        Selecciona1.setForeground(new java.awt.Color(255, 255, 255));
        Selecciona1.setIcon(new ImageIcon("imagenes/add-user.png"));
        Selecciona1.setText("Nuevo");
        Selecciona1.setToolTipText("Agregar un registo actual");
        Selecciona1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Selecciona1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Selecciona1ActionPerformed(evt);
            }
        });

        bt_actualiza2.setBackground(new java.awt.Color(2, 135, 242));
        bt_actualiza2.setForeground(new java.awt.Color(254, 254, 254));
        bt_actualiza2.setIcon(new ImageIcon("imagenes/guardar-documento.png"));
        bt_actualiza2.setText("Exportar");
        bt_actualiza2.setToolTipText("Actualizar los datos de la tabla");
        bt_actualiza2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bt_actualiza2.setMaximumSize(new java.awt.Dimension(87, 23));
        bt_actualiza2.setMinimumSize(new java.awt.Dimension(87, 23));
        bt_actualiza2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_actualiza2ActionPerformed(evt);
            }
        });

        b_busca.setIcon(new ImageIcon("imagenes/buscar1.png"));
        b_busca.setToolTipText("Busca una partida");
        b_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscaActionPerformed(evt);
            }
        });

        t_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_buscaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addComponent(t_numero, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(b_cancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_guardar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel15))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(t_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(c_pago, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel19)
                                        .addGap(14, 14, 14)
                                        .addComponent(t_importe, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(t_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                                            .addComponent(t_direccion))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel17)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(44, 44, 44)
                                                    .addComponent(c_puesto, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(t_email, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(t_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bt_actualiza2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bt_actualiza)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Selecciona)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Eliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Selecciona1))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane1)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Selecciona, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bt_actualiza, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Selecciona1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bt_actualiza2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(t_busca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(c_puesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_importe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(c_pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void t_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_nombreActionPerformed
        t_direccion.requestFocus();
    }//GEN-LAST:event_t_nombreActionPerformed

    private void t_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_nombreKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_nombre.getText().length()>=250)
            evt.consume();
    }//GEN-LAST:event_t_nombreKeyTyped

    private void t_direccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_direccionActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_t_direccionActionPerformed

    private void t_direccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_direccionKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        char car = evt.getKeyChar();
        if(t_direccion.getText().length()>=300)
        evt.consume();
    }//GEN-LAST:event_t_direccionKeyTyped

    private void t_emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_emailActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_t_emailActionPerformed

    private void t_emailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_emailKeyTyped
        char car = evt.getKeyChar();
        if(t_email.getText().length()>=100)
        evt.consume();
    }//GEN-LAST:event_t_emailKeyTyped

    private void t_telefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_telefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_telefonoActionPerformed

    private void t_telefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_telefonoKeyTyped
        char car = evt.getKeyChar();
        if(t_telefono.getText().length()>=13)
            evt.consume();
        if((car<'0' || car>'9'))
            evt.consume();
    }//GEN-LAST:event_t_telefonoKeyTyped

    private void t_importeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_importeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_importeActionPerformed

    private void t_importeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_importeFocusLost
        if(t_importe.getText().compareTo("")!=0)
        {
            try{
                Float numero = Float.parseFloat(t_importe.getText()); // convirtiendo la cadena
                t_importe.setText(""+numero);
            }catch(NumberFormatException e){
                javax.swing.JOptionPane.showMessageDialog(null, "El valor ingresado no es valido, verifique");
                t_importe.requestFocus();
            }
        }
    }//GEN-LAST:event_t_importeFocusLost

    private void t_importeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_importeKeyTyped
        char car = evt.getKeyChar();
        if((car<'0' && car!='.') || (car>'9' && car!='.'))
            evt.consume();
    }//GEN-LAST:event_t_importeKeyTyped

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        int opt=JOptionPane.showConfirmDialog(this, "¡Los datos capturados se eliminaran!");
        if(opt==0)
        {
            borra_cajas();
            cajas(false, false, false, false, false, false, false, false, false, false);
        }
    }//GEN-LAST:event_b_cancelarActionPerformed

    private void b_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_guardarActionPerformed
        h=new Herramientas(this.user, 0);
        h.session(sessionPrograma);        
        if(t_nombre.getText().compareTo("")!=0)
        {
            if(t_direccion.getText().compareTo("")!=0)
            {
                if(this.c_puesto.getItemCount()>0)
                {
                    if(this.t_importe.getText().compareTo("")!=0)
                    {
                         try 
                        {
                            List <Object[]> resultList=executeHQLQuery("from Empleado obj where obj.nombre='"+this.t_nombre.getText()+"'");
                            int bandera=0;
                            if(resultList.size()>0)
                            {
                                for (Object o : resultList)
                                {
                                    Empleado aux = (Empleado) o;
                                    if(aux.getIdEmpleado()!=Integer.parseInt(t_numero.getText()))
                                        bandera=1;
                                }
                            }
                            //session.close();
                            session = HibernateUtil.getSessionFactory().openSession();
                            session.beginTransaction();
                            actor = (Empleado)session.get(Empleado.class, Integer.parseInt(t_numero.getText()));
                            
                            if(bandera==0)
                            {
                                actor.setNombre(t_nombre.getText());
                                actor.setDireccion(t_direccion.getText());
                                if(t_telefono.getText().compareTo("")!=0)
                                    actor.setTelefono(t_telefono.getText());
                                else
                                    actor.setTelefono(null);
                                if(t_email.getText().compareTo("")!=0)
                                    actor.setEmail(t_email.getText());
                                else
                                    actor.setEmail(null);
                                
                                puesto = (Puestos)session.get(Puestos.class, this.puestos[c_puesto.getSelectedIndex()]);
                                actor.setPuestos(puesto);
                                actor.setFomaPago(this.c_pago.getSelectedIndex());
                                actor.setImporte(Double.parseDouble(t_importe.getText()));
                                session.update(actor);
                                session.getTransaction().commit();
                                borra_cajas();
                                cargaPuestos();
                                buscaDato();
                                cajas(false, false, false, false, false, false, false, false, false, false);
                                JOptionPane.showMessageDialog(null, "Registro Actualizado");
                            }
                            else
                            {
                                session.getTransaction().rollback();
                                session.close(); 
                                JOptionPane.showMessageDialog(null, "Ya existe un empleado con el mismo nombre");
                            }
                        }
                        catch (HibernateException he) 
                        {
                            he.printStackTrace();
                            session.getTransaction().rollback();
                            session.close(); 
                            JOptionPane.showMessageDialog(null, "Error al guardar");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "¡Debe introducir el importe a pagar!");
                        t_importe.requestFocus();
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Debe dar de alta primero puestos!");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡Debe introducir la direción del empleado!");
                t_direccion.requestFocus();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "¡Debe introducir el nombre del empleado!");
            t_nombre.requestFocus();
        }
    }//GEN-LAST:event_b_guardarActionPerformed

    private void t_numeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_numeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_numeroActionPerformed

    private void t_numeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_numeroKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_t_numeroKeyTyped

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        h=new Herramientas(this.user, 0);
        h.session(sessionPrograma);
        session = HibernateUtil.getSessionFactory().openSession();
        user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
        if(user.getEditaEmpleados()==true)
        {
            if(this.t_datos.getSelectedRow()>=0)
            {
                int opt=JOptionPane.showConfirmDialog(this, "¡Los datos capturados se eliminarán!");
                if (JOptionPane.YES_OPTION == opt)
                {
                    Integer id = (Integer) t_datos.getValueAt(t_datos.getSelectedRow(), 0);
                    DefaultTableModel model = (DefaultTableModel) t_datos.getModel();
                    boolean respuesta=elimina(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString());
                    if(respuesta==true)
                    {
                        model.removeRow(t_datos.getSelectedRow());
                        this.borra_cajas();
                        this.cajas(false, false, false, false, false, false, false, false, false, false);
                        JOptionPane.showMessageDialog(null, "El Cliente ha sido eliminado");
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Selecciona el Empleado que desees eliminar");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
        }
    }//GEN-LAST:event_EliminarActionPerformed

    private void bt_actualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_actualizaActionPerformed
        h=new Herramientas(this.user, 0);
        h.session(sessionPrograma);
        borra_cajas();
        cajas(false, false, false, false, false, false, false, false, false, false);
        buscaDato();
    }//GEN-LAST:event_bt_actualizaActionPerformed

    private void SeleccionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionaActionPerformed
        h=new Herramientas(this.user, 0);
        h.session(sessionPrograma);
        session = HibernateUtil.getSessionFactory().openSession();
        user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
        if(user.getEditaEmpleados()==true)
        {
            if(t_datos.getSelectedRow()>=0)
            {
                borra_cajas();
                cargaPuestos();
                this.t_numero.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString());
                this.t_nombre.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 1).toString());
                this.t_direccion.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString());
                this.t_telefono.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 3).toString());
                this.c_puesto.setSelectedItem(t_datos.getValueAt(t_datos.getSelectedRow(), 4).toString());
                this.t_email.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 5).toString());
                this.c_pago.setSelectedItem(t_datos.getValueAt(t_datos.getSelectedRow(), 6).toString());
                this.t_importe.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 7).toString());
                this.cajas(false, true, true, true, true, true, true, true, true, true);
            }
            else
                JOptionPane.showMessageDialog(null, "¡No hay un Empleado seleccionado!");
        }
        else
            JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
                
    }//GEN-LAST:event_SeleccionaActionPerformed

    private void Selecciona1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Selecciona1ActionPerformed
        h=new Herramientas(this.user, 0);
        h.session(sessionPrograma);
        session = HibernateUtil.getSessionFactory().openSession();
        user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
        if(user.getEditaEmpleados()==true)
        {
            altaEmpleado obj = new altaEmpleado(new javax.swing.JFrame(), true, this.user);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
            obj.setVisible(true);
            borra_cajas();
            cajas(false, false, false, false, false, false, false, false, false, false);
            buscaDato();
        }
        else
            JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
    }//GEN-LAST:event_Selecciona1ActionPerformed

    private void bt_actualiza2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_actualiza2ActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser jF1= new javax.swing.JFileChooser();
        jF1.setFileFilter(new ExtensionFileFilter("Excel document (*.xls)", new String[] { "xls" }));
        String ruta = null;
        if(jF1.showSaveDialog(null)==jF1.APPROVE_OPTION)
        {
            ruta = jF1.getSelectedFile().getAbsolutePath();
            if(ruta!=null)
            {
                File archivoXLS = new File(ruta+".xls");
                try
                {
                    if(archivoXLS.exists())
                    archivoXLS.delete();
                    archivoXLS.createNewFile();
                    Workbook libro = new HSSFWorkbook();
                    FileOutputStream archivo = new FileOutputStream(archivoXLS);
                    Sheet hoja = libro.createSheet("Clientes");
                    for(int ren=0;ren<(t_datos.getRowCount()+1);ren++)
                    {
                        Row fila = hoja.createRow(ren);
                        for(int col=0; col<t_datos.getColumnCount(); col++)
                        {
                            Cell celda = fila.createCell(col);
                            if(ren==0)
                            {
                                celda.setCellValue(columnas[col]);
                            }
                            else
                            {
                                try
                                {
                                    celda.setCellValue(t_datos.getValueAt(ren-1, col).toString());
                                }catch(Exception e)
                                {
                                    celda.setCellValue("");
                                }
                            }
                        }
                    }
                    libro.write(archivo);
                    archivo.close();
                    Desktop.getDesktop().open(archivoXLS);
                }catch(Exception e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(this, "No se pudo realizar el reporte");
                }
            }
        }
    }//GEN-LAST:event_bt_actualiza2ActionPerformed

    private void b_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscaActionPerformed
        // TODO add your handling code here:
        if(this.t_busca.getText().compareToIgnoreCase("")!=0)
        {
            //buscaCuentas();
            if(x>=t_datos.getRowCount())
            {
                x=0;
                java.awt.Rectangle r = t_datos.getCellRect( x, 1, true);
                t_datos.scrollRectToVisible(r);
            }
            for(; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 1).toString().indexOf(t_busca.getText().toUpperCase()) != -1)
                {
                    t_datos.setRowSelectionInterval(x, x);
                    t_datos.setColumnSelectionInterval(1, 1);
                    java.awt.Rectangle r = t_datos.getCellRect( x, 1, true);
                    t_datos.scrollRectToVisible(r);
                    break;
                }
            }
            x++;
        }
    }//GEN-LAST:event_b_buscaActionPerformed

    private void t_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_buscaActionPerformed
        // TODO add your handling code here:
        if(this.t_busca.getText().compareToIgnoreCase("")!=0)
        {
            //buscaCuentas();
            if(x>=t_datos.getRowCount())
            {
                x=0;
                java.awt.Rectangle r = t_datos.getCellRect( x, 1, true);
                t_datos.scrollRectToVisible(r);
            }
            for(; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 1).toString().indexOf(t_busca.getText().toUpperCase()) != -1)
                {
                    t_datos.setRowSelectionInterval(x, x);
                    t_datos.setColumnSelectionInterval(1, 1);
                    java.awt.Rectangle r = t_datos.getCellRect( x, 1, true);
                    t_datos.scrollRectToVisible(r);
                    break;
                }
            }
            x++;
        }
    }//GEN-LAST:event_t_buscaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Selecciona;
    private javax.swing.JButton Selecciona1;
    private javax.swing.JButton b_busca;
    private javax.swing.JButton b_cancelar;
    private javax.swing.JButton b_guardar;
    private javax.swing.JButton bt_actualiza;
    private javax.swing.JButton bt_actualiza2;
    public javax.swing.JComboBox c_pago;
    public javax.swing.JComboBox c_puesto;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField t_busca;
    private javax.swing.JTable t_datos;
    public javax.swing.JTextField t_direccion;
    public javax.swing.JTextField t_email;
    public javax.swing.JTextField t_importe;
    public javax.swing.JTextField t_nombre;
    public javax.swing.JTextField t_numero;
    public javax.swing.JTextField t_telefono;
    // End of variables declaration//GEN-END:variables

public void cargaPuestos()
    {
        List <Object[]> resultList=executeHQLQuery("from Puestos");
        if(resultList.size()>0)
        {
            c_puesto.removeAllItems();
            puestos= new int [resultList.size()];
            int x=0;
            for (Object o : resultList)
            {
                puesto = (Puestos) o;
                c_puesto.addItem(puesto.getNombre());
                puestos[x]=puesto.getIdPuestos();
                x++;
            }
        }
        session.close();
    }


    private void borra_cajas()
    {
        this.t_numero.setText("");
        this.t_nombre.setText("");
        this.t_direccion.setText("");
        this.t_telefono.setText("");
        this.t_email.setText("");
        this.t_importe.setText("");
    }

    private void cajas(boolean numero, boolean nombre, boolean direccion, boolean telefono, boolean email, boolean importe, boolean cancelar, boolean guardar, boolean pago, boolean puesto)
    {
        this.t_numero.setEnabled(numero);
        this.t_nombre.setEnabled(nombre);
        this.t_direccion.setEnabled(direccion);
        this.t_telefono.setEnabled(telefono);
        this.t_email.setEnabled(email);
        this.t_importe.setEnabled(importe);
        this.c_pago.setEnabled(pago);
        this.c_puesto.setEnabled(puesto);
        this.b_cancelar.setEnabled(cancelar);
        this.b_guardar.setEnabled(guardar);
    }
    
    private List<Object[]> executeHQLQuery(String hql) {
        session = HibernateUtil.getSessionFactory().openSession();
        try {
            session.beginTransaction();
            Query q = session.createQuery(hql);
            List resultList = q.list();
            session.getTransaction().commit();
            //session.disconnect();
            return resultList;
        } catch (HibernateException he) {
            he.printStackTrace();
            List lista= null;//new List(5);
            return lista;
        }
    }
    
    private boolean elimina(String idEmpleado)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction();
            actor = (Empleado)session.get(Empleado.class, Integer.parseInt(idEmpleado));
            
            if(
                    actor.getOrdensForRCotiza().isEmpty()==false || 
                    actor.getOrdensForRExpediente().isEmpty()==false || 
                    actor.getOrdensForRLevantamiento().isEmpty()==false || 
                    actor.getOrdensForRRefacciones().isEmpty()==false || 
                    actor.getOrdensForRHojalateria().isEmpty()==false || 
                    actor.getOrdensForRMecanica().isEmpty()==false || 
                    actor.getOrdensForRSuspension().isEmpty()==false || 
                    actor.getOrdensForRElectrico().isEmpty()==false || 
                    actor.getOrdensForRValuacion().isEmpty()==false || 
                    actor.getUsuarios().isEmpty()==false)
            {
                session.getTransaction().rollback();
                JOptionPane.showMessageDialog(null, "¡El Empleado esta en uso en una orden no se puede eliminar!");
                return false;
            }
            else
            {
                session.delete(actor);
                session.getTransaction().commit();
                return true;
            }
        }catch(Exception e)
        {
            e.printStackTrace();
            session.getTransaction().rollback();
            return false;
        }
        finally
        {
            session.close();
        }
    }
    
    private void buscaDato()
    {
        String consulta="from Empleado";
        List <Object[]> resultList=executeHQLQuery(consulta);
        if(resultList.size()>0)
        {
            t_datos.setModel(ModeloTablaReporte(resultList.size(), columnas));
            int i=0;
            for (Object o : resultList)
            {
                actor = (Empleado) o;
                model.setValueAt(actor.getIdEmpleado(), i, 0);
                model.setValueAt(actor.getNombre(), i, 1);
                model.setValueAt(actor.getDireccion(), i, 2);
                if(actor.getTelefono()!=null)
                    model.setValueAt(actor.getTelefono(), i, 3);
                else
                    model.setValueAt("", i, 3);
                model.setValueAt(actor.getPuestos().getNombre(), i, 4);
                if(actor.getEmail()!=null)
                    model.setValueAt(actor.getEmail(), i, 5);
                else
                    model.setValueAt("", i, 5);
                               
                switch(actor.getFomaPago())
                {
                    case 0:
                        model.setValueAt("Día", i, 6);
                        break;
                    case 1:
                        model.setValueAt("Hora", i, 6);
                        break;
                    case 2:
                        model.setValueAt("Comision", i, 6);
                        break;
                    case 3:
                        model.setValueAt("Semana", i, 6);
                        break;
                    case 4:
                        model.setValueAt("Catorcena", i, 6);
                        break;
                    case 5:
                        model.setValueAt("Quincena", i, 6);
                        break;
                    case 6:
                        model.setValueAt("Mes", i, 6);
                        break;
                }
                model.setValueAt(actor.getImporte(), i, 7);
                i++;
            }
        }
        else
            t_datos.setModel(ModeloTablaReporte(0, columnas));
        session.close();
        titulos();
    }
    
    public void titulos()
    {
        Color c1 = new java.awt.Color(2, 135, 242);
        for (int c=0; c<t_datos.getColumnCount(); c++)
            t_datos.getColumnModel().getColumn(c).setHeaderRenderer(new Render1(c1));
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        t_datos.setDefaultRenderer(String.class, formato); 
        t_datos.setDefaultRenderer(Double.class, formato); 
    }
}
