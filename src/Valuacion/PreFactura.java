/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Valuacion;

import Compras.Formatos;
import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Adicionales;
import Hibernate.entidades.Factura;
import Hibernate.entidades.Orden;
import Hibernate.entidades.Partida;
import Hibernate.entidades.Usuario;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import Integral.FormatoEditor;
import Integral.FormatoTabla;
import Integral.Herramientas;
import Integral.HorizontalBarUI;
import Integral.Render1;
import Integral.VerticalBarUI;
import java.awt.event.KeyEvent;

/**
 *
 * @author salvador
 */
public class PreFactura extends javax.swing.JPanel {

    private String orden;
    private Usuario user;
    private String estado;
    String sessionPrograma="";
    Herramientas h;
    Orden ord;
    int menu, x=0;
    DefaultTableModel model;
    DefaultTableModel model2;
    FormatoTabla formato;
    Formatos prefac;
    double suma=0.0;
    String[] columnas = new String [] {
        "No","#","Grupo","Descripcion","Can","Med","Precio c/u","Total","Partida","Tipo","Incluir"};
    String[] columnas2 = new String [] {
        "id","Cant.","Med.","Descripcion", "Precio c/u","Total"};
    /**
     * Creates new form PreFactura
     */
    public PreFactura(String ord, Usuario us, String edo, String ses, int op) {
        initComponents();
        orden=ord;
        user=us;
        estado=edo;
        sessionPrograma=ses;
        menu=op;
        formato=new FormatoTabla();
        prefac= new Formatos(this.user, this.sessionPrograma, this.ord);
        formatoTabla();
        buscaCuentas();
        //consulta();
        scroll.getVerticalScrollBar().setUI(new VerticalBarUI());
        scroll.getHorizontalScrollBar().setUI(new HorizontalBarUI());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        medida = new javax.swing.JComboBox();
        ventana = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        caja = new javax.swing.JTextField();
        cb_incluir = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        t_deducible = new javax.swing.JFormattedTextField();
        jLabel30 = new javax.swing.JLabel();
        t_demerito = new javax.swing.JFormattedTextField();
        b_ac = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        c_enviar = new javax.swing.JCheckBox();
        b_externa = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        t_importe = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        t_horas = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        b_busca = new javax.swing.JButton();
        t_busca = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        t_subtotal = new javax.swing.JFormattedTextField();
        t_mo_directa = new javax.swing.JFormattedTextField();
        l5 = new javax.swing.JLabel();
        l6 = new javax.swing.JLabel();
        t_total = new javax.swing.JFormattedTextField();
        scroll = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();

        medida.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        medida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PZAS", "LTS", "MTS", "CMS", "MMS", "GRS", "MLS", "KGS", "HRS", "MIN", "KIT", "FT", "LB", "JGO", "NA" }));

        ventana.setTitle("Partidas Adicionales a facturar");
        ventana.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        ventana.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                ventanaComponentHidden(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Partidas que no estan en la valuación");

        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("+");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 386, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        ventana.getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        t_datos2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id", "Cant", "Med", "Descripción", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        t_datos2.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(t_datos2);

        ventana.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton4.setText("Actualizar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 584, Short.MAX_VALUE)
                .addComponent(jButton4))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton4)
        );

        ventana.getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_END);

        caja.setBorder(null);
        caja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cajaKeyTyped(evt);
            }
        });

        cb_incluir.setForeground(new java.awt.Color(254, 254, 254));
        cb_incluir.setText("Marcar");
        cb_incluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_incluirActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(2, 135, 242));

        jLabel29.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(254, 254, 254));
        jLabel29.setText("Deducible:");

        t_deducible.setBackground(new java.awt.Color(204, 255, 255));
        t_deducible.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_deducible.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_deducible.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_deducible.setText("0.00");

        jLabel30.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(254, 254, 254));
        jLabel30.setText("Demerito:");

        t_demerito.setBackground(new java.awt.Color(204, 255, 255));
        t_demerito.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_demerito.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_demerito.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_demerito.setText("0.00");

        b_ac.setText("Guardar");
        b_ac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_acActionPerformed(evt);
            }
        });

        jButton1.setText("Generar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        c_enviar.setForeground(new java.awt.Color(254, 254, 254));
        c_enviar.setText("Enviar a contabilidad");
        c_enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_enviarActionPerformed(evt);
            }
        });

        b_externa.setText("Agregar partidas");
        b_externa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_externaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_deducible, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_demerito, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_ac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                .addComponent(b_externa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(c_enviar)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(77, 77, 77))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel29)
                .addComponent(jLabel30)
                .addComponent(t_deducible, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(t_demerito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(b_ac)
                .addComponent(jButton1)
                .addComponent(c_enviar)
                .addComponent(b_externa))
        );

        add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(2, 135, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        t_importe.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_importe.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_importe.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_importe.setText("0.00");
        t_importe.setEnabled(false);
        t_importe.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_importe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_importeActionPerformed(evt);
            }
        });
        jPanel1.add(t_importe, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 3, 88, -1));

        jLabel13.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Importe:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 6, -1, -1));

        t_horas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_horas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_horas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_horas.setText("0.00");
        t_horas.setEnabled(false);
        t_horas.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel1.add(t_horas, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 3, 88, -1));

        jLabel11.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Horas:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 6, -1, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 9)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Mano de obra:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 6, -1, -1));

        b_busca.setIcon(new ImageIcon("imagenes/buscar1.png"));
        b_busca.setToolTipText("Busca una partida");
        b_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscaActionPerformed(evt);
            }
        });
        jPanel1.add(b_busca, new org.netbeans.lib.awtextra.AbsoluteConstraints(262, 0, 23, 23));

        t_busca.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        t_busca.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_buscaActionPerformed(evt);
            }
        });
        t_busca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_buscaKeyTyped(evt);
            }
        });
        jPanel1.add(t_busca, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 3, 210, -1));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, -1, -1));

        l4.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l4.setForeground(new java.awt.Color(255, 255, 255));
        l4.setText("Sub-Total:");
        jPanel1.add(l4, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 6, -1, -1));

        t_subtotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_subtotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_subtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_subtotal.setText("0.00");
        t_subtotal.setEnabled(false);
        t_subtotal.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel1.add(t_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 3, 88, -1));

        t_mo_directa.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_mo_directa.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_mo_directa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_mo_directa.setText("0.00");
        t_mo_directa.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_mo_directa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_mo_directaFocusLost(evt);
            }
        });
        jPanel1.add(t_mo_directa, new org.netbeans.lib.awtextra.AbsoluteConstraints(733, 3, 88, -1));

        l5.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l5.setForeground(new java.awt.Color(255, 255, 255));
        l5.setText("M.O. Directa:");
        jPanel1.add(l5, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 6, -1, -1));

        l6.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l6.setForeground(new java.awt.Color(255, 255, 255));
        l6.setText("Total:");
        jPanel1.add(l6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1025, 6, -1, -1));

        t_total.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_total.setText("0.00");
        t_total.setEnabled(false);
        t_total.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel1.add(t_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 3, 88, -1));

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        scroll.setPreferredSize(new java.awt.Dimension(453, 150));

        t_datos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        t_datos.setForeground(new java.awt.Color(102, 102, 102));
        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "#", "Grupo", "Descripcion", "Cant", "Med", "Precio c/u", "Total", "Incluir"
            }
        ));
        t_datos.setGridColor(new java.awt.Color(102, 102, 102));
        t_datos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        t_datos.getTableHeader().setReorderingAllowed(false);
        t_datos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_datosKeyPressed(evt);
            }
        });
        scroll.setViewportView(t_datos);

        add(scroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void b_acActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_acActionPerformed
        // TODO add your handling code here:
        h= new Herramientas(this.user, menu);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            user=(Usuario)session.get(Usuario.class, user.getIdUsuario());
            if(this.user.getEditaDd()==true)
            {
                ord = (Orden)session.get(Orden.class, Integer.parseInt(this.orden));

                if(t_deducible.getText().compareTo("")!=0)
                    ord.setDeducible(((Number)t_deducible.getValue()).doubleValue());
                else
                ord.setDeducible(0.0);

                if(t_demerito.getText().compareTo("")!=0)
                    ord.setDemerito(((Number)t_demerito.getValue()).doubleValue());
                else
                    ord.setDemerito(0.0);

                session.update(ord);
                session.beginTransaction().commit();
                JOptionPane.showMessageDialog(this, "Los datos han sido almacenados");
            }
            else
            {
                ord = (Orden)session.get(Orden.class, Integer.parseInt(this.orden));
                t_deducible.setText(""+ord.getDeducible());
                t_deducible.setValue(ord.getDeducible());
                t_demerito.setText(""+ord.getDemerito());
                t_demerito.setValue(ord.getDemerito());
                JOptionPane.showMessageDialog(this, "¡Acceso Denegado!");
            }
        }
        catch(Exception e)
        {
            session.beginTransaction().rollback();
            JOptionPane.showMessageDialog(this, "No se pudo realizar la actualización.");
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_b_acActionPerformed

    private void b_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscaActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        if(this.t_busca.getText().compareToIgnoreCase("")!=0)
        {
            if(x>=t_datos.getRowCount())
            x=0;
            for(; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 3).toString().indexOf(t_busca.getText()) != -1)
                {
                    t_datos.setRowSelectionInterval(x, x);
                    t_datos.setColumnSelectionInterval(3, 3);
                    t_datos.scrollRectToVisible(new Rectangle(t_datos.getCellRect(x, 0, true)));
                    break;
                }
            }
            x++;
        }
    }//GEN-LAST:event_b_buscaActionPerformed

    private void t_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_buscaActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        if(this.t_busca.getText().compareToIgnoreCase("")!=0)
        {
            //buscaCuentas();
            if(x>=t_datos.getRowCount())
            x=0;
            for(; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 3).toString().indexOf(t_busca.getText()) != -1)
                {
                    t_datos.setRowSelectionInterval(x, x);
                    t_datos.setColumnSelectionInterval(3, 3);
                    break;
                }
            }
            x++;
        }
    }//GEN-LAST:event_t_buscaActionPerformed

    private void t_buscaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_buscaKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
    }//GEN-LAST:event_t_buscaKeyTyped

    private void cb_incluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_incluirActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
            ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
            for(int r=0; r<t_datos.getRowCount(); r++)
            {
                Partida part=null;
                if(t_datos.getValueAt(r, 9).toString().compareTo("e")==0)
                    part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(r, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(r, 1).toString()))).setMaxResults(1).uniqueResult();
                else
                    part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(r, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(r, 1).toString()))).setMaxResults(1).uniqueResult();
                if(part!=null)
                {
                    part.setDescripcionFactura((String)t_datos.getValueAt(r, 3));
                    part.setCantidadFactura((double)t_datos.getValueAt(r, 4));
                    part.setPrecioFactura((double)t_datos.getValueAt(r, 6));
                    part.setFacturado(cb_incluir.isSelected());
                    session.update(part);
                }
            }
            session.getTransaction().commit();
            this.buscaCuentas();
            JOptionPane.showMessageDialog(null, "¡Datos actualizados!");
        }
        catch(Exception e)
        {
            session.getTransaction().rollback();
            this.buscaCuentas();
            JOptionPane.showMessageDialog(null, "¡Error al actualizar los datos!");
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_cb_incluirActionPerformed

    private void t_mo_directaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_mo_directaFocusLost
        // TODO add your handling code here:
        if(t_mo_directa.getText().compareTo("")==0)
        {
            t_mo_directa.setText("0.00");
            t_mo_directa.setValue(0);
        }
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
            if(user.getEditaMoDirecta()==true)
            {
                h=new Herramientas(user, 0);
                h.session(sessionPrograma);
                ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));

                    t_mo_directa.commitEdit();
                    ord.setMoDirecta(((Number) t_mo_directa.getValue()).doubleValue());
                    session.update(ord);
                    session.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "¡Datos actualizados!");
                this.sumaTotales();
            }
            else
            {
                ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
                t_mo_directa.setText(""+ord.getMoDirecta());
                t_mo_directa.setValue(ord.getMoDirecta());
                JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
            }
        }
        catch(Exception e)
        {
            session.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "¡Error al actualizar los datos!");
            t_mo_directa.requestFocus();
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
        sumaTotales();
    }//GEN-LAST:event_t_mo_directaFocusLost

    private void t_importeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_importeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_importeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            for(int r=0; r<t_datos.getRowCount(); r++)
            {
                Partida part=null;
                if(t_datos.getValueAt(r, 9).toString().compareTo("e")==0)
                    part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(r, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(r, 1).toString()))).setMaxResults(1).uniqueResult();
                else
                    part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(r, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(r, 1).toString()))).setMaxResults(1).uniqueResult();
                if(part!=null)
                {
                    part.setDescripcionFactura((String)t_datos.getValueAt(r, 3));
                    part.setCantidadFactura((double)t_datos.getValueAt(r, 4));
                    part.setPrecioFactura((double)t_datos.getValueAt(r, 6));
                    part.setFacturado((boolean)t_datos.getValueAt(r, 10));
                    session.update(part);
                }
            }
            session.getTransaction().commit();
            prefac.ord=ord;
            prefac.prefactura();
        }
        catch(Exception e)
        {
            session.getTransaction().rollback();
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "¡Error al actualizar guardar los datos!");
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void c_enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_enviarActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
        ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
        if(c_enviar.isSelected())
        {
            if(user.getEnviarConta()==true)
            {
                h.session(sessionPrograma);
                try
                {
                    session.beginTransaction().begin();
                    for(int r=0; r<t_datos.getRowCount(); r++)
                    {
                        Partida part=null;
                        if(t_datos.getValueAt(r, 9).toString().compareTo("e")==0)
                            part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(r, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(r, 1).toString()))).setMaxResults(1).uniqueResult();
                        else
                            part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(r, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(r, 1).toString()))).setMaxResults(1).uniqueResult();
                        if(part!=null)
                        {
                            part.setDescripcionFactura((String)t_datos.getValueAt(r, 3));
                            part.setCantidadFactura((double)t_datos.getValueAt(r, 4));
                            part.setPrecioFactura((double)t_datos.getValueAt(r, 6));
                            part.setFacturado((boolean)t_datos.getValueAt(r, 10));
                            session.update(part);
                        }
                    }
                    c_enviar.setEnabled(true);
                    ord.setAutorizadoFacturar(true);
                    session.save(ord);
                    session.getTransaction().commit();
                    estado(false);
                    prefac.ord=ord;
                    prefac.prefactura();
                    
                }
                catch(Exception e)
                {
                    //session.getTransaction().rollback();
                    estado(true);
                    c_enviar.setSelected(false);
                    JOptionPane.showMessageDialog(null, "¡Error al actualizar guardar los datos!");
                    e.printStackTrace();                    
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡No tienes permiso para hacer el envío a Contabilidad!"); 
                c_enviar.setSelected(false);
            }
        }
        else
        {
            if(user.getCancelarEnvio()==true)
            {
                estado(true);
                try
                {
                    session.beginTransaction().begin();
                    if(OrdenFacturado(ord)==-1)
                    {
                        ord.setAutorizadoFacturar(false);
                        session.save(ord);
                        session.getTransaction().commit();
                    }
                    else
                    {
                        estado(false);
                        c_enviar.setSelected(true);
                        JOptionPane.showMessageDialog(null, "¡La Orden ya fue facturada!");
                    }
                }
                catch(Exception e)
                {
                    session.getTransaction().rollback();
                    estado(false);
                    c_enviar.setSelected(true);
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "¡Error al acancelar el envío!");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡No tienes permiso para cancelar el envío!");      
                c_enviar.setSelected(true);
            }
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_c_enviarActionPerformed

    private void b_externaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_externaActionPerformed
        // TODO add your handling code here:
        formatoTabla2();
        cargaExternas();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        ventana.setLocation((d.width/2)-(710/2), (d.height/2)-(470/2));
        ventana.setSize(710, 470);
        ventana.setVisible(true);
    }//GEN-LAST:event_b_externaActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Object[] vector=new Object[]{"", 1.0, "PZA", "", 0.0, 0.0};
        
        model2.addRow(vector);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(this.t_datos2.getSelectedRow()>=0)
        {
            if(t_datos2.getValueAt(t_datos2.getSelectedRow(), 0).toString().compareTo("")!=0)
            {
                int opt=JOptionPane.showConfirmDialog(this, "Confirma que desea eliminar la partida!");
                if (JOptionPane.YES_OPTION == opt)
                {
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    try
                    {
                        h= new Herramientas(user, menu);
                        session.beginTransaction().begin();
                        ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
                        Adicionales eliminar = (Adicionales)session.get(Adicionales.class, Integer.parseInt(t_datos2.getValueAt(t_datos2.getSelectedRow(), 0).toString()));
                        if(eliminar!=null)
                        {
                            session.delete(eliminar);
                            session.beginTransaction().commit();
                            DefaultTableModel model = (DefaultTableModel) t_datos2.getModel();
                            model.removeRow(t_datos2.getSelectedRow());
                            JOptionPane.showMessageDialog(null, "¡Partida eliminada!");
                        }
                        else
                            JOptionPane.showMessageDialog(null, "¡Partida no encontrada!");
                    }
                    catch(Exception e)
                    {
                        session.beginTransaction().rollback();
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "¡error al eliminar!");
                    }
                    if(session!=null)
                        if(session.isOpen())
                            session.close();
                }
            }
            else
                model2.removeRow(t_datos2.getSelectedRow());
        }
        else
            JOptionPane.showMessageDialog(null, "¡Selecciona la partida que deseas eliminar!");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        h= new Herramientas(user, menu);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
            for(int a=0; a<t_datos2.getRowCount(); a++)
            {
                if(t_datos2.getValueAt(a, 0).toString().compareTo("")!=0)
                {//actualizar la partida
                    Adicionales actualiza=(Adicionales)session.get(Adicionales.class, Integer.parseInt(t_datos2.getValueAt(a, 0).toString()));
                    actualiza.setCantidad((double)t_datos2.getValueAt(a, 1));
                    actualiza.setMedida((String)t_datos2.getValueAt(a, 2));
                    actualiza.setDescripcion((String)t_datos2.getValueAt(a, 3));
                    actualiza.setPrecio((double)t_datos2.getValueAt(a, 4));
                    session.update(actualiza);
                }
                else
                {
                    if(t_datos2.getValueAt(a, 3).toString().compareTo("")!=0)
                    {
                        System.out.println(a);
                        Adicionales nuevo=new Adicionales();
                        nuevo.setOrden(ord);
                        nuevo.setCantidad((double)t_datos2.getValueAt(a, 1));
                        nuevo.setMedida((String)t_datos2.getValueAt(a, 2));
                        nuevo.setDescripcion((String)t_datos2.getValueAt(a, 3));
                        nuevo.setPrecio((double)t_datos2.getValueAt(a, 4));
                        nuevo.setDescuento(0.0);
                        nuevo.setRecargo(0.0);
                        int id=(int)session.save(nuevo);
                        t_datos2.setValueAt(""+id, a, 0);
                    }
                }
            }
            session.beginTransaction().commit();
            this.cargaExternas();
        }
        catch(Exception e)
        {
            session.beginTransaction().rollback();
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No se pudo guardar los datos!");
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void ventanaComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ventanaComponentHidden
        // TODO add your handling code here:
        this.sumaTotales();
    }//GEN-LAST:event_ventanaComponentHidden

    private void cajaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cajaKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(caja.getText().length()>=150) 
            evt.consume();
    }//GEN-LAST:event_cajaKeyTyped

    private void t_datosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_datosKeyPressed
        // TODO add your handling code here:
        int code = evt.getKeyCode();
        if(code == KeyEvent.VK_ENTER)
        {
            if(t_datos.isCellEditable(t_datos.getSelectedRow(), t_datos.getSelectedColumn())==true)
            {
                if(t_datos.getSelectedColumn()>-1)
                {
                    Class edo=t_datos.getColumnClass(t_datos.getSelectedColumn());
                    if(edo==Boolean.class)
                    {
                        boolean val=(boolean)t_datos.getValueAt(t_datos.getSelectedRow(), t_datos.getSelectedColumn());
                        if(val==false)
                            t_datos.setValueAt(true, t_datos.getSelectedRow(), t_datos.getSelectedColumn());
                        else
                            t_datos.setValueAt(false, t_datos.getSelectedRow(), t_datos.getSelectedColumn());
                    }
                }
            }
        }
    }//GEN-LAST:event_t_datosKeyPressed

    DefaultTableModel ModeloTablaReporte(int renglones, String columnas[])
        {
            model = new DefaultTableModel(new Object [renglones][columnas.length], columnas)
            {
                Class[] types = new Class [] {
                    java.lang.String.class/*No*/, 
                    java.lang.String.class/*#*/, 
                    java.lang.String.class/*Grupo*/, 
                    java.lang.String.class/*Descripcion*/, 
                    java.lang.Double.class/*Can*/, 
                    java.lang.String.class/*Med*/, 
                    java.lang.Double.class/*Precio c/u*/,
                    java.lang.Double.class/*Total*/, 
                    java.lang.String.class/*Orden*/,
                    java.lang.String.class/*Tipo*/,
                    java.lang.Boolean.class/*Incluir*/, 
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, true, true, false, true, false, false, false, true
                };

                public void setValueAt(Object value, int row, int col)
                 {
                        Vector vector = (Vector)this.dataVector.elementAt(row);
                        Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                        switch(col)
                        {
                            case 3://Descripcion
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {    
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        session.beginTransaction().begin();
                                        Partida part=null;
                                        if(t_datos.getValueAt(row, 9).toString().compareTo("e")==0)
                                            part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                        else
                                            part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                        if(part!=null)
                                        {
                                            if(value.toString().compareTo("")!=0) 
                                            {
                                                part.setDescripcionFactura((String)value);
                                                session.update(part);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                            }
                                            else
                                            {
                                                if(Double.parseDouble(value.toString()) < 0) 
                                                    JOptionPane.showMessageDialog(null, "El campo no puede estar vacío!"); 
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "La partida ya no existe");
                                        }
                                    }
                                    catch(Exception e)
                                    {
                                        session.getTransaction().rollback();
                                        System.out.println(e);
                                        JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                                        
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                    sumaTotales();
                                }
                                break;
                            case 4://can
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {    
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        session.beginTransaction().begin();
                                        user= (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                        if(user.getEditaCostoAut()==true)
                                        {
                                            Partida part=null;
                                            if(t_datos.getValueAt(row, 9).toString().compareTo("e")==0)
                                                part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                            else
                                                part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                            if(part!=null)
                                            {
                                                if(value.toString().compareTo("")!=0 && Double.parseDouble(value.toString())>=0) 
                                                {
                                                    part.setCantidadFactura((double)value);
                                                    part.setCantidadAut((double)value);
                                                    session.update(part);
                                                    session.getTransaction().commit();
                                                    vector.setElementAt(value, col);
                                                    double total=(double)value*(double)t_datos.getValueAt(row, 6);
                                                    t_datos.setValueAt(total, row, 7);
                                                    this.dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                }
                                                else
                                                {
                                                    if(Double.parseDouble(value.toString()) < 0) 
                                                        JOptionPane.showMessageDialog(null, "El campo no permite numeros negativos"); 
                                                }
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(null, "La partida ya no existe");
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "Acceso denegado");
                                        }
                                    }
                                    catch(Exception e)
                                    {
                                        session.getTransaction().rollback();
                                        System.out.println(e);
                                        JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                                        
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                    sumaTotales();
                                }
                                break;
                            case 6://precio c/u
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {    
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        session.beginTransaction().begin();
                                        user= (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                        if(user.getEditaCostoAut()==true)
                                        {
                                            Partida part=null;
                                            if(t_datos.getValueAt(row, 9).toString().compareTo("e")==0)
                                                part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                            else
                                                part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                            if(part!=null)
                                            {
                                                if(value.toString().compareTo("")!=0 && Double.parseDouble(value.toString())>=0) 
                                                {
                                                    part.setPrecioFactura((double)value);
                                                    part.setPrecioAutCU((double)value);
                                                    session.update(part);
                                                    session.getTransaction().commit();
                                                    vector.setElementAt(value, col);
                                                    double total=(double)value*(double)t_datos.getValueAt(row, 4);
                                                    t_datos.setValueAt(total, row, 7);
                                                    this.dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                }
                                                else
                                                {
                                                    if(Double.parseDouble(value.toString()) < 0) 
                                                        JOptionPane.showMessageDialog(null, "El campo no permite numeros negativos"); 
                                                }
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(null, "La partida ya no existe");
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "Acceso denegado");
                                        }
                                    }
                                    catch(Exception e)
                                    {
                                        session.getTransaction().rollback();
                                        System.out.println(e);
                                        JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                                        
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                    sumaTotales();
                                }
                                break;
                            case 10://Incluir
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try
                                    {
                                        session.beginTransaction().begin();
                                        user= (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                        if(user.getEditaCostoAut()==true)
                                        {
                                            Partida part=null;
                                            if(t_datos.getValueAt(row, 9).toString().compareTo("e")==0)
                                                part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                            else
                                                part=(Partida) session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", Integer.parseInt(orden))).add(Restrictions.eq("idEvaluacion", Integer.parseInt(t_datos.getValueAt(row, 0).toString()))).add(Restrictions.eq("subPartida", Integer.parseInt(t_datos.getValueAt(row, 1).toString()))).setMaxResults(1).uniqueResult();
                                            if(part!=null)
                                            {
                                                part.setDescripcionFactura((String)t_datos.getValueAt(row, 3));
                                                part.setPrecioFactura((double)t_datos.getValueAt(row, 6));
                                                part.setPrecioAutCU((double)t_datos.getValueAt(row, 6));
                                                part.setCantidadFactura((double)t_datos.getValueAt(row, 4));
                                                part.setCantidadAut((double)t_datos.getValueAt(row, 4));
                                                part.setFacturado((boolean)value);
                                                session.update(part);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                if(session.isOpen()==true)
                                                    session.close();
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(null, "La partida ya no existe");
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "Acceso denegado");
                                        }
                                    }
                                    catch(Exception e)
                                    {
                                        session.getTransaction().rollback();
                                        System.out.println(e);
                                        JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                                        
                                    }
                                    if(session!=null)
                                        if(session.isOpen())
                                            session.close();
                                    sumaTotales();
                                }
                                break;
                            
                            default:
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                                break;
                        }
                    }
                
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            };
            return model;
        }
    
    DefaultTableModel ModeloTablaReporte2(int renglones, String columnas[])
        {
            model2 = new DefaultTableModel(new Object [renglones][columnas.length], columnas)
            {
                Class[] types = new Class [] {
                    java.lang.String.class/*id*/, 
                    java.lang.Double.class/*cant*/, 
                    java.lang.Double.class/*med*/, 
                    java.lang.String.class/*descripcion*/, 
                    java.lang.Double.class/*precio*/,
                    java.lang.Double.class/*total*/    
                };
                boolean[] canEdit = new boolean [] {
                    false, true, true, true, true, false
                };

                public void setValueAt(Object value, int row, int col)
                 {
                        Vector vector = (Vector)this.dataVector.elementAt(row);
                        Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                        switch(col)
                        {
                            case 1:
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {
                                    if((double)value>0)
                                    {
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        double total=(double)value * (double)t_datos2.getValueAt(row, 4);
                                        t_datos2.setValueAt(total, row, 5);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                        JOptionPane.showMessageDialog(null, "El valor debe ser mayor a 0");
                                }
                                break;

                            case 4:
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {
                                    if((double)value>0)
                                    {
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        double total=(double)value * (double)t_datos2.getValueAt(row, 1);
                                        t_datos2.setValueAt(total, row, 5);
                                        fireTableCellUpdated(row, col);
                                    }
                                    else
                                        JOptionPane.showMessageDialog(null, "El valor debe ser mayor a 0");
                                }
                                break;
                                
                            case 3:
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    break;
                                }
                                else
                                {
                                    vector.setElementAt(value.toString().trim(), col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                break;
                                
                            default:
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                                break;
                        }
                    }
                
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            };
            return model2;
        }
    
    public void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0://N°
                      column.setPreferredWidth(56);
                      //column.setCellRenderer(tcr);
                      break;
                  case 1://#
                      column.setPreferredWidth(40);
                      //column.setCellRenderer(tcr);
                      break;
                  case 2://Grupo
                      column.setPreferredWidth(120);
                      break;
                  case 3://descripcion
                      column.setPreferredWidth(350);
                      break;
                  case 4://cant
                      column.setPreferredWidth(45);
                      break;
                  case 5://medida
                      column.setPreferredWidth(50);
                      DefaultCellEditor editor = new DefaultCellEditor(medida);
                      column.setCellEditor(editor); 
                      editor.setClickCountToStart(2);
                      break;
                  case 6://Precio c/u
                      column.setPreferredWidth(75);
                      break;
                  case 7://Total c/u
                      column.setPreferredWidth(75);
                      break;
                  case 8://Orden
                      column.setPreferredWidth(75);
                      break;
                  case 9://Tipo
                      column.setPreferredWidth(10);
                      break;
                  case 10://Facturar
                      column.setPreferredWidth(10);
                      break;    
                  default:
                      column.setPreferredWidth(10);
                      break;
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }
    
    
    public void tabla_tamaños2()
    {
        TableColumnModel col_model = t_datos2.getColumnModel();
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        FormatoEditor fe=new FormatoEditor();
        t_datos2.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos2.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0://id
                      column.setPreferredWidth(70);
                      //column.setCellRenderer(tcr);
                      break;
                  case 1://cant
                      column.setPreferredWidth(70);
                      //column.setCellRenderer(tcr);
                      break;
                  case 2://med
                      column.setPreferredWidth(70);
                      DefaultCellEditor editor = new DefaultCellEditor(medida);
                      column.setCellEditor(editor); 
                      editor.setClickCountToStart(2);
                      break;
                  case 3://descripcion
                      column.setPreferredWidth(360);
                      DefaultCellEditor editor1 = new DefaultCellEditor(caja);
                      column.setCellEditor(editor1); 
                      editor1.setClickCountToStart(2);
                      break;
                  case 4://precio
                      column.setPreferredWidth(70);
                      break;
                  
                  case 5://precio
                      column.setPreferredWidth(70);
                      break;
                  default:
                      column.setPreferredWidth(10);
                      break;
              }
        }
        JTableHeader header = t_datos2.getTableHeader();
        header.setForeground(Color.white);
    }
    
    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242);
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        tabla_tamaños();
        
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
        t_datos.setDefaultRenderer(String.class, formato);
        t_datos.setDefaultRenderer(Boolean.class, formato);
    }
    
    public void formatoTabla2()
    {
        Color c1 = new java.awt.Color(2, 135, 242);
        for(int x=0; x<t_datos2.getColumnModel().getColumnCount(); x++)
            t_datos2.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        tabla_tamaños2();
        
        t_datos2.setShowVerticalLines(true);
        t_datos2.setShowHorizontalLines(true);
        
        t_datos2.setDefaultRenderer(Double.class, formato); 
        t_datos2.setDefaultRenderer(Integer.class, formato);
        t_datos2.setDefaultRenderer(String.class, formato);
        t_datos2.setDefaultRenderer(Boolean.class, formato);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_ac;
    private javax.swing.JButton b_busca;
    private javax.swing.JButton b_externa;
    private javax.swing.JCheckBox c_enviar;
    private javax.swing.JTextField caja;
    private javax.swing.JCheckBox cb_incluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l4;
    private javax.swing.JLabel l5;
    private javax.swing.JLabel l6;
    private javax.swing.JComboBox medida;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTextField t_busca;
    private javax.swing.JTable t_datos;
    private javax.swing.JTable t_datos2;
    private javax.swing.JFormattedTextField t_deducible;
    private javax.swing.JFormattedTextField t_demerito;
    private javax.swing.JFormattedTextField t_horas;
    private javax.swing.JFormattedTextField t_importe;
    private javax.swing.JFormattedTextField t_mo_directa;
    private javax.swing.JFormattedTextField t_subtotal;
    private javax.swing.JFormattedTextField t_total;
    private javax.swing.JDialog ventana;
    // End of variables declaration//GEN-END:variables


    private void cargaExternas()
    {
        if(orden!=null)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                //session.beginTransaction().begin();
                ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
                h= new Herramientas(user, menu);
                Adicionales[] externas = (Adicionales[])session.createCriteria(Adicionales.class).add(Restrictions.eq("orden.idOrden", ord.getIdOrden())).addOrder(Order.asc("idAdicionales")).list().toArray(new Adicionales[0]);
                if(externas.length>0)
                {
                    t_datos2.setModel(ModeloTablaReporte2(externas.length, columnas2));
                    for(int a=0; a<t_datos2.getRowCount(); a++)
                    {
                        t_datos2.setValueAt(""+externas[a].getIdAdicionales(), a, 0);
                        t_datos2.setValueAt(externas[a].getCantidad(), a, 1);
                        t_datos2.setValueAt(externas[a].getMedida(), a, 2);
                        t_datos2.setValueAt(externas[a].getDescripcion(), a, 3);
                        t_datos2.setValueAt(externas[a].getPrecio(), a, 4);
                        double total=externas[a].getCantidad() * externas[a].getPrecio();
                        t_datos2.setValueAt(total, a, 5);
                    }
                }
                else
                {
                    t_datos2.setModel(ModeloTablaReporte2(0, columnas2));
                }
                this.formatoTabla2();
                if(session.isOpen()==true)
                    session.close();
                sumaTotalesAdicionales();
            }catch(Exception e)
            {
                System.out.println(e);
            }
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }
    private void buscaCuentas()
    {
        double imp=0.0;
        if(orden!=null)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
            
                h= new Herramientas(user, menu);
                h.desbloqueaOrden();
                String resp=h.estadoOrden(ord);
                    try
                    {
                        session.beginTransaction().begin();
                        Adicionales[] par_adicionales=(Adicionales[])ord.getAdicionaleses().toArray(new Adicionales[0]);
                        suma=0.0;
                        for(int w=0; w<par_adicionales.length; w++)
                            suma+=par_adicionales[w].getCantidad()*par_adicionales[w].getPrecio();
                        if(ord.getDeducible()!=null)
                        {
                            t_deducible.setText(""+ord.getDeducible());
                            t_deducible.setValue(ord.getDeducible());
                        }
                        else
                        {
                            this.t_deducible.setText("0.0");
                            this.t_deducible.setValue(0);
                        }
                        if(ord.getDemerito()!=null)
                        {
                            this.t_demerito.setText(""+ord.getDemerito());
                            this.t_demerito.setValue(ord.getDemerito());
                        }
                        else
                        {
                            this.t_demerito.setText("0.00");
                            this.t_demerito.setValue(0);
                        }
                        this.t_mo_directa.setText(""+ord.getMoDirecta());
                        this.t_mo_directa.setValue(ord.getMoDirecta());

                        imp=ord.getCompania().getImporteHora();
                        Partida[] cuentas = (Partida[])session.createCriteria(Partida.class).add(Restrictions.eq("ordenByIdOrden.idOrden", ord.getIdOrden())).add(Restrictions.eq("autorizadoValuacion", true)).add(Restrictions.eq("incluida", false)).addOrder(Order.asc("idEvaluacion")).addOrder(Order.asc("subPartida")).list().toArray(new Partida[0]);
                        Partida[] enlazadas = (Partida[])session.createCriteria(Partida.class).add(Restrictions.eq("ordenByEnlazada.idOrden", ord.getIdOrden())).add(Restrictions.eq("autorizadoValuacion", true)).addOrder(Order.asc("idEvaluacion")).addOrder(Order.asc("subPartida")).list().toArray(new Partida[0]);
                        
                        if(cuentas.length>0 || enlazadas.length>0)
                        {
                            model=ModeloTablaReporte(0, columnas);
                            Vector vector;
                            for(int i=0; i<cuentas.length; i++)
                            {
                                vector=new Vector();
                                vector.add(cuentas[i].getIdEvaluacion());
                                vector.add(cuentas[i].getSubPartida());
                                vector.add(cuentas[i].getCatalogo().getEspecialidad().getDescripcion());
                                if(cuentas[i].getDescripcionFactura()!=null)
                                    vector.add(cuentas[i].getDescripcionFactura());
                                else
                                    vector.add(cuentas[i].getCatalogo().getNombre());
                                if(cuentas[i].getCantidadFactura()!=null)
                                    vector.add(cuentas[i].getCantidadFactura());
                                else
                                    vector.add(cuentas[i].getCant());
                                vector.add(cuentas[i].getMed());
                                if(cuentas[i].getPrecioFactura()!=null && cuentas[i].getPrecioFactura()>0)
                                    vector.add(cuentas[i].getPrecioFactura());
                                else
                                    vector.add(cuentas[i].getPrecioAutCU());
                                if(cuentas[i].getPrecioFactura()!=null && cuentas[i].getCantidadFactura()!=null)
                                    vector.add((cuentas[i].getCantidadFactura()*cuentas[i].getPrecioFactura()));
                                else
                                {
                                    if(cuentas[i].getPrecioFactura()==null && cuentas[i].getCantidadFactura()==null)
                                        vector.add((cuentas[i].getCantidadAut()*cuentas[i].getPrecioAutCU()));
                                    else
                                    {
                                        if(cuentas[i].getPrecioFactura()==null)
                                            vector.add((cuentas[i].getCantidadFactura()*cuentas[i].getPrecioAutCU()));
                                        else
                                            vector.add((cuentas[i].getCantidadAut()*cuentas[i].getPrecioFactura()));
                                    }
                                }
                                vector.add("");
                                vector.add("");
                                if(cuentas[i].getFacturado()!=null)
                                    vector.add(cuentas[i].getFacturado());
                                else
                                    vector.add(false);
                                model.addRow(vector);
                            }

                            //**********cargamos las enlazadas
                            for(int i=0; i<enlazadas.length; i++)
                            {
                                vector=new Vector();
                                vector.add(enlazadas[i].getIdEvaluacion());
                                vector.add(enlazadas[i].getSubPartida());
                                vector.add(enlazadas[i].getCatalogo().getEspecialidad().getDescripcion());
                                if(enlazadas[i].getDescripcionFactura()!=null)
                                    vector.add(enlazadas[i].getDescripcionFactura());
                                else
                                    vector.add(enlazadas[i].getCatalogo().getNombre());
                                if(enlazadas[i].getCantidadFactura()!=null)
                                    vector.add(enlazadas[i].getCantidadFactura());
                                else
                                    vector.add(enlazadas[i].getCant());
                                vector.add(enlazadas[i].getMed());
                                if(enlazadas[i].getPrecioFactura()!=null)
                                    vector.add(enlazadas[i].getPrecioFactura());
                                else
                                    vector.add(enlazadas[i].getPrecioAutCU());
                                if(enlazadas[i].getPrecioFactura()!=null && enlazadas[i].getCantidadFactura()!=null)
                                    vector.add((enlazadas[i].getCantidadFactura()*enlazadas[i].getPrecioFactura()));
                                else
                                {
                                    if(enlazadas[i].getPrecioFactura()==null && enlazadas[i].getCantidadFactura()==null)
                                        vector.add((enlazadas[i].getCant()*enlazadas[i].getPrecioAutCU()));
                                    else
                                    {
                                        if(enlazadas[i].getPrecioFactura()==null)
                                            vector.add((enlazadas[i].getCantidadFactura()*enlazadas[i].getPrecioAutCU()));
                                        else
                                            vector.add((enlazadas[i].getCant()*enlazadas[i].getPrecioFactura()));
                                    }
                                }
                                vector.add(enlazadas[i].getOrdenByIdOrden().getIdOrden());
                                vector.add("e");
                                if(enlazadas[i].getFacturado()!=null)
                                    vector.add(enlazadas[i].getFacturado());
                                else
                                    vector.add(false);
                                model.addRow(vector);
                            }
                            t_datos.setModel(model);
                            formatoTabla();
                        }
                        else
                        {
                            t_datos.setModel(this.ModeloTablaReporte(0, columnas));
                        }
                        session.beginTransaction().rollback();
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                    if(session!=null)
                        if(session.isOpen()==true)
                            session.close();
                    formatoTabla();
                    horas();
                    sumaTotales();
                if(resp.compareTo("")==0 || resp.compareTo("*bloqueada ok*")==0)
                {
                    if(ord.getAutorizadoFacturar()==false)
                    {
                        estado(true);
                        c_enviar.setEnabled(true);
                        c_enviar.setSelected(false);
                    }
                    else
                    {
                        estado(false);
                        c_enviar.setEnabled(true);
                        c_enviar.setSelected(true);
                    }
                }
                else
                {
                    c_enviar.setEnabled(false);
                    estado(false);
                }
            }
            else
            {
                this.c_enviar.setEnabled(false);
                estado(false);
            }
        if(ord.getFechaCierre()!=null)
        {
            //t_datos.setModel(this.ModeloTablaReporte(0, columnas));
            c_enviar.setEnabled(false);
            estado(false);
        }
        formatoTabla();
        
    }    
    
    public void sumaTotales()
    {
        try
        {
            double total=0.0;
            for(int ren=0; ren<t_datos.getRowCount(); ren++)
            {
                if((boolean)t_datos.getValueAt(ren, 10)==true)
                {
                    total+=(double)t_datos.getValueAt(ren, 7);
                }
            }
            total+=suma;
            t_subtotal.setValue(total);
            if(this.t_mo_directa.getText().compareTo("0.00")==0)
            {
                t_importe.commitEdit();
                Number value = (Number) t_importe.getValue();
                total+=value.doubleValue();
            }
            else
            {
                Number value = (Number) t_mo_directa.getValue();
                total+=value.doubleValue();
            }
            t_total.setValue(total);
        }catch(Exception e){e.printStackTrace();}
    }
    
    public void sumaTotalesAdicionales()
    {
        double total=0.0;
        for(int ren=0; ren<t_datos2.getRowCount(); ren++)
        {
            if(t_datos2.getValueAt(ren, 0).toString().compareTo("")!=0)
                total+=(double)t_datos2.getValueAt(ren, 5);
        }
        suma=total;
        sumaTotales();
    }
    
    public void horas()
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {//CASE WHEN B.marker = 1 THEN 1 ELSE NULL END
            session.beginTransaction().begin();
            Query query = session.createQuery("SELECT SUM( "
                    + "(CASE WHEN dm>0 THEN (dm*cant) ELSE 0 END) + "
                    + "(CASE WHEN cam>0 THEN (cam*cant) ELSE 0 END) + "
                    + "(CASE WHEN repMin>0 THEN (repMin*cant) ELSE 0 END) + "
                    + "(CASE WHEN repMed>0 THEN (repMed*cant) ELSE 0 END) + "
                    + "(CASE WHEN repMax>0 THEN (repMax*cant) ELSE 0 END) + "
                    + "(CASE WHEN pint>0 THEN (pint*cant) ELSE 0 END) "
                    + ") from Partida "
                        +"where ordenByIdOrden.idOrden ="+this.orden+" or ordenByEnlazada.idOrden="+orden);
                Object  ent = query.uniqueResult();
                ord=(Orden)session.get(Orden.class, ord.getIdOrden());
                if(ent!=null)
                {
                    t_horas.setValue(Double.parseDouble(ent.toString()));
                    double res=ord.getCompania().getImporteHora()*Double.parseDouble(ent.toString());
                    t_importe.setValue(res);
                }
                else
                {
                    t_horas.setValue(0);
                    t_importe.setValue(0.0);
                }
        }
        catch(Exception e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Error de red no fue posible obtener las horas");
        }
        if(session!=null)
            if(session.isOpen()==true)
                session.close();
    }
    
    public void consulta(){
        if(ord.getFechaCierre()==null)
        {
            h= new Herramientas(user, menu);
            h.desbloqueaOrden();
            String resp=h.estadoOrden(ord);
            if(resp.compareTo("")==0 || resp.compareTo("*bloqueada ok*")==0)
            {
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡Orden bloqueada por:"+ord.getUsuarioByBloqueada().getIdUsuario());
                this.c_enviar.setEnabled(false);
                b_ac.setEnabled(false);
                t_demerito.setEnabled(false);
                t_deducible.setEnabled(false);
                t_datos.setEnabled(false);
                jButton1.setEnabled(false);
                cb_incluir.setEnabled(false);
                t_mo_directa.setEnabled(false);
                t_busca.setEnabled(false);
                b_busca.setEnabled(false);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "¡Orden cerrada!");
            this.c_enviar.setEnabled(false);
            b_ac.setEnabled(false);
            t_demerito.setEnabled(false);
            t_deducible.setEnabled(false);
            t_datos.setEnabled(false);
            jButton1.setEnabled(false);
            cb_incluir.setEnabled(false);
            t_mo_directa.setEnabled(false);
            t_busca.setEnabled(false);
            b_busca.setEnabled(false);
        }
    }   
    void estado(boolean edo)
    {
        b_ac.setEnabled(edo);
        t_demerito.setEnabled(edo);
        t_deducible.setEnabled(edo);
        t_datos.setEnabled(edo);
        jButton1.setEnabled(edo);
        cb_incluir.setEnabled(edo);
        t_mo_directa.setEnabled(edo);
        t_busca.setEnabled(edo);
        b_busca.setEnabled(edo);
        b_externa.setEnabled(edo);
    }
    
    public int OrdenFacturado(Orden or)
    {
        Factura[] fac=(Factura[])or.getFacturas().toArray(new Factura[0]);
        for(int r=0; r<fac.length; r++)
        {
            if(fac[r].getEstadoFactura().compareTo("Pendiente")==0 || fac[r].getEstadoFactura().compareTo("Facturado")==0)
                return fac[r].getIdFactura();
        }
        return -1;
    }
}
