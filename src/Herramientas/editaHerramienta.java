package Herramientas;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Catalogo;
import Hibernate.entidades.Herramienta;
import Hibernate.entidades.Usuario;
import Integral.ExtensionFileFilter;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import Integral.Herramientas;
import Integral.Imagen;
import Integral.Render1;
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.hibernate.Criteria;

public class editaHerramienta extends javax.swing.JPanel {

    private Session session;
    private Herramienta actor;
    DefaultTableModel model;
    Catalogo catalogo;
    String[] columnas = new String [] {"Clave","Nombre", "Foto","Ubicación", "Existencias", "Comentarios"};
    Usuario usr;
    String sessionPrograma="";
    Herramientas h;
    public String NS="";
    int x=0;
    int entro_foto=0;
    File archivo=null;
    public String nombreFoto="";
    int inventario=0;
    
    public editaHerramienta(Usuario usuario, String ses) 
    {
        initComponents();
        sessionPrograma=ses;
        formatoTabla();
        usr=usuario;
        buscaDato();
        borra_cajas();
        cajas(false, false, false, false, false, false, false);
    }
    
    DefaultTableModel ModeloTablaReporte(int renglones, String columnas[])
    {
        model = new DefaultTableModel(new Object [renglones][6], columnas)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class,
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.String.class,
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false,false,false,false,false, false
            };
            public void setValueAt(Object value, int row, int col)
            {
                Vector vector = (Vector)this.dataVector.elementAt(row);
                Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                switch(col)
                {
                    case 0:
                        vector.setElementAt(value, col);
                        this.dataVector.setElementAt(vector, row);
                        fireTableCellUpdated(row, col);
                        break;
                    default:
                        vector.setElementAt(value, col);
                        this.dataVector.setElementAt(vector, row);
                        fireTableCellUpdated(row, col);
                        break;
                }
            }
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];  
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        return model;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        Selecciona2 = new javax.swing.JButton();
        Eliminar1 = new javax.swing.JButton();
        Selecciona1 = new javax.swing.JButton();
        bt_actualiza1 = new javax.swing.JButton();
        t_busca = new javax.swing.JTextField();
        b_busca = new javax.swing.JButton();
        bt_actualiza2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        t_numero = new javax.swing.JTextField();
        l_marca = new javax.swing.JLabel();
        l_tipo = new javax.swing.JLabel();
        b_guardar = new javax.swing.JButton();
        b_cancelar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        t_comentario = new javax.swing.JTextArea();
        p_foto = new javax.swing.JPanel();
        l_modelo1 = new javax.swing.JLabel();
        t_existencia = new javax.swing.JFormattedTextField();
        t_nombre = new javax.swing.JTextField();
        t_ubicacion = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Edita de Herramientas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Lista", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Nombre", "Foto", "Ubicación", "Existencias", "Comentarios"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t_datos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        t_datos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(t_datos);

        Selecciona2.setBackground(new java.awt.Color(2, 135, 242));
        Selecciona2.setForeground(new java.awt.Color(254, 254, 254));
        Selecciona2.setIcon(new ImageIcon("imagenes/add-user.png"));
        Selecciona2.setText("Nuevo");
        Selecciona2.setToolTipText("Agregar un registo actual");
        Selecciona2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Selecciona2.setMaximumSize(new java.awt.Dimension(87, 23));
        Selecciona2.setMinimumSize(new java.awt.Dimension(87, 23));
        Selecciona2.setNextFocusableComponent(b_cancelar);
        Selecciona2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Selecciona2ActionPerformed(evt);
            }
        });

        Eliminar1.setBackground(new java.awt.Color(2, 135, 242));
        Eliminar1.setForeground(new java.awt.Color(254, 254, 254));
        Eliminar1.setIcon(new ImageIcon("imagenes/del-user.png"));
        Eliminar1.setText("Eliminar");
        Eliminar1.setToolTipText("Eliminar el registro actual");
        Eliminar1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Eliminar1.setMaximumSize(new java.awt.Dimension(87, 23));
        Eliminar1.setMinimumSize(new java.awt.Dimension(87, 23));
        Eliminar1.setNextFocusableComponent(Selecciona2);
        Eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Eliminar1ActionPerformed(evt);
            }
        });

        Selecciona1.setBackground(new java.awt.Color(2, 135, 242));
        Selecciona1.setForeground(new java.awt.Color(254, 254, 254));
        Selecciona1.setIcon(new ImageIcon("imagenes/update-user.png"));
        Selecciona1.setText("Seleccionar");
        Selecciona1.setToolTipText("Seleccionar un registro de la tabla para editar");
        Selecciona1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Selecciona1.setNextFocusableComponent(Eliminar1);
        Selecciona1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Selecciona1ActionPerformed(evt);
            }
        });

        bt_actualiza1.setBackground(new java.awt.Color(2, 135, 242));
        bt_actualiza1.setForeground(new java.awt.Color(254, 254, 254));
        bt_actualiza1.setIcon(new ImageIcon("imagenes/tabla.png"));
        bt_actualiza1.setText("Actualizar");
        bt_actualiza1.setToolTipText("Actualizar los datos de la tabla");
        bt_actualiza1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bt_actualiza1.setMaximumSize(new java.awt.Dimension(87, 23));
        bt_actualiza1.setMinimumSize(new java.awt.Dimension(87, 23));
        bt_actualiza1.setNextFocusableComponent(Selecciona1);
        bt_actualiza1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_actualiza1ActionPerformed(evt);
            }
        });

        t_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_buscaActionPerformed(evt);
            }
        });

        b_busca.setIcon(new ImageIcon("imagenes/buscar1.png"));
        b_busca.setToolTipText("Busca una partida");
        b_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscaActionPerformed(evt);
            }
        });

        bt_actualiza2.setBackground(new java.awt.Color(2, 135, 242));
        bt_actualiza2.setForeground(new java.awt.Color(254, 254, 254));
        bt_actualiza2.setIcon(new ImageIcon("imagenes/guardar-documento.png"));
        bt_actualiza2.setText("Exportar");
        bt_actualiza2.setToolTipText("Actualizar los datos de la tabla");
        bt_actualiza2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bt_actualiza2.setMaximumSize(new java.awt.Dimension(87, 23));
        bt_actualiza2.setMinimumSize(new java.awt.Dimension(87, 23));
        bt_actualiza2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_actualiza2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bt_actualiza2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_actualiza1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Selecciona1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Eliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Selecciona2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(t_busca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(t_busca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Selecciona2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Selecciona1)
                    .addComponent(bt_actualiza1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_actualiza2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(254, 254, 254));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Actualizar", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N

        jLabel20.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel20.setText("Clave:");

        t_numero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_numeroKeyTyped(evt);
            }
        });

        l_marca.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        l_marca.setText("Nombre:");

        l_tipo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        l_tipo.setText("Ubicación:");

        b_guardar.setBackground(new java.awt.Color(2, 135, 242));
        b_guardar.setForeground(new java.awt.Color(254, 254, 254));
        b_guardar.setIcon(new ImageIcon("imagenes/guardar.png"));
        b_guardar.setText("Actualizar");
        b_guardar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        b_guardar.setMaximumSize(new java.awt.Dimension(87, 23));
        b_guardar.setMinimumSize(new java.awt.Dimension(87, 23));
        b_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_guardarActionPerformed(evt);
            }
        });

        b_cancelar.setBackground(new java.awt.Color(2, 135, 242));
        b_cancelar.setForeground(new java.awt.Color(254, 254, 254));
        b_cancelar.setIcon(new ImageIcon("imagenes/cancelar.png"));
        b_cancelar.setText("Cancelar");
        b_cancelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        b_cancelar.setMaximumSize(new java.awt.Dimension(87, 23));
        b_cancelar.setMinimumSize(new java.awt.Dimension(87, 23));
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Comentarios:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        t_comentario.setColumns(20);
        t_comentario.setRows(5);
        t_comentario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_comentarioKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(t_comentario);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        p_foto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p_foto.setMinimumSize(new java.awt.Dimension(145, 136));
        p_foto.setPreferredSize(new java.awt.Dimension(145, 136));
        p_foto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p_fotoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout p_fotoLayout = new javax.swing.GroupLayout(p_foto);
        p_foto.setLayout(p_fotoLayout);
        p_fotoLayout.setHorizontalGroup(
            p_fotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );
        p_fotoLayout.setVerticalGroup(
            p_fotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );

        l_modelo1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        l_modelo1.setText("Existencias:");

        t_existencia.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_existencia.setEnabled(false);
        t_existencia.setValue(0.0d);
        t_existencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_existenciaActionPerformed(evt);
            }
        });
        t_existencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_existenciaKeyTyped(evt);
            }
        });

        t_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_nombreKeyTyped(evt);
            }
        });

        t_ubicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_ubicacionKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(b_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(p_foto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(l_modelo1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(t_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(l_marca)
                            .addComponent(l_tipo))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t_ubicacion)
                            .addComponent(t_nombre)
                            .addComponent(t_numero))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_marca, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_ubicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(p_foto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_modelo1)
                    .addComponent(t_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        int opt=JOptionPane.showConfirmDialog(this, "¡Los datos capturados se eliminarán!");
        if(opt==0)
        {
            borra_cajas();
            cajas(false, false, false, false, false, false, false);
        }
    }//GEN-LAST:event_b_cancelarActionPerformed

    private void b_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_guardarActionPerformed
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        if(t_numero.getText().compareTo("")!=0)
        {
            if(t_nombre.getText().compareTo("")!=0)
            {
                try
                {
                    session = HibernateUtil.getSessionFactory().openSession();
                    session.beginTransaction();
                    actor = (Herramienta)session.createCriteria(Herramienta.class).add(Restrictions.eq("idHerramienta", this.t_numero.getText())).add(Restrictions.ne("idHerramienta", NS)).setMaxResults(1).uniqueResult();
                    if(actor==null)
                    {
                        Query qry = session.createSQLQuery("select if(sum(cantidad) is null, 0, sum(cantidad)) as suma from responsiva where id_herramienta='"+t_numero.getText()+"';");
                        qry.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                        ArrayList n=(ArrayList)qry.list();
                        java.util.HashMap map = (java.util.HashMap)n.get(0);
                        double suma=Double.parseDouble(map.get("suma").toString());
                        double nuevo=Double.parseDouble(t_existencia.getText().toString());
                        if(suma<=nuevo)
                        {
                            Query q = session.createQuery("update Herramienta obj set obj.idHerramienta='"+t_numero.getText().trim()+"' where obj.idHerramienta='"+NS+"'");
                            q.executeUpdate();                                    
                            actor=(Herramienta)session.get(Herramienta.class, t_numero.getText());
                            if(t_numero.getText().compareTo("")!=0)
                                actor.setIdHerramienta(t_numero.getText());

                            if(t_nombre.getText().compareTo("")!=0)
                                actor.setNombre(t_nombre.getText());

                            if(entro_foto==1)
                            {
                                nombreFoto="";
                                if(nombreFoto.compareTo("")==0)
                                {
                                    Random rng=new Random();
                                    long  dig8 = rng.nextInt(90000000)+10000000;
                                    nombreFoto=""+dig8+".jpg";
                                }
                                guardaFoto(nombreFoto);
                                actor.setImagen(nombreFoto);
                            }else{
                                actor.setImagen(null);
                            }
                            actor.setUbicacion(t_ubicacion.getText());
                            actor.setExistencias(Double.parseDouble(t_existencia.getText().toString()));                        
                            actor.setComentario(t_comentario.getText());
                            session.update(actor);
                            session.getTransaction().commit();
                            borra_cajas();
                            buscaDato();
                            cajas(false, false, false, false, false, false, false);
                            JOptionPane.showMessageDialog(null, "Registro Actualizado");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Hay "+suma+" Herramientas asignadas en responsivas.");
                        }
                    }
                    else
                    {
                        session.getTransaction().rollback();
                        session.close();
                        JOptionPane.showMessageDialog(null, "Ya existe una Herramienta con el mismo numero de código.");
                    }
                }
                catch (HibernateException he)
                {
                    he.printStackTrace();
                    session.getTransaction().rollback();
                    session.close();
                    JOptionPane.showMessageDialog(null, "Error al guardar");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡El nombre no puede estar vacio!");
                t_numero.requestFocus();
            }
        }
        else
            JOptionPane.showMessageDialog(null, "¡Debe introducir un Código!");
    }//GEN-LAST:event_b_guardarActionPerformed

    private void Selecciona2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Selecciona2ActionPerformed
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);     
        altaHerramienta obj = new altaHerramienta(new javax.swing.JFrame(), true, usr, sessionPrograma);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        obj.getReturnStatus();
        this.borra_cajas();
        cajas(false, false, false, false, false, false, false);
        buscaDato();
    }//GEN-LAST:event_Selecciona2ActionPerformed

    private void Eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Eliminar1ActionPerformed
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
       if(t_datos.getSelectedRow()>=0)
        {
            DefaultTableModel model = (DefaultTableModel) t_datos.getModel();
            int a = t_datos.getSelectedRow();
            int opt=JOptionPane.showConfirmDialog(this, "¡Los datos capturados se eliminarán!");
            if (JOptionPane.YES_OPTION == opt)
            {
                boolean respuesta=eliminar(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString());
                if(respuesta==true)
                { 
                    JOptionPane.showMessageDialog(null, "La Herramienta ha sido eliminado");
                    borra_cajas();
                    cajas(false, false, false, false, false, false, false);
                    buscaDato();
                }
            }else{
                borra_cajas();
                cajas(false, false, false, false, false, false, false);
                buscaDato();
            }
        }
       else
       {
           JOptionPane.showMessageDialog(null, "Selecciona el ejemplar que desees eliminar");
           t_nombre.requestFocus();
       }
       cajas(false, false, false, false, false, false, false);
    }//GEN-LAST:event_Eliminar1ActionPerformed

    private void Selecciona1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Selecciona1ActionPerformed
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        if(t_datos.getSelectedRow()>=0)
        {
            borra_cajas();
            
            File archivo=null;
            entro_foto=0;
            NS=t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString();
            t_numero.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString());
            
            if(t_datos.getValueAt(t_datos.getSelectedRow(), 1)!=null)
                t_nombre.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 1).toString());
            else
                t_nombre.setText("");
            
            if(t_datos.getValueAt(t_datos.getSelectedRow(), 3)!=null){
                t_ubicacion.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 3).toString());
            }else
                t_ubicacion.setText("");
            if(t_datos.getValueAt(t_datos.getSelectedRow(), 4)!=null){
                t_existencia.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 4).toString());
            }else
                t_existencia.setText("0.0");
            
            if(t_datos.getValueAt(t_datos.getSelectedRow(), 5)!=null){
                t_comentario.setText(t_datos.getValueAt(t_datos.getSelectedRow(), 5).toString());
            }else
                t_comentario.setText("");
            try
            {
                p_foto.removeAll();
                Imagen op;
                nombreFoto=t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString();
                op=new Imagen("herramienta/miniatura/"+nombreFoto, 144, 135, 1, 1, 144, 135);
                p_foto.add(op);
                p_foto.repaint();
            }catch(Exception e){
                p_foto.removeAll();
                p_foto.repaint();
            }  
           
            
            this.cajas(true, true, true, true, true, true, true);
        }
        else
        JOptionPane.showMessageDialog(null, "¡No hay un ejemplar seleccionado!");
    }//GEN-LAST:event_Selecciona1ActionPerformed

    private void bt_actualiza1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_actualiza1ActionPerformed
        this.borra_cajas();
        cajas(false, false, false, false, false, false, false);
        buscaDato();
        p_foto.removeAll();
        p_foto.repaint();
    }//GEN-LAST:event_bt_actualiza1ActionPerformed

    private void t_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_nombreKeyTyped
         evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_nombre.getText().length()>=100)
            evt.consume();
    }//GEN-LAST:event_t_nombreKeyTyped

    private void t_comentarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_comentarioKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_comentario.getText().length()>=100)
            evt.consume();
    }//GEN-LAST:event_t_comentarioKeyTyped

    private void t_numeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_numeroKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_numero.getText().length()>=10)
            evt.consume();
    }//GEN-LAST:event_t_numeroKeyTyped

    private void t_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_buscaActionPerformed
        // TODO add your handling code here:
        if(this.t_busca.getText().compareToIgnoreCase("")!=0)
        {
            //buscaCuentas();
            if(x>=t_datos.getRowCount())
            {
                x=0;
                java.awt.Rectangle r = t_datos.getCellRect( x, 1, true);
                t_datos.scrollRectToVisible(r);
            }
            for(; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 1).toString().indexOf(t_busca.getText().toUpperCase()) != -1)
                {
                    t_datos.setRowSelectionInterval(x, x);
                    t_datos.setColumnSelectionInterval(1, 1);
                    java.awt.Rectangle r = t_datos.getCellRect( x, 1, true);
                    t_datos.scrollRectToVisible(r);
                    break;
                }
            }
            x++;
        }
    }//GEN-LAST:event_t_buscaActionPerformed

    private void b_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscaActionPerformed
        // TODO add your handling code here:
        this.t_buscaActionPerformed(null);
    }//GEN-LAST:event_b_buscaActionPerformed

    private void bt_actualiza2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_actualiza2ActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser jF1= new javax.swing.JFileChooser(); 
        jF1.setFileFilter(new ExtensionFileFilter("Excel document (*.xls)", new String[] { "xls" }));
        String ruta = null; 
        if(jF1.showSaveDialog(null)==jF1.APPROVE_OPTION)
        { 
            ruta = jF1.getSelectedFile().getAbsolutePath(); 
            if(ruta!=null)
            {
                File archivoXLS = new File(ruta+".xls");
                try
                {
                    if(archivoXLS.exists()) 
                        archivoXLS.delete();
                    archivoXLS.createNewFile();
                    Workbook libro = new HSSFWorkbook();
                    FileOutputStream archivo = new FileOutputStream(archivoXLS);
                    Sheet hoja = libro.createSheet("Clientes");
                    for(int ren=0;ren<(t_datos.getRowCount()+1);ren++)
                    {
                        Row fila = hoja.createRow(ren);
                        for(int col=0; col<t_datos.getColumnCount(); col++)
                        {
                            Cell celda = fila.createCell(col);
                            if(ren==0)
                            {
                                celda.setCellValue(columnas[col]);
                            }
                            else
                            {
                                try
                                {
                                    celda.setCellValue(t_datos.getValueAt(ren-1, col).toString());
                                }catch(Exception e)
                                {
                                    celda.setCellValue("");
                                }
                            }
                        }
                    }
                    libro.write(archivo);
                    archivo.close();
                    Desktop.getDesktop().open(archivoXLS);
                }catch(Exception e)
                {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(this, "No se pudo realizar el reporte");
                }
            }
        } 
    }//GEN-LAST:event_bt_actualiza2ActionPerformed

    private void p_fotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p_fotoMouseClicked
        // TODO add your handling code here:
        if(t_nombre.isEnabled()==true)
        {
            JFileChooser selector=new JFileChooser();
            selector.setFileFilter(new ExtensionFileFilter("JPG and JPEG", new String[] { "JPG", "JPEG" }));
            int estado=1;
            estado=selector.showOpenDialog(null);
            if(estado==0)
            {
                archivo=selector.getSelectedFile();
                try
                {
                    if(archivo.exists())
                    {
                        String ruta=archivo.getPath();
                        p_foto.removeAll();
                        p_foto.add(new Imagen(ruta, 144, 135, 1, 1, 144, 135));
                        p_foto.repaint();
                        entro_foto=1;
                    }
                    else
                        javax.swing.JOptionPane.showMessageDialog(null, "No se pudo cargar la imagen");
                }catch(Exception e){}
            }
        }
    }//GEN-LAST:event_p_fotoMouseClicked

    private void t_ubicacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_ubicacionKeyTyped
        // TODO add your handling code here:
         evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_ubicacion.getText().length()>=50)
            evt.consume();
    }//GEN-LAST:event_t_ubicacionKeyTyped

    private void t_existenciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_existenciaKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if(((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE) && (caracter !='.')){
                evt.consume();
        }
        if(t_existencia.getText().contains(".")==true && caracter =='.')
            evt.consume();
    }//GEN-LAST:event_t_existenciaKeyTyped

    private void t_existenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_existenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_existenciaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Eliminar1;
    private javax.swing.JButton Selecciona1;
    private javax.swing.JButton Selecciona2;
    private javax.swing.JButton b_busca;
    private javax.swing.JButton b_cancelar;
    private javax.swing.JButton b_guardar;
    private javax.swing.JButton bt_actualiza1;
    private javax.swing.JButton bt_actualiza2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel l_marca;
    private javax.swing.JLabel l_modelo1;
    private javax.swing.JLabel l_tipo;
    public javax.swing.JPanel p_foto;
    private javax.swing.JTextField t_busca;
    public javax.swing.JTextArea t_comentario;
    private javax.swing.JTable t_datos;
    public javax.swing.JFormattedTextField t_existencia;
    public javax.swing.JTextField t_nombre;
    public javax.swing.JTextField t_numero;
    public javax.swing.JTextField t_ubicacion;
    // End of variables declaration//GEN-END:variables


    
    public void borra_cajas()
    {
        t_numero.setText("");
        t_nombre.setText("");
        t_ubicacion.setText("");
        t_comentario.setText("");
        t_existencia.setValue(0.00);
        p_foto.removeAll();
        archivo=null;
        nombreFoto="";
        entro_foto=0;
    }

    public void cajas(boolean numero, boolean nombre, boolean ubicacion, boolean existencias, boolean comentario, boolean cancelar, boolean guardar)
    {
        t_numero.setEnabled(numero);
        t_nombre.setEnabled(nombre);
        t_ubicacion.setEnabled(ubicacion);
        t_comentario.setEnabled(comentario);
        t_existencia.setEnabled(existencias);
        b_cancelar.setEnabled(cancelar);
        b_guardar.setEnabled(guardar);
    }
    
    private List<Object[]> executeHQLQuery(String hql) {
        session = HibernateUtil.getSessionFactory().openSession();
        try {
            session.beginTransaction();
            Query q = session.createQuery(hql);
            List resultList = q.list();
            session.getTransaction().commit();
            return resultList;
        } catch (HibernateException he) {
            he.printStackTrace();
            List lista= null;
            return lista;
        }
    }
    
    private boolean eliminar(String idHerramienta)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction();
            actor = (Herramienta)session.get(Herramienta.class, idHerramienta);
            
           // if(actor.getPartidas.isEmpty()==false)
            if(actor ==null)
            {
                session.getTransaction().rollback();
                JOptionPane.showMessageDialog(null, "¡El ejemplar esta en uso, no se puede eliminar!");
                return false;
            }
            else
            {
                session.delete(actor);
                session.getTransaction().commit();
                return true;
            }
        }catch(Exception e)
        {
            e.printStackTrace();
            session.getTransaction().rollback();
            return false;
        }
        finally
        {
            if(session.isOpen())
            session.close();
        }
    }
    
    private void buscaDato()
    {
        String consulta="from Herramienta obj";
        List <Object[]> resultList=executeHQLQuery(consulta);
        if(resultList.size()>0)
        {
            t_datos.setModel(ModeloTablaReporte(resultList.size(), columnas));
            int i=0;
            for (Object o : resultList)
            {
                actor = (Herramienta) o;
                model.setValueAt(actor.getIdHerramienta(), i, 0);
                model.setValueAt(actor.getNombre(), i, 1);
                model.setValueAt(actor.getImagen(), i, 2);
                model.setValueAt(actor.getUbicacion(), i, 3);
                model.setValueAt(Double.parseDouble(actor.getExistencias().toString()), i, 4);
                model.setValueAt(actor.getComentario(), i, 5);
                
                i++;
            }
        }
        else
            t_datos.setModel(ModeloTablaReporte(0, columnas));
        formatoTabla();
        session.close();
    }
    
    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242);
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
    }
    
    public void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();

        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(50);
                      break;
                  case 1:
                      column.setPreferredWidth(150);
                      break;
                  case 2:
                      column.setPreferredWidth(80);
                      break;
                  case 3:
                      column.setPreferredWidth(100);
                      break;
                  case 4:
                      column.setPreferredWidth(70);
                      break;
                  case 5:
                      column.setPreferredWidth(150);
                      break;
                  default:
                      column.setPreferredWidth(40);
                      break; 
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }
    
    
    private boolean guardaFoto(String no)
{
    try {        
        if(archivo.exists()==true)
        {
            File folder = new File("herramienta");
            folder.mkdirs();
            folder = new File("herramienta/miniatura");
            folder.mkdirs();
            Random rng=new Random();
            long  dig8 = rng.nextInt(90000000)+10000000;
            File destino = new File("herramienta/"+no);
            File miniatura = new File("herramienta/miniatura/"+no);
            String ruta=archivo.getPath();
            javax.swing.JPanel p=new Imagen(ruta, 385, 250, 0, 0, 385, 250);
            BufferedImage dibujo =new BufferedImage(385, 250, BufferedImage.TYPE_INT_RGB);
            Graphics g = dibujo.getGraphics();
            p.paint(g);
            ImageIO.write((RenderedImage)dibujo, "jpg", miniatura); // Salvar la imagen en el fichero
            BufferedImage dibujoGrande =ImageIO.read(archivo);
            ImageIO.write((RenderedImage)dibujoGrande, "jpg", destino); // Salvar la imagen en el fichero*/
            return true;
        }
        return false;
    } 
    catch (Exception ioe)
    {
        ioe.printStackTrace();
        System.out.println("Error al guardar archivo.");
        return false;
    }
}
}
