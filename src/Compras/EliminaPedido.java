/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Compras;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Orden;
import Hibernate.entidades.OrdenExterna;
import Hibernate.entidades.Partida;
import Hibernate.entidades.PartidaExterna;
import Hibernate.entidades.Pedido;
import Hibernate.entidades.Proveedor;   
import Hibernate.entidades.Usuario;
import Integral.FormatoEditor;
import Integral.FormatoEditorTexto;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import Integral.FormatoTabla;
import Integral.Herramientas;
import Integral.HorizontalBarUI;
import Integral.Render1;
import Integral.Integral;
import Integral.VerticalBarUI;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
/**
 *
 * @author ESPECIALIZADO TOLUCA
 */
public class EliminaPedido extends javax.swing.JPanel {
    private Usuario usrAut;
    Usuario usr;
    int entro=0, x=0;
    double imp=0.0;
    static ResultSet rs;
    static Statement st;
    static Connection conn;
    DefaultTableModel temp;
    public Orden orden_act=null;
    public Proveedor prov_act=null;
    public Proveedor provf_act=null;
    public Partida part_act=null;
    MyModel model;
    Proveedor registro = null;
    Partida registropar = null;
    private Session session;
    String sessionPrograma="";
    Herramientas h;
    Formatos f1;
    int menu=0;
    public Pedido pedido=null;
    String[] columnas = new String [] {
        "Interno","N0","#","N° Parte","Folio","Descripción","Med","Plazo","Cant","Costo c/u","Total"
    };
    FormatoTabla formato;
        /**
     * Creates new form nuevoPedido
     */
    public EliminaPedido(Usuario usuario, String ses, Pedido ped, int ventana) {
        usr=usuario;
        sessionPrograma=ses;
        pedido=ped;
        menu=ventana;
        initComponents();
        scroll.getVerticalScrollBar().setUI(new VerticalBarUI());
        scroll.getHorizontalScrollBar().setUI(new HorizontalBarUI());
        formato = new FormatoTabla();
        model=new MyModel(0, columnas);
        t_datos.setModel(model);
        t_datos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        busca();
    }
    
    void estado()
    {
        String consulta="SELECT DISTINCT obj from Orden obj "
                      + "LEFT JOIN FETCH obj.partidasForIdOrden part "
                      + "LEFT JOIN partP.pedido ped "
                      + "where ped.idPedido = "+pedido.getIdPedido();
        List <Object[]> resultList=executeHQLQuery(consulta);
        if(resultList.size()>0)
        {
            Orden[] actor = (Orden[]) resultList.get(0);
            actor[0].getIdOrden();
            if(actor[0].getFechaCierre()!=null)
            {
                this.t_proveedor.setEnabled(false);
                this.t_notas.setEnabled(false);
                JOptionPane.showMessageDialog(null, "¡Orden cerrada!");
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autorizarCosto = new javax.swing.JDialog();
        jPanel7 = new javax.swing.JPanel();
        t_contra = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        t_user = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        b_autorizar = new javax.swing.JButton();
        t_plazo = new javax.swing.JTextField();
        l_plazo = new javax.swing.JLabel();
        t_id_comprador = new javax.swing.JTextField();
        t_proveedor = new javax.swing.JTextField();
        t_clave = new javax.swing.JTextField();
        t_id_aseguradora = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        l_busca = new javax.swing.JLabel();
        b_busca = new javax.swing.JButton();
        t_busca = new javax.swing.JTextField();
        r_autorizar = new javax.swing.JRadioButton();
        b_eliminar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        l_iva = new javax.swing.JLabel();
        t_IVA = new javax.swing.JFormattedTextField();
        t_subtotal = new javax.swing.JFormattedTextField();
        l_subtotal = new javax.swing.JLabel();
        l_total = new javax.swing.JLabel();
        t_total = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        t_notas = new javax.swing.JTextArea();
        l_notas = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        p_arriba = new javax.swing.JPanel();
        p_interno_centro = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        c_tipo = new javax.swing.JComboBox();
        t_pedido = new javax.swing.JTextField();
        t_fecha = new javax.swing.JTextField();
        t_folio_externo = new javax.swing.JTextField();
        l_pedido1 = new javax.swing.JLabel();
        l_nombre1 = new javax.swing.JLabel();
        t_nombre_comprador = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        l_orden = new javax.swing.JLabel();
        t_orden = new javax.swing.JTextField();
        l_tipo = new javax.swing.JLabel();
        t_tipo = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        t_marca = new javax.swing.JTextField();
        l_modelo = new javax.swing.JLabel();
        t_modelo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        t_siniestro = new javax.swing.JTextField();
        l_asegurado = new javax.swing.JLabel();
        t_asegurado = new javax.swing.JTextField();
        l_aseguradora = new javax.swing.JLabel();
        t_aseguradora = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        l_proveedor = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        l_nombre = new javax.swing.JLabel();
        t_nombre = new javax.swing.JTextField();
        t_direccion = new javax.swing.JTextField();
        l_direccion = new javax.swing.JLabel();
        l_colonia = new javax.swing.JLabel();
        t_colonia = new javax.swing.JTextField();
        l_poblacion = new javax.swing.JLabel();
        t_poblacion = new javax.swing.JTextField();
        t_cp = new javax.swing.JTextField();
        l_cp = new javax.swing.JLabel();
        l_rfc = new javax.swing.JLabel();
        t_rfc = new javax.swing.JTextField();

        autorizarCosto.setModalExclusionType(null);
        autorizarCosto.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Autorización de costos mayores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        t_contra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_contraActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel2.setText("Contraseña:");

        t_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_userActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel1.setText("Usuario:");

        b_autorizar.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        b_autorizar.setText("Autorizar");
        b_autorizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_autorizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(b_autorizar)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(t_user)
                            .addComponent(t_contra, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_contra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_autorizar)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout autorizarCostoLayout = new javax.swing.GroupLayout(autorizarCosto.getContentPane());
        autorizarCosto.getContentPane().setLayout(autorizarCostoLayout);
        autorizarCostoLayout.setHorizontalGroup(
            autorizarCostoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        autorizarCostoLayout.setVerticalGroup(
            autorizarCostoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
        );

        t_plazo.setEditable(false);
        t_plazo.setText("DD-MM-YYYY");
        t_plazo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_plazo.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_plazo.setEnabled(false);

        l_plazo.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_plazo.setText("Plazo:");

        t_id_comprador.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_id_comprador.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_id_comprador.setEnabled(false);

        t_proveedor.setEditable(false);
        t_proveedor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_proveedor.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_proveedor.setEnabled(false);

        t_clave.setEditable(false);
        t_clave.setBackground(new java.awt.Color(255, 255, 255));
        t_clave.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_clave.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        t_id_aseguradora.setEditable(false);
        t_id_aseguradora.setBackground(new java.awt.Color(255, 255, 255));
        t_id_aseguradora.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_id_aseguradora.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Eliminación de Pedidos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12))); // NOI18N
        setLayout(new java.awt.BorderLayout());

        l_busca.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_busca.setText("Buscar:");

        b_busca.setBackground(new java.awt.Color(90, 66, 126));
        b_busca.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_busca.setToolTipText("Busca una partida");
        b_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscaActionPerformed(evt);
            }
        });

        t_busca.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_buscaActionPerformed(evt);
            }
        });
        t_busca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_buscaKeyTyped(evt);
            }
        });

        r_autorizar.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        r_autorizar.setText("Autorizacion 1");
        r_autorizar.setEnabled(false);
        r_autorizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r_autorizarActionPerformed(evt);
            }
        });

        b_eliminar.setBackground(new java.awt.Color(90, 66, 126));
        b_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        b_eliminar.setText("Eliminar");
        b_eliminar.setEnabled(false);
        b_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_eliminarActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(2, 135, 242));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        l_iva.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_iva.setForeground(new java.awt.Color(255, 255, 255));
        l_iva.setText("I.V.A.:");
        jPanel6.add(l_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 20, -1, -1));

        t_IVA.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_IVA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_IVA.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_IVA.setText("0.00");
        t_IVA.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_IVA.setEnabled(false);
        t_IVA.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel6.add(t_IVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 88, -1));

        t_subtotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_subtotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_subtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_subtotal.setText("0.00");
        t_subtotal.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_subtotal.setEnabled(false);
        t_subtotal.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel6.add(t_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 88, -1));

        l_subtotal.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_subtotal.setForeground(new java.awt.Color(255, 255, 255));
        l_subtotal.setText("Subtotal:");
        jPanel6.add(l_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 4, -1, -1));

        l_total.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_total.setForeground(new java.awt.Color(255, 255, 255));
        l_total.setText("Total:");
        jPanel6.add(l_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 40, -1, -1));

        t_total.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_total.setText("0.00");
        t_total.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_total.setEnabled(false);
        t_total.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jPanel6.add(t_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 88, -1));

        t_notas.setEditable(false);
        t_notas.setColumns(20);
        t_notas.setRows(5);
        t_notas.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        jScrollPane2.setViewportView(t_notas);

        l_notas.setBackground(new java.awt.Color(254, 254, 254));
        l_notas.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_notas.setText("Notas:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(l_busca)
                        .addGap(18, 18, 18)
                        .addComponent(t_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_eliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 331, Short.MAX_VALUE)
                        .addComponent(l_notas))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(r_autorizar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(l_notas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_busca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_busca))
                    .addComponent(b_busca, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_eliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(r_autorizar)
                .addContainerGap())
        );

        add(jPanel4, java.awt.BorderLayout.PAGE_END);

        scroll.setBorder(null);

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "R. Valua", "N° Parte", "Folio", "Descripción", "Medida", "Plazo", "Cantidad", "Costo c/u", "Total"
            }
        ));
        t_datos.setAutoscrolls(false);
        t_datos.getTableHeader().setReorderingAllowed(false);
        scroll.setViewportView(t_datos);
        t_datos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        add(scroll, java.awt.BorderLayout.CENTER);

        p_arriba.setBackground(new java.awt.Color(254, 254, 254));
        p_arriba.setLayout(new java.awt.BorderLayout());

        p_interno_centro.setBackground(new java.awt.Color(254, 254, 254));
        p_interno_centro.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel12.setBackground(new java.awt.Color(254, 254, 254));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Pedido", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N

        c_tipo.setFont(new java.awt.Font("Droid Sans", 0, 10)); // NOI18N
        c_tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Directo", "Valuacion", "Externo", "Inventario" }));
        c_tipo.setEnabled(false);
        c_tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_tipoActionPerformed(evt);
            }
        });

        t_pedido.setEditable(false);
        t_pedido.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_pedido.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_pedido.setEnabled(false);

        t_fecha.setEditable(false);
        t_fecha.setBackground(new java.awt.Color(255, 255, 255));
        t_fecha.setText("DD-MM-YYYY HH:MM:SS");
        t_fecha.setToolTipText("fecha de pedido");
        t_fecha.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_fecha.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        t_folio_externo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_folio_externo.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_pedido1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_pedido1.setText("N° externo:");

        l_nombre1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_nombre1.setText("comprador:");

        t_nombre_comprador.setEditable(false);
        t_nombre_comprador.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_nombre_comprador.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        jButton1.setText("Pedido:");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(l_pedido1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_folio_externo, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_fecha, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(l_nombre1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_nombre_comprador)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(c_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_pedido1)
                    .addComponent(t_folio_externo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_nombre1)
                    .addComponent(t_nombre_comprador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel8.setBackground(new java.awt.Color(254, 254, 254));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Orden", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N

        l_orden.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_orden.setText("Orden:");

        t_orden.setEditable(false);
        t_orden.setBackground(new java.awt.Color(255, 255, 255));
        t_orden.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_orden.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_tipo.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_tipo.setText("Tipo:");

        t_tipo.setEditable(false);
        t_tipo.setBackground(new java.awt.Color(255, 255, 255));
        t_tipo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_tipo.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        jLabel21.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel21.setText("Marca:");

        t_marca.setEditable(false);
        t_marca.setBackground(new java.awt.Color(255, 255, 255));
        t_marca.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_marca.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_modelo.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_modelo.setText("Modelo:");

        t_modelo.setEditable(false);
        t_modelo.setBackground(new java.awt.Color(255, 255, 255));
        t_modelo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_modelo.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel4.setText("Siniestro:");

        t_siniestro.setEditable(false);
        t_siniestro.setBackground(new java.awt.Color(255, 255, 255));
        t_siniestro.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_siniestro.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_asegurado.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_asegurado.setText("Asegurado:");

        t_asegurado.setEditable(false);
        t_asegurado.setBackground(new java.awt.Color(255, 255, 255));
        t_asegurado.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_asegurado.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_aseguradora.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_aseguradora.setText("Compañía:");

        t_aseguradora.setEditable(false);
        t_aseguradora.setBackground(new java.awt.Color(255, 255, 255));
        t_aseguradora.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_aseguradora.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(l_orden)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_orden, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                        .addGap(41, 41, 41)
                        .addComponent(l_tipo)
                        .addGap(6, 6, 6)
                        .addComponent(t_tipo, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel21)
                        .addGap(6, 6, 6)
                        .addComponent(t_marca, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                        .addGap(46, 46, 46)
                        .addComponent(l_modelo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_modelo, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addComponent(t_siniestro, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_asegurado)
                        .addGap(3, 3, 3)
                        .addComponent(t_asegurado))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(l_aseguradora)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_aseguradora)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(l_tipo)
                                .addComponent(t_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(t_orden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(l_orden))))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(t_marca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel21))
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(l_modelo)
                                .addComponent(t_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_siniestro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(l_asegurado)
                    .addComponent(t_asegurado, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_aseguradora)
                    .addComponent(t_aseguradora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel8, java.awt.BorderLayout.CENTER);

        p_interno_centro.add(jPanel2);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setBackground(new java.awt.Color(254, 254, 254));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Proveedor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N

        l_proveedor.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_proveedor.setText("SELECCIONE UN PROVEEDOR");
        l_proveedor.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l_proveedor, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(l_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel13.setBackground(new java.awt.Color(254, 254, 254));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11)), "Facturar a", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N

        l_nombre.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_nombre.setText("Nombre:");

        t_nombre.setEditable(false);
        t_nombre.setBackground(new java.awt.Color(255, 255, 255));
        t_nombre.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_nombre.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        t_direccion.setEditable(false);
        t_direccion.setBackground(new java.awt.Color(255, 255, 255));
        t_direccion.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_direccion.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_direccion.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_direccion.setText("Dirección:");

        l_colonia.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_colonia.setText("Colonia:");

        t_colonia.setEditable(false);
        t_colonia.setBackground(new java.awt.Color(255, 255, 255));
        t_colonia.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_colonia.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_poblacion.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_poblacion.setText("Población:");

        t_poblacion.setEditable(false);
        t_poblacion.setBackground(new java.awt.Color(255, 255, 255));
        t_poblacion.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_poblacion.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        t_cp.setEditable(false);
        t_cp.setBackground(new java.awt.Color(255, 255, 255));
        t_cp.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_cp.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        l_cp.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_cp.setText("C.P.:");

        l_rfc.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        l_rfc.setText("R.F.C.:");

        t_rfc.setEditable(false);
        t_rfc.setBackground(new java.awt.Color(255, 255, 255));
        t_rfc.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_rfc.setDisabledTextColor(new java.awt.Color(2, 38, 253));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(l_nombre)
                        .addGap(21, 21, 21)
                        .addComponent(t_nombre))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(l_poblacion)
                        .addGap(9, 9, 9)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t_colonia)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(t_poblacion, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(l_rfc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_rfc, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(l_direccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_direccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_cp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_cp, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(l_colonia)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_nombre)
                    .addComponent(t_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_direccion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l_cp)
                        .addComponent(t_cp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_colonia)
                    .addComponent(t_colonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_poblacion)
                    .addComponent(t_poblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_rfc)
                    .addComponent(t_rfc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 27, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel13, java.awt.BorderLayout.CENTER);

        p_interno_centro.add(jPanel1);

        p_arriba.add(p_interno_centro, java.awt.BorderLayout.CENTER);

        add(p_arriba, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void b_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscaActionPerformed
        consulta();
    }//GEN-LAST:event_b_buscaActionPerformed

    private void t_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_buscaActionPerformed
        consulta();
    }//GEN-LAST:event_t_buscaActionPerformed

    private void t_buscaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_buscaKeyTyped
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_busca.getText().length()>=30)
            evt.consume();
    }//GEN-LAST:event_t_buscaKeyTyped

    private void t_contraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_contraActionPerformed
        b_autorizar.requestFocus();
    }//GEN-LAST:event_t_contraActionPerformed

    private void t_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_userActionPerformed
        t_contra.requestFocus();
    }//GEN-LAST:event_t_userActionPerformed

    private void b_autorizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_autorizarActionPerformed
        if(t_user.getText().compareTo("")!=0)
        {
            if(t_contra.getPassword().toString().compareTo("")!=0)
            {
                session = HibernateUtil.getSessionFactory().openSession();
                try
                {
                    session.beginTransaction().begin();
                    Usuario autoriza = (Usuario)session.createCriteria(Usuario.class).add(Restrictions.eq("idUsuario", t_user.getText())).add(Restrictions.eq("clave", t_contra.getText())).setMaxResults(1).uniqueResult();
                    if(autoriza!=null)
                    {
                        if(autoriza.getAutorizarSobrecosto()==true)
                        {
                            usrAut=autoriza;
                            autorizarCosto.dispose();
                        }
                        else
                            JOptionPane.showMessageDialog(this, "¡El usuario no tiene permiso de autorizar!");
                    }
                    else
                    {
                        session.beginTransaction().rollback();
                        JOptionPane.showMessageDialog(this, "¡Datos Incorrectos!");
                        t_user.requestFocus();
                    }
                }catch(Exception e)
                {
                    session.beginTransaction().rollback();
                    JOptionPane.showMessageDialog(this, "¡Error al consultar los datos!");
                    e.printStackTrace();
                }
                finally
                {
                    if(session.isOpen()==true)
                        session.close();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "¡Ingrese la contraseña!");
                t_contra.requestFocus();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "¡Ingrese el usuario!");
            t_user.requestFocus();
        }
    }//GEN-LAST:event_b_autorizarActionPerformed

    private void b_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_eliminarActionPerformed

        if(this.usr.getEliminaPedidos()==true)
        {
            if(t_pedido.getText().compareTo("")!=0)
            {
                if(r_autorizar.isSelected()==false)
                {
                    int opt=JOptionPane.showConfirmDialog(this, "¡Confirma que deseas eliminar el pedido!");
                    if(opt==0)
                    {
                        session = HibernateUtil.getSessionFactory().openSession();
                        try
                        {
                            session.beginTransaction().begin();
                            Pedido ped = (Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
                            if(c_tipo.getSelectedItem().toString().compareTo("Valuacion")==0)
                            {
                                Partida[] partidas =(Partida[]) ped.getPartidas().toArray(new Partida[0]);
                                for(int ren=0; ren<partidas.length; ren++)
                                {
                                    partidas[ren].setPedido(null);
                                    session.update(partidas[ren]);
                                }
                                ped = (Pedido)session.get(Pedido.class, Integer.parseInt(t_pedido.getText()));
                                session.delete(ped);
                                session.beginTransaction().commit();
                                h= new Herramientas(usr, menu);
                                h.session(sessionPrograma);
                                h.desbloqueaOrden();
                                h.desbloqueaPedido();
                                JOptionPane.showMessageDialog(this, "¡Pedido eliminado!");
                                Integral padre = (Integral) this.getTopLevelAncestor();
                                int pos=0;
                                for(int a=0; a<padre.P_pestana.getTabCount(); a++)
                                {
                                    if(padre.P_pestana.getTitleAt(a).compareTo("Eliminar Pedido")==0)
                                        pos=a;
                                }
                                if(pos>=0)
                                    padre.P_pestana.remove(pos);
                            }
                            if(c_tipo.getSelectedItem().toString().compareTo("Externo")==0)
                            {
                                OrdenExterna ordex=(OrdenExterna)session.get(OrdenExterna.class, ped.getOrdenExterna().getIdOrden());
                                session.delete(ordex);
                                session.delete(ped);
                                session.beginTransaction().commit();
                                h= new Herramientas(usr, menu);
                                h.session(sessionPrograma);
                                h.desbloqueaOrden();
                                h.desbloqueaPedido();
                                JOptionPane.showMessageDialog(this, "¡Pedido eliminado!");
                                Integral padre = (Integral) this.getTopLevelAncestor();
                                int pos=0;
                                for(int a=0; a<padre.P_pestana.getTabCount(); a++)
                                {
                                    if(padre.P_pestana.getTitleAt(a).compareTo("Eliminar Pedido")==0)
                                        pos=a;
                                }
                                if(pos>=0)
                                    padre.P_pestana.remove(pos);
                            }
                            if(c_tipo.getSelectedItem().toString().compareTo("Externo")==0)
                            {
                                session.delete(ped);
                                session.beginTransaction().commit();
                                h= new Herramientas(usr, menu);
                                h.session(sessionPrograma);
                                h.desbloqueaOrden();
                                h.desbloqueaPedido();
                                JOptionPane.showMessageDialog(this, "¡Pedido eliminado!");
                                Integral padre = (Integral) this.getTopLevelAncestor();
                                int pos=0;
                                for(int a=0; a<padre.P_pestana.getTabCount(); a++)
                                {
                                    if(padre.P_pestana.getTitleAt(a).compareTo("Eliminar Pedido")==0)
                                        pos=a;
                                }
                                if(pos>=0)
                                    padre.P_pestana.remove(pos);
                            }
                            if(c_tipo.getSelectedItem().toString().compareTo("Directo")==0)
                            {
                                session.delete(ped);
                                session.beginTransaction().commit();
                                h= new Herramientas(usr, menu);
                                h.session(sessionPrograma);
                                h.desbloqueaOrden();
                                h.desbloqueaPedido();
                                JOptionPane.showMessageDialog(this, "¡Pedido eliminado!");
                                Integral padre = (Integral) this.getTopLevelAncestor();
                                int pos=0;
                                for(int a=0; a<padre.P_pestana.getTabCount(); a++)
                                {
                                    if(padre.P_pestana.getTitleAt(a).compareTo("Eliminar Pedido")==0)
                                        pos=a;
                                }
                                if(pos>=0)
                                    padre.P_pestana.remove(pos);
                            }
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                            session.getTransaction().rollback();
                            JOptionPane.showMessageDialog(this, "¡Error al eliminar el pedido!");
                        }
                        finally
                        {
                            if(session.isOpen())
                                session.close();
                        }
                    }
                }
                else
                    JOptionPane.showMessageDialog(this, "¡No se puede eliminar pedidos autorizados!");
            }
            else
                JOptionPane.showMessageDialog(this, "¡Seleccione primero un pedido!");
        }
        else
            JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
    }//GEN-LAST:event_b_eliminarActionPerformed

    private void r_autorizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r_autorizarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_r_autorizarActionPerformed

    private void c_tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_tipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_tipoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        buscaPedido obj = new buscaPedido(new javax.swing.JFrame(), true, 0, "");
        obj.t_busca.requestFocus();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);

        Pedido ped=obj.getReturnStatus();
        if(ped!=null)
        {
            pedido=ped;
            busca();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog autorizarCosto;
    private javax.swing.JButton b_autorizar;
    private javax.swing.JButton b_busca;
    private javax.swing.JButton b_eliminar;
    private javax.swing.JComboBox c_tipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel l_asegurado;
    private javax.swing.JLabel l_aseguradora;
    private javax.swing.JLabel l_busca;
    private javax.swing.JLabel l_colonia;
    private javax.swing.JLabel l_cp;
    private javax.swing.JLabel l_direccion;
    private javax.swing.JLabel l_iva;
    private javax.swing.JLabel l_modelo;
    private javax.swing.JLabel l_nombre;
    private javax.swing.JLabel l_nombre1;
    private javax.swing.JLabel l_notas;
    private javax.swing.JLabel l_orden;
    private javax.swing.JLabel l_pedido1;
    private javax.swing.JLabel l_plazo;
    private javax.swing.JLabel l_poblacion;
    private javax.swing.JLabel l_proveedor;
    private javax.swing.JLabel l_rfc;
    private javax.swing.JLabel l_subtotal;
    private javax.swing.JLabel l_tipo;
    private javax.swing.JLabel l_total;
    private javax.swing.JPanel p_arriba;
    private javax.swing.JPanel p_interno_centro;
    private javax.swing.JRadioButton r_autorizar;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JFormattedTextField t_IVA;
    private javax.swing.JTextField t_asegurado;
    private javax.swing.JTextField t_aseguradora;
    private javax.swing.JTextField t_busca;
    private javax.swing.JTextField t_clave;
    private javax.swing.JTextField t_colonia;
    private javax.swing.JPasswordField t_contra;
    private javax.swing.JTextField t_cp;
    private javax.swing.JTable t_datos;
    private javax.swing.JTextField t_direccion;
    private javax.swing.JTextField t_fecha;
    private javax.swing.JTextField t_folio_externo;
    private javax.swing.JTextField t_id_aseguradora;
    private javax.swing.JTextField t_id_comprador;
    private javax.swing.JTextField t_marca;
    private javax.swing.JTextField t_modelo;
    private javax.swing.JTextField t_nombre;
    private javax.swing.JTextField t_nombre_comprador;
    private javax.swing.JTextArea t_notas;
    private javax.swing.JTextField t_orden;
    private javax.swing.JTextField t_pedido;
    private javax.swing.JTextField t_plazo;
    private javax.swing.JTextField t_poblacion;
    private javax.swing.JTextField t_proveedor;
    private javax.swing.JTextField t_rfc;
    private javax.swing.JTextField t_siniestro;
    private javax.swing.JFormattedTextField t_subtotal;
    private javax.swing.JTextField t_tipo;
    private javax.swing.JFormattedTextField t_total;
    private javax.swing.JTextField t_user;
    // End of variables declaration//GEN-END:variables

   
    public void tabla_tamaños()
    {
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        TableColumnModel col_model = t_datos.getColumnModel();
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
            TableColumn column = col_model.getColumn(i);
            switch(i)
            {
                case 0:                       
                    column.setPreferredWidth(10);
                    break;
                case 1:                       
                    column.setPreferredWidth(10);
                    break;
                case 2:                       
                    column.setPreferredWidth(10);
                    break;
                case 3:               
                    column.setPreferredWidth(100);
                    break;
                case 4:
                    column.setPreferredWidth(10);
                    break;
                case 5:               
                    column.setPreferredWidth(400);
                    break;
                case 6:               
                    column.setPreferredWidth(10);
                    break;
                case 7:               
                    column.setPreferredWidth(10);
                    break;
                case 8:               
                    column.setPreferredWidth(10);
                    break;
                case 9:               
                    column.setPreferredWidth(30);
                    break;
                case 10:               
                    column.setPreferredWidth(30);
                    break;
                default:
                    column.setPreferredWidth(40);
                    break; 
            }
        } 
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }
    
    public void titulos()
    {
        Color c1 = new java.awt.Color(2, 135, 242);   
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        
        FormatoEditorTexto fs=new FormatoEditorTexto();
        t_datos.setDefaultEditor(String.class, fs);
        
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
        t_datos.setDefaultRenderer(String.class, formato);
        t_datos.setDefaultRenderer(Boolean.class, formato);
    }
    
    public void busca()
    {
        if(pedido!=null)
        {
            this.b_eliminar.setEnabled(true);
            h= new Herramientas(usr, menu);
            h.session(sessionPrograma);
            h.desbloqueaOrden();
            h.desbloqueaPedido();
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                this.t_pedido.setText("");
                this.t_proveedor.setText("");
                this.t_plazo.setText("");
                this.t_orden.setText("");
                this.t_fecha.setText("DD/MM/AAAA");
                this.l_proveedor.setText("SELECCIONE UN PROVEEDOR");
                this.t_notas.setText("");
                this.t_nombre.setText("");
                this.t_direccion.setText("");
                this.t_poblacion.setText("");
                this.t_colonia.setText("");
                this.t_cp.setText("");
                this.t_rfc.setText("");
                this.t_tipo.setText("");
                this.t_marca.setText("");
                this.t_modelo.setText("");
                this.t_id_aseguradora.setText("");
                this.t_aseguradora.setText("");
                this.t_siniestro.setText("");
                this.t_asegurado.setText("");
                this.t_folio_externo.setText("");
                
                session.beginTransaction().begin();
                pedido = (Pedido)session.get(Pedido.class, pedido.getIdPedido());
                String resp="";
                
                //*********cargamos datos de la factura*************************
                this.t_pedido.setText(""+pedido.getIdPedido());
                this.t_proveedor.setText(""+pedido.getProveedorByIdProveedor().getIdProveedor());
                l_proveedor.setText(pedido.getProveedorByIdProveedor().getNombre());
                this.t_plazo.setText("");
                Partida[] part=(Partida[])pedido.getPartidas().toArray(new Partida[0]);
                PartidaExterna[] partEx=(PartidaExterna[])pedido.getPartidaExternas().toArray(new PartidaExterna[0]);
                if(part.length>0)
                    t_orden.setText(""+part[0].getOrdenByIdOrden().getIdOrden());
                if(pedido.getNotas()!=null)
                    this.t_notas.setText(pedido.getNotas());
                else
                    this.t_notas.setText("");
                t_fecha.setText(""+pedido.getFechaPedido());
                
                //************cargamos dator de facturacion*********************
                this.t_clave.setText(""+pedido.getProveedorByIdEmpresa().getIdProveedor());
                this.t_nombre.setText(pedido.getProveedorByIdEmpresa().getNombre());
                if(pedido.getProveedorByIdEmpresa()!=null)
                    this.t_direccion.setText(pedido.getProveedorByIdEmpresa().getDireccion());
                else
                    this.t_direccion.setText("");
                if(pedido.getProveedorByIdEmpresa()!=null)
                    this.t_colonia.setText(pedido.getProveedorByIdEmpresa().getColonia());
                else
                    this.t_colonia.setText("");
                if(pedido.getProveedorByIdEmpresa()!=null)
                    this.t_poblacion.setText(pedido.getProveedorByIdEmpresa().getPoblacion());
                else
                    this.t_poblacion.setText("");
                this.t_rfc.setText(pedido.getProveedorByIdEmpresa().getRfc());
                if(pedido.getProveedorByIdEmpresa()!=null)
                    this.t_cp.setText(pedido.getProveedorByIdEmpresa().getCp());
                else
                    this.t_cp.setText("");
                
                //************cargamos datos de la orden***********************
                if(part.length>0)
                {
                    c_tipo.setSelectedItem("Valuacion");
                    resp=h.estadoOrden(part[0].getOrdenByIdOrden());
                    orden_act=part[0].getOrdenByIdOrden();
                    t_tipo.setText(part[0].getOrdenByIdOrden().getTipo().getTipoNombre());
                    t_marca.setText(part[0].getOrdenByIdOrden().getMarca().getIdMarca());
                    t_modelo.setText(""+part[0].getOrdenByIdOrden().getModelo());
                    t_id_aseguradora.setText(""+part[0].getOrdenByIdOrden().getCompania().getIdCompania());
                    t_aseguradora.setText(part[0].getOrdenByIdOrden().getCompania().getNombre());
                    if(part[0].getOrdenByIdOrden().getSiniestro()!=null)
                        t_siniestro.setText(part[0].getOrdenByIdOrden().getSiniestro());
                    else
                        t_siniestro.setText("");
                    t_asegurado.setText(part[0].getOrdenByIdOrden().getClientes().getNombre());
                    t_folio_externo.setText("");
                    this.t_id_comprador.setText(""+pedido.getEmpleado().getIdEmpleado());
                    this.t_nombre_comprador.setText(pedido.getEmpleado().getNombre());
                }
                else
                {
                    if(partEx.length>0 && pedido.getOrdenExterna()!=null)
                    {
                        c_tipo.setSelectedItem("Externo");
                        if(pedido.getOrdenExterna().getTipo()!=null)
                            t_tipo.setText(pedido.getOrdenExterna().getTipo().getTipoNombre());
                        else
                            t_tipo.setText("");
                        if(pedido.getOrdenExterna().getMarca()!=null)
                            t_marca.setText(pedido.getOrdenExterna().getMarca().getIdMarca());
                        else
                            t_marca.setText("");
                        if(pedido.getOrdenExterna().getModelo()!=null)
                            t_modelo.setText(""+pedido.getOrdenExterna().getModelo());
                        else
                            t_modelo.setText("");
                        if(pedido.getOrdenExterna().getCompania()!=null)
                        {
                            t_id_aseguradora.setText(""+pedido.getOrdenExterna().getCompania().getIdCompania());
                            t_aseguradora.setText(pedido.getOrdenExterna().getCompania().getNombre());
                        }
                        else
                        {
                            t_id_aseguradora.setText("");
                            t_aseguradora.setText("");
                        }

                        if(pedido.getOrdenExterna().getAsegurado()!=null)
                            t_asegurado.setText(pedido.getOrdenExterna().getAsegurado());
                        else
                            t_asegurado.setText("");
                        if(pedido.getOrdenExterna().getSiniestro()!=null)
                            this.t_siniestro.setText(pedido.getOrdenExterna().getSiniestro());
                        else
                            this.t_siniestro.setText("");
                        //agregar el commprador
                        this.t_id_comprador.setText(""+pedido.getEmpleado().getIdEmpleado());
                        this.t_nombre_comprador.setText(pedido.getEmpleado().getNombre());
                    }
                    else
                    {
                        if(pedido.getTipoPedido().compareTo("Directo")==0)
                        {
                            c_tipo.setSelectedItem("Directo");
                            orden_act=pedido.getOrden();
                            orden_act=(Orden)session.get(Orden.class, orden_act.getIdOrden());
                            resp=h.estadoOrden(orden_act);
                            t_orden.setText(""+orden_act.getIdOrden());
                            t_tipo.setText(orden_act.getTipo().getTipoNombre());
                            t_marca.setText(orden_act.getMarca().getIdMarca());
                            t_modelo.setText(""+orden_act.getModelo());
                            t_id_aseguradora.setText(""+orden_act.getCompania().getIdCompania());
                            t_aseguradora.setText(orden_act.getCompania().getNombre());
                            if(orden_act.getSiniestro()!=null)
                                t_siniestro.setText(orden_act.getSiniestro());
                            else
                                t_siniestro.setText("");
                            t_asegurado.setText(orden_act.getClientes().getNombre());
                            t_folio_externo.setText("");

                            this.t_id_comprador.setText(""+pedido.getEmpleado().getIdEmpleado());
                            this.t_nombre_comprador.setText(pedido.getEmpleado().getNombre());
                        }
                        else
                        {
                            c_tipo.setSelectedItem("Inventario");
                            this.t_id_comprador.setText(""+pedido.getEmpleado().getIdEmpleado());
                            this.t_nombre_comprador.setText(pedido.getEmpleado().getNombre());
                        }
                    }
                }
                
                //***ordenamos las partidas************
                Partida aux;
                for(int k=0;k<part.length;k++)
                {
                    for(int f=0;f<(part.length-1)-k;f++) 
                    {
                        if (part[f].getIdEvaluacion()>part[f+1].getIdEvaluacion()) 
                        {
                            aux=part[f];
                            part[f]=part[f+1];
                            part[f+1]=aux;
                        }
                        if (part[f].getIdEvaluacion()==part[f+1].getIdEvaluacion() && part[f].getSubPartida()>part[f+1].getSubPartida()) 
                        {
                            aux=part[f];
                            part[f]=part[f+1];
                            part[f+1]=aux;
                        }
                    }
                }
                
                for(int k=0; k<partEx.length; k++)
                {
                    for(int f=0; f<(partEx.length-1)-k; f++) 
                    {
                        if (partEx[f].getIdPartidaExterna() > partEx[f+1].getIdPartidaExterna()) 
                        {
                            PartidaExterna auxEx=partEx[f];
                            partEx[f]=partEx[f+1];
                            partEx[f+1]=auxEx;
                        }
                    }
                }
                //**********
                double tot=0.0d;
                if(c_tipo.getSelectedItem().toString().compareTo("Valuacion")==0)
                {
                    model=new MyModel(part.length, columnas);
                    t_datos.setModel(model);
                    for(int r=0; r<part.length; r++)
                    {
                        model.setValueAt(part[r].getIdPartida(), r, 0);
                        model.setValueAt(part[r].getIdEvaluacion(), r, 1);
                        model.setValueAt(part[r].getSubPartida(), r, 2);
                        if(part[r].getEjemplar()!=null)
                            model.setValueAt(part[r].getEjemplar().getIdParte(), r, 3);
                        else
                            model.setValueAt("", r, 3);
                        model.setValueAt(part[r].getCatalogo().getIdCatalogo(), r, 4);
                        model.setValueAt(part[r].getCatalogo().getNombre(), r, 5);
                        model.setValueAt(part[r].getMed(), r, 6);
                        if(part[r].getPlazo()!=null)
                        {
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            model.setValueAt(sdf.format(part[r].getPlazo()), r, 7);
                        }
                        else
                            model.setValueAt("0", r, 7);
                        if(part[r].getCantPcp()!=0.0d)
                            model.setValueAt(part[r].getCantPcp(), r, 8);
                        else
                            model.setValueAt(0, r, 8);
                        if(part[r].getPcp()!=null)
                            model.setValueAt(part[r].getPcp(), r, 9);
                        else
                            model.setValueAt(0, r, 9);
                        double sum=part[r].getCantPcp()*part[r].getPcp();
                        tot+=sum;
                        model.setValueAt(sum, r, 10);
                    }
                }
                if(c_tipo.getSelectedItem().toString().compareTo("Externo")==0 || c_tipo.getSelectedItem().toString().compareTo("Directo")==0)
                {
                    model=new MyModel(partEx.length, columnas);
                    t_datos.setModel(model);
                    for(int r=0; r<partEx.length; r++)
                    {
                        model.setValueAt(partEx[r].getIdPartidaExterna(), r, 0);
                        model.setValueAt(partEx[r].getPartida(), r, 1);
                        model.setValueAt(partEx[r].getIdValuacion(), r, 2);
                        if(partEx[r].getNoParte()!=null)
                            model.setValueAt(partEx[r].getNoParte(), r, 3);
                        else
                            model.setValueAt("", r, 3);
                        model.setValueAt("", r, 4);
                        model.setValueAt(partEx[r].getDescripcion(), r, 5);
                        model.setValueAt(partEx[r].getUnidad(), r, 6);
                        if(partEx[r].getPlazo()!=null)
                        {
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            model.setValueAt(sdf.format(partEx[r].getPlazo()), r, 7);
                        }
                        else
                            model.setValueAt("0", r, 7);
                        if(partEx[r].getCantidad()!=null)
                            model.setValueAt(partEx[r].getCantidad(), r, 8);
                        else
                            model.setValueAt(0, r, 8);
                        if(partEx[r].getCosto()!=null)
                            model.setValueAt(partEx[r].getCosto(), r, 9);
                        else
                            model.setValueAt(0, r, 9);
                        double sum=partEx[r].getCantidad()*partEx[r].getCosto();
                        tot+=sum;
                        model.setValueAt(sum, r, 10);
                    }
                }
                
                if(c_tipo.getSelectedItem().toString().compareTo("Inventario")==0)
                {
                    model=new MyModel(partEx.length, columnas);
                    t_datos.setModel(model);
                    for(int r=0; r<partEx.length; r++)
                    {
                        model.setValueAt(partEx[r].getIdPartidaExterna(), r, 0);
                        model.setValueAt("", r, 1);
                        model.setValueAt("", r, 2);
                        model.setValueAt(partEx[r].getEjemplar().getIdParte(), r, 3);
                        model.setValueAt("", r, 4);
                        model.setValueAt(partEx[r].getDescripcion(), r, 5);
                        model.setValueAt(partEx[r].getUnidad(), r, 6);
                        if(partEx[r].getPlazo()!=null)
                        {
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            model.setValueAt(sdf.format(partEx[r].getPlazo()), r, 7);
                        }
                        else
                            model.setValueAt("0", r, 7);
                        if(partEx[r].getCantidad()!=null)
                            model.setValueAt(partEx[r].getCantidad(), r, 8);
                        else
                            model.setValueAt(0, r, 8);
                        if(partEx[r].getCosto()!=null)
                            model.setValueAt(partEx[r].getCosto(), r, 9);
                        else
                            model.setValueAt(0, r, 9);
                        double sum=partEx[r].getCantidad()*partEx[r].getCosto();
                        tot+=sum;
                        model.setValueAt(sum, r, 10);
                    }
                }
                
                t_subtotal.setValue(tot);
                double iva=tot*.16;
                t_IVA.setValue(iva);
                t_total.setValue(tot+iva);
                
                //checar si la orden ya fue autorizada
                if(pedido.getUsuarioByAutorizo()!=null)
                {
                    r_autorizar.setSelected(true);
                    r_autorizar.setText(pedido.getUsuarioByAutorizo().getEmpleado().getNombre());
                    model.setColumnaEditable(0, false);
                    model.setColumnaEditable(1, false);
                    model.setColumnaEditable(2, false);
                    model.setColumnaEditable(4, false);
                    model.setColumnaEditable(5, false);
                    model.setColumnaEditable(7, false);
                    model.setColumnaEditable(8, false);
                    model.setColumnaEditable(9, false);
                    b_eliminar.setEnabled(true);
                }
                else
                {
                    r_autorizar.setSelected(false);
                    r_autorizar.setText("Autorizacion 1");
                    b_eliminar.setEnabled(true);
                }
                
                //vemos si la orden no esta bloqueada
                if(c_tipo.getSelectedItem().toString().compareTo("Valuacion")==0 || c_tipo.getSelectedItem().toString().compareTo("Directo")==0)
                {
                    if(resp.compareTo("")==0 || resp.compareTo("*bloqueada ok*")!=0)
                    {
                        this.b_eliminar.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "¡Orden bloqueada por:"+orden_act.getUsuarioByBloqueada().getIdUsuario());
                    }
                    if(b_eliminar.isEnabled()!=false)
                    {
                        resp=h.estadoPedido(pedido);
                        if(resp.compareTo("")==0 || resp.compareTo("*bloqueada ok*")!=0)
                        {
                            this.b_eliminar.setEnabled(false);
                            JOptionPane.showMessageDialog(null, "¡Pedido bloqueado por:"+pedido.getUsuarioByBloqueado().getIdUsuario());
                        }
                    }
                    if(orden_act!=null && orden_act.getFechaCierre()!=null)
                    {
                        this.b_eliminar.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "Orden cerrada");
                    }
                }
                else
                {
                    resp=h.estadoPedido(pedido);
                    if(resp.compareTo("")==0 || resp.compareTo("*bloqueada ok*")!=0)
                    {
                        this.b_eliminar.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "¡Pedido bloqueado por:"+pedido.getUsuarioByBloqueado().getIdUsuario());
                    }
                }
                session.beginTransaction().commit();
            }catch(Exception e)
            {
                e.printStackTrace();
                this.t_pedido.setText("");
                this.t_proveedor.setText("");
                this.t_plazo.setText("");
                this.t_orden.setText("");
                this.t_fecha.setText("DD/MM/AAAA");
                this.l_proveedor.setText("SELECCIONE UN PROVEEDOR");
                this.t_notas.setText("");
                this.t_nombre.setText("");
                this.t_direccion.setText("");
                this.t_poblacion.setText("");
                this.t_colonia.setText("");
                this.t_cp.setText("");
                this.t_rfc.setText("");
                this.t_tipo.setText("");
                this.t_marca.setText("");
                this.t_modelo.setText("");
                this.t_id_aseguradora.setText("");
                this.t_aseguradora.setText("");
                this.t_siniestro.setText("");
                this.t_asegurado.setText("");
                this.t_folio_externo.setText("");
                this.r_autorizar.setEnabled(false);
                
                b_eliminar.setEnabled(false);
                session.beginTransaction().rollback();
            }
            finally
            {
                if(session.isOpen()==true)
                    session.close();
            }
        }
        else
        {
            b_eliminar.setEnabled(false);
        }
        titulos();
    }
    
    private List<Object[]> executeHQLQuery(String hql) {
        try 
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(hql);
            List resultList = q.list();
            session.getTransaction().commit();
            session.disconnect();
            return resultList;
        } catch (HibernateException he) {
            he.printStackTrace();
            List lista= null;
            return lista;
        }
    }
    
    
    public class MyModel extends DefaultTableModel
    {
        Class[] types = new Class [] 
        {
            java.lang.String.class/*interno*/, 
            java.lang.String.class/*#*/, 
            java.lang.String.class/*R.Valua*/, 
            java.lang.String.class/*N° Parte*/, 
            java.lang.String.class/*Folio*/, 
            java.lang.String.class/*Descripción*/, 
            java.lang.String.class/*Medida*/, 
            java.lang.String.class/*Plazo*/, 
            java.lang.Double.class/*Cantidad*/, 
            java.lang.Double.class/*Costo c/u*/, 
            java.lang.Double.class/*Total*/ 
        };
        int ren=0;
        int col=0;
        private List celdaEditable;
        
        public MyModel(int renglones, String columnas[])
        {
            ren=renglones;
            col=columnas.length;
            celdaEditable=new ArrayList();
            //celdaEditable=new boolean[types.length][renglones];
            for(int x=0; x<renglones; x++)
            {
                List aux=new ArrayList();
                for(int y=0; y<types.length; y++)
                    aux.add(false);
                celdaEditable.add(aux);
            }
            this.setDataVector(new Object [renglones][columnas.length], columnas);
        }
        
        @Override
        public int getRowCount() {
            return ren;
        }

        @Override
        public int getColumnCount() {
            return col;
        }
        
        @Override
        public void setValueAt(Object value, int row, int col)
        {
            Vector vector = (Vector)this.dataVector.elementAt(row);
            Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
            switch(col)
            {
                default:
                    vector.setElementAt(value, col);
                    dataVector.setElementAt(vector, row);
                    fireTableCellUpdated(row, col);
                    break;
            }
        }
        
        public Class getColumnClass(int columnIndex) 
        {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) 
        {
            List aux=(List)celdaEditable.get(rowIndex);
            return (boolean)aux.get(columnIndex);
        }
        
        @Override
        public void removeRow(int row) 
        {
            dataVector.remove(row);
            celdaEditable.remove(row);
            fireTableRowsDeleted(row, row);
            this.ren=ren-1;
        }
        
        @Override
        public void addRow(Object[] vec) 
        {
            insertRow(getRowCount(), vec);
        }
        
        @Override
        public void insertRow(int row, Object[] rowData) {
            Vector vector=new Vector();
            for(int x=0; x<rowData.length; x++)
                vector.add(rowData[x]);
            dataVector.insertElementAt(vector, row);
            List aux=new ArrayList();
            for(int x=0; x<rowData.length; x++)
            {
                if(x==7 || x==8)
                    aux.add(true);
                else
                    aux.add(false);
            }
            celdaEditable.add(ren, aux);
            fireTableRowsInserted(row, row);
            this.ren=ren+1;
            
        }
        
        public void setCeldaEditable(int fila, int columna,  boolean editable)
        {
            //this.celdaEditable[ columna ][ fila ] = editable;
            List aux=(List)celdaEditable.get(fila);
            aux.set(columna, editable);
        }

    
        public void setColumnaEditable(int columna, boolean editable)
        {
            for(int i=0; i<celdaEditable.size(); i++)
            {
                List aux=(List)celdaEditable.get(i);
                aux.set(columna, editable);
            }
        }
        
    }
    void consulta()
    {
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        if(t_busca.getText().compareToIgnoreCase("")!=0)
        {
            if(x>=t_datos.getRowCount())
                x=0;
            for(; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 5).toString().indexOf(t_busca.getText()) != -1)
                {
                    t_datos.setRowSelectionInterval(x, x);
                    t_datos.setColumnSelectionInterval(4, 5);
                    break;
                }
            }
            x++;
        }
    }
    
    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242);   
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
        {
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        }
        tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
    }
}